Parallel Computing 40 (2014) 362–373

Contents lists available at ScienceDirect

Parallel Computing
journal homepage: www.elsevier.com/locate/parco

Scalable rank-mapping algorithm for an icosahedral grid system
on the massive parallel computer with a 3-D torus network
Chihiro Kodama a,⇑, Masaaki Terai b, Akira T. Noda a, Yohei Yamada a, Masaki Satoh a,c,
Tatsuya Seiki a, Shin-ichi Iga b, Hisashi Yashiro a,b, Hirofumi Tomita a,b, Kazuo Minami b
a
Research Institute for Global Change, Japan Agency for Marine-Earth Science and Technology, 3173-25 Showa-machi, Kanazawa-ku,
Yokohama, Kanagawa 236-0001, Japan
b
RIKEN Advanced Institute for Computational Science, 7-1-26 Minami-machi, Minatojima, Chuo-ku, Kobe, Hyogo 650-0047, Japan
c
Atmosphere and Ocean Research Institute, The University of Tokyo, 5-1-5 Kashiwanoha, Kashiwa, Chiba 277-8568, Japan

a r t i c l e

i n f o

Article history:
Received 31 October 2013
Received in revised form 26 March 2014
Accepted 3 June 2014
Available online 11 June 2014
Keywords:
MPI
HPC
Torus network topology
Icosahedral grid system
Rank-mapping algorithm
Performance

a b s t r a c t
In this paper, we develop a rank-mapping algorithm for an icosahedral grid system on a
massive parallel computer with the 3-D torus network topology, speciﬁcally on the K computer. Our aim is to improve the weak scaling performance of the point-to-point communications for exchanging grid-point values between adjacent grid regions on a sphere. We
formulate a new rank-mapping algorithm to reduce the maximum number of hops for the
point-to-point communications. We evaluate both the new algorithm and the standard
ones on the K computer, using the communication kernel of the Nonhydrostatic Icosahedral Atmospheric Model (NICAM), a global atmospheric model with an icosahedral grid
system. We conﬁrm that, unlike the standard algorithms, the new one achieves almost perfect performance in the weak scaling on the K computer, even for 10,240 nodes. Results of
additional experiments imply that the high scalability of the new rank-mapping algorithm
on the K computer is achieved by reducing network congestion in the links between adjacent nodes.
Ó 2014 The Authors. Published by Elsevier B.V. This is an open access article under the CC
BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/3.0/).

1. Introduction
A global atmospheric model is a core part of a numerical model for the simulation of weather and climate. In general, such
a weather and climate model performs better as the spatial and temporal resolution are increased (e.g. [1]) and as more
sophisticated physics components are introduced. Thus, a global atmospheric model should be carefully designed and tuned
so that the weather and climate model uses computer resources as efﬁciently as possible.
An icosahedral grid system [2–4] is a promising horizontal grid system for a global atmospheric model [5]. Historically,
global atmospheric models often adopt the spectral method (e.g. [4]). However, the spectral method is not highly scalable for
an up-to-date supercomputer with more than tens of thousands of computing nodes, since it needs global communication at
every time step. In contrast, the ﬁnite volume method (FVM) just needs point-to-point communications with the surrounding control volumes, and such localized communications are more easily scaled. Because of its uniformity on a sphere, an
icosahedral grid system is often employed as a horizontal grid system for the FVM [5–9]. In this study, the target application

⇑ Corresponding author. Tel.: +81 45 778 5623.
E-mail address: kodamac@jamstec.go.jp (C. Kodama).
http://dx.doi.org/10.1016/j.parco.2014.06.002
0167-8191/Ó 2014 The Authors. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/3.0/).

363

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

is the Nonhydrostatic Icosahedral Atmospheric Model (NICAM) [6,7], a global atmospheric model with an icosahedral grid
system. NICAM uses the Message Passing Interface (MPI) for the point-to-point communications.
A 3-D or higher-dimensional torus is a widely used node network topology in distributed-memory computer systems. Of
the top ten supercomputers in the latest TOP500 list [10], Sequoia, Mira, JUQUEEN, Vulcan (these are Blue Gene/Q), the K computer (Tofu interconnect), and Titan (the Cray Gemini network) adopt a 3-D or higher-dimensional torus network topology. In
this study, the target machine is the K computer [11,12], which adopts a virtual 3-D torus network topology called Tofu.
In this study, we develop a rank-mapping algorithm (i.e., an algorithm that creates a one-to-one mapping between the
MPI ranks and the computing nodes) for an icosahedral grid system on a supercomputer that uses the 3-D torus network
topology. Weak scaling is deﬁned to be a dependency of the elapsed time on the number of nodes, under a ﬁxed amount
of work per rank. The aim of this study is to improve the weak scaling performance of the point-to-point communications
for exchanging grid-point values between adjacent grid regions on a sphere. Fig. 1 shows an example of the NICAM communication graph, representing the MPI ranks and the communication networks between them. Ideally, MPI ranks should be
allocated to the computing nodes so that all the adjacent MPI ranks in the communication network are adjacent in the node
network; if so, each point-to-point communication has the exclusive use of a link between the computing nodes. However,
ﬁnding such a perfect rank-mapping algorithm seems to be impossible for this case, since the NICAM communication graph
has cycles consisting of three vertices. A 3-D torus graph does not have such a three-vertex cycle, except for the special case
in which one length of the 3-D torus is exactly three. As we will explain in Section 4, as the number of computing nodes
increases, simple rank-mapping algorithms cause an increase in the number of hops for the point-to-point communications.
This generally results in the network congestion in the links between the nodes.
In Section 2, we discuss related works. The speciﬁcations of NICAM and the K computer are presented and the rank-mapping problem is deﬁned in Section 3. A new rank-mapping algorithm and the standard ones are presented in Section 4. These
algorithms are evaluated using the NICAM communication kernel (Section 5) on the K computer, and the results are presented in Section 6. Our conclusions are presented in Section 7.
2. Related work
For several decades, many researchers have tackled the rank-mapping problem in order to efﬁciently execute application
on parallel computer. (e.g. [13–21] and the references cited therein). In graph theory, the rank-mapping problem is interpreted as the problem of embedding a source graph that represents a communication network into a destination graph that
represents a node network. For a hypercube communication topology, which is found in the algorithm for the fast Fourier
transform, rank-mapping algorithms were developed for the 2-D mesh network topology [14] and for a torus network topology of any dimension [15]. Rank-mapping algorithm for irregular communication topology was investigated for mesh and
torus topology networks in [20]. For the numerical modeling in meteorology, [19,21] applied rank-mapping algorithms
on the Blue Gene/P and/or Blue Gene/L system to the Weather and Research Forecast model (WRF), in which the communication topology is 2-D mesh or nested 2-D mesh. The communication topology of an icosahedral grid system, however, has
not yet been studied.
The rank-mapping problem may be deﬁned as a special case of the quadratic assignment problem (QAP; [13,16,22]). Let
wij be the distance between node i and node j and let Spq be a measure of the amount of communication between rank p and

q
r=0

r=1

r=2

r=3

r=4
p

r=9

r=8

r=7

r=6

r=5

Fig. 1. NICAM communication graph GR between MPI ranks for the region division level, LR ¼ 3 (see Section 3.1 for the deﬁnition of the region division
level). Vertices and lines represent MPI ranks and communication links between two MPI ranks, respectively. Minor links are omitted. The vertices and lines
also show geographical regions and the adjacent regions, respectively. Shadings denote basic regions. The vector (p, q, r) is the index of a vertex. The
coordinates (p, q) indicate a point within a basic region r.

364

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

rank q. The QAP is to ﬁnd the mapping function f between the rank and node, such that the total communication,
P
i;j wij Sf ðiÞf ðjÞ , is minimized. However, the QAP is NP-hard, and efﬁciently obtaining its exact solution is challenging even
for several tens of nodes [22]. In addition, though some authors [19–21] uses the total communication or average number
of hops as a metric of the elapsed time, minimizing them does not necessarily mean efﬁciently reducing the communication
imbalance between the nodes, which seems to be a key factor in worsening the weak scaling. Instead of the total communication or average number of hops, to reduce the communication imbalance, we now use the maximum number of hops as
a metric of the elapsed time. In Section 6.1, we will show that the MPI rank with larger number of hops tends to cost more
time for the communication on the K computer. It seems that the metric of the elapsed time should include not only the
number of hops but also the other factors such as network congestion, as with ‘‘effective bisection bandwidth’’ introduced
by [23] to evaluate routing algorithms. We will discuss the effect of network congestion in Section 6.2.
This study is applicable only to a 3-D or higher-dimensional torus node network topology with static routing algorithm.
Another promising node network topology for the exascale computer era is multi-level direct network with all-to-all connections at each level such as dragonﬂy topology [24] and PERCS topology [25,26]. This approach, with the aid of the
high-radix router, achieves the small number of hops between any two nodes on a massive parallel computer. In order to
reduce network congestion across different network levels, adaptive routing algorithms have been suggested, in which
the route is dynamically chosen to bypass the congested link. Adaptive routing algorithms also have been proposed and evaluated for mesh/torus-type network such as tori-connected mesh (TESH) network [27]. Such a development of adaptive routing algorithms as well as an improvement of static routing algorithms [23] may lead to obviate the needs for explicit rankmapping [26].
3. Background
3.1. NICAM
NICAM [6,7] is a cutting-edge global atmospheric model with an icosahedral grid system, developed mainly at the Japan
Agency for Marine-Earth Science and Technology, The University of Tokyo, and RIKEN. NICAM leads the world in the ﬁeld of
high-resolution global atmospheric modeling [28,1]. With the aid of the K computer, NICAM recently achieved global simulation with a revolutionizing horizontal resolution of 870 m, the world’s ﬁnest horizontal mesh actually used in the simulation of the global atmosphere [29].
Fig. 2 shows an icosahedral grid system. A horizontal grid point is deﬁned at each vertex. An icosahedron has twelve horizontal grid points and ten diamonds, each consisting of two regular triangles (Fig. 2a). A ﬁner horizontal grid can be generated by recursively dividing each diamond into four sub-diamonds (Fig. 2b–d; [7]). The recursion depth is called the
grid division level, denoted as LG (P 0) in this paper. Each control volume is deﬁned to include one horizontal grid point.
In the following discussion, for simplicity, the grid points at the north and south poles will be neglected; it will be justiﬁed
in Sections 5 and 6.1. The number of horizontal grid points is expressed as 10 Â 4LG . The atmosphere is also discretized in the
vertical direction. Physical variables such as temperature, wind, pressure, and water vapor are deﬁned at each 3-D grid point.
These 3-D variables make up the greater part of the point-to-point communications.
For parallel computing using the MPI, NICAM introduces the concept of ‘‘region’’, a collection of horizontal grid points
[30]. Each color in Fig. 3a shows a ‘‘basic region’’, which handles 4LG horizontal grid points. There are ten basic regions on
a sphere. A basic region can be recursively divided, similarly to the grid division (Fig. 3b), and its recursion depth is called
the region division level and denoted as LR (P 0). The number of regions is N R ¼ 10 Â 4LR .
In this study, NICAM allocates one region to each MPI rank. There are four communication links for each MPI rank neglecting minor communications with only a tiny amount of data. Fig. 1 shows the communication graph between MPI ranks
(hereinafter GR) for NICAM. GR is an unweighted, undirected 4-regular graph. The vertices and edges in GR show the MPI
ranks and the communication links necessary to advance one step in time. They also show the regions and the adjacent
regions. Let R ¼ ðp; q; rÞ be an index vector of the vertex in GR deﬁned in Fig. 1 (0 6 p; q < 2LR ; 0 6 r < 10), where the coordinates (p, q) identify a point within a basic region r. In NICAM, the MPI rank is related to R by

MPIrank ¼ p þ 2LR Á q þ 4LR Á r:
Each MPI rank has 4LG ÀLR horizontal grid points. There are N p ¼ 10 Â 4LR MPI ranks.

(a)

(b)

(c)

Fig. 2. Icosahedral grids for (a–d) LG = 0, 1, 2, and 3.

(d)

365

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

(a)

(b)

Fig. 3. (a) Same as Fig. 2d, but showing basic regions. Circles of different colors represent horizontal grid points in different basic regions. The black circle
represents the pole region, which contains only the pole grid point and is neglected in this study. (b) Same as (a), but for focusing on one basic region. The
blue basic region is divided into four subregions (LR ¼ 1), denoted as four purple frames. (For interpretation of the references to colour in this ﬁgure legend,
the reader is referred to the web version of this article.)

3.2. The K computer
The K computer, the world’s ﬁrst system to exceed peak performance of 10 PFlops, was developed by RIKEN and Fujitsu as
a Japan national project between 2006 and 2012 and has been operated by RIKEN since September 2012. It is a distributedmemory supercomputer system with more than 80,000 computing nodes. The interconnection between the nodes is the 6-D
mesh/torus network topology named Tofu (Torus fusion) [31–33]. In actual use, a job process can use a virtual 3-D torus network topology projected onto the physical layer of 6-D mesh/torus interconnection. This provides a complete and exclusive
3-D torus to each process, and there is a high availability of ways to bypass failed nodes.
In this study, we only consider this virtual 3-D torus network topology from a user’s perspective. The 3-D torus is represented as an unweighted, undirected 6-regular graph (GN). Each node is identiﬁed by an index vector N ¼ ðX; Y; ZÞ, where
0 6 X < N X ; 0 6 Y < N Y ; 0 6 Z < N Z and ðN X ; N Y ; N Z Þ are the numbers of nodes in the X, Y, and Z directions, respectively. This
notation is deﬁned to express an isotropic 3-D torus, and hence the X, Y, and Z directions are interchangeable. If it is neces^

^

^ ^

^

^

sary to distinguish the three directions, a hat is added to the above notation, as N ¼ ðX ; Y ; Z Þ; where 0 6 X < N ^ ; 0 6 Y < N ^ ;
X

Y

^

and 0 6 Z < N ^ . For the K computer, N ^ 6 48; N ^ 6 54; and N ^ 6 32. Although the 3-D torus on the K computer is anisotropic,
Z

X

Y

Z

this does not affect the main conclusions and discussion of this paper. The effect of the anisotropic aspect is brieﬂy mentioned in Appendix A.

3.3. Rank-mapping problem
The rank-mapping problem is formulated as ﬁnding a one-to-one mapping function between R and N in order to improve
the elapsed time of the point-to-point communications. The mapping function F is deﬁned to satisfy N ¼ FðRÞ. Let R1 and R2
be adjacent vertices in GR, and let N1 ¼ FðR1 Þ and N2 ¼ FðR2 Þ. Then, the distance between N1 and N2 on GN represents the
number of hops for the point-to-point communication between R1 and R2 . In this study, the maximum number of hops
for any combination of adjacent vertices on GR (which does not include the poles by deﬁnition) is chosen to be the metric
for the rank-mapping problem. Scalability is a measure of the independence of this metric to the number of nodes. On the K
computer, the actual routing is done on a 6-D mesh/torus, and therefore, in most cases, the theoretical number of hops on a
3-D torus is greater than or equal to the actual number on a 6-D mesh/torus.

4. Rank-mapping algorithms
The communication graph GR contains 2-D mesh graphs consisting of 2LR Â 2LR vertices (shadings in Fig. 1; hereinafter
graph GRS). The union of ten different GRS is a spanning subgraph of GR. Therefore, it is natural to consider a rank-mapping
algorithm based on the GRS and restrict the node shape to ðN X ; N Y ; N Z Þ ¼ ð2LR ; 2LR ; 10Þ. In this section, we introduce three rankmapping algorithms, as depicted in Fig. 4a–c. For each algorithm, the theoretical number of hops is represented by the color
in Fig. 4a–c. The maximum values as a function of the number of nodes is shown in Fig. 5.

366

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

(a) BASIC

Y

Z=0

Z=1

Z=2

Z=3

Z=4
X

Z=9

Z=8

Z=7

Z=6

Z=5

(b) STAG

Y

Z=0

Z=2

Z=4

Z=6

Z=8
X

Z=1

Z=3

Z=5

Z=7

Z=9

(c) STAG-TRIF
Y Y
Z=0

Z=1

Z=2 Z=3

Z=4 Z=5

Z=6 Z=7

Z=8

Z=9
X X

Z=1

Z=2

Z=3 Z=4

Z=5 Z=6

Z=7 Z=8

Z=9

Z=0

hops
Fig. 4. Rank-mapping algorithms for Fig. 1 (LR ¼ 3). (a) BASIC. (b) STAG. (c) STAG-TRIF. The coordinates (X, Y, Z) represent a node in a 3-D torus network. In
(c), the MPI ranks with dark shading are mapped to the computing node with an XY axis that is horizontally ﬂipped compared to those with light shading.
See the main text for formulations of the algorithms. Each line color indicates the theoretical number of hops for each point-to-point communication. (For
interpretation of the references to colour in this ﬁgure legend, the reader is referred to the web version of this article.)

Maximum #Hops

64
32
16

BASIC

8

STAG

4

STAG-TRIF

2

1
10

40

160

640

2560 10240

#node

Fig. 5. Theoretical maximum number of hops on the 3-D torus for (thin solid) BASIC, (thick solid) STAG, and (thick dashed) STAG-TRIF. The horizontal and
vertical log-scale axes show the number of nodes and maximum number of hops, respectively.

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

367

4.1. BASIC
BASIC (Fig. 4a) is the default rank-mapping algorithm, simply formulated as follows:

X ¼ p;

Y ¼ q;

Z ¼ r:

The thin solid line in Fig. 5 shows the theoretical maximum number of hops, using BASIC. This strongly depends on the
number of nodes, and, therefore, BASIC is not a scalable rank-mapping algorithm. The increase in the number of hops originates in the point-to-point communications between the MPI ranks of different GRS (shown in red in Fig. 4a). For example,
the point-to-point communication between ðp; q; rÞ ¼ ð2LR À1 À 1; 2LR À 1; 0Þ and ð0; 2LR À1 ; 1Þ needs 2LR þ 1 hops; therefore, the
maximum number of hops rapidly increases as LR increases.
4.2. STAG
STAG (staggered; Fig. 4b) is the same as BASIC except for the Z direction:

X ¼ p;

Y ¼ q;

Z¼



2r

ðfor 0 6 r < 5Þ

2ð9 À rÞ þ 1 ðfor 5 6 r < 10Þ

:

STAG reduces the distance in the Z direction between adjacent GRS (e.g. r = 0 and 5). The maximum number of hops is
smaller with STAG than with BASIC, by two to three hops (Fig. 5, thick solid line). However, the maximum number of hops
still increases as the number of nodes increases for the same reason as with BASIC (shown in red in Fig. 4b).
4.3. STAG-TRIF
STAG-TRIF (staggered triangular folding; Fig. 4c) is based on STAG. First, deﬁne r 0 as follows:

r0 



2r

ðfor 0 6 r < 5Þ

2ð9 À rÞ þ 1 ðfor 5 6 r < 10Þ

:

As discussed previously, the factor that prevents scalability in BASIC and STAG is the point-to-point communications
between the MPI ranks of different GRS. To avoid an increase in the number of hops as the number of nodes increases, each
GRS is divided into triangles, as shown in Fig. 4c. Formulations of STAG-TRIF are expressed for the following four conditions:
(1) r0 is even and p þ q < 2LR ,

X ¼ p;

Y ¼ q;

Z ¼ r0 :

(2) r0 is even and p þ q P 2LR ;

X ¼ 2LR À q À 1;

Y ¼ 2LR À p À 1;

Z ¼ r 0 þ 1:

(3) r0 is odd and p þ q < 2LR ,

X ¼ 2LR À q À 1;

Y ¼ 2LR À p À 1;

Z ¼ r0 :

(4) r0 is odd and p þ q P 2LR ,

X ¼ p;

Y ¼ q;

Z ¼ modðr 0 þ 1; 10Þ:

In theory, STAG-TRIF achieves perfect scalability in the sense of the maximum number of hops, which is constant (=2),
independent of the number of nodes (Fig. 5, thick dashed line).
5. Communication kernel and experimental design
The NICAM communication kernel was employed to measure the actual impact of the rank-mapping algorithms on the
elapsed time of the point-to-point communications. The communication kernel, constructed based on the NICAM source
code, contains the minimum required procedures for the point-to-point communications that are necessary for the time
integration of NICAM. Generally, the amount of computation per time step is different for each MPI rank at each time step.
The NICAM communication kernel is free from such a load imbalance, unlike NICAM itself. Therefore, use of the communication kernel helps us to understand, in a simple manner, the impact of the rank-mapping algorithm on the elapsed time of
the point-to-point communications.
Fig. 6 shows brief ﬂowcharts for the NICAM communication kernel and comm_data_transfer(), the subroutine for the
point-to-point communications. The elapsed time of comm_data_transfer() was measured for this analysis. The subroutine
mpi_barrier() was inserted just before comm_data_transfer() so that the point-to-point communications began simultaneously. The amount of data transmitted (or received) for each rank is approximately 8 Â 4 Â 2LG ÀLR Â vmax Â kmax bytes

368

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

Fig. 6. Brief ﬂowchart of the NICAM communication kernel. (Left) overall program. (Right) subroutine comm_data_transfer(). Gray shadings show the target
procedures for the elapsed-time measurement. Random sleep (in the left panel) is inserted for the test of asynchronized point-to-point communications
between the MPI ranks, as described in Section 6.2.

14

1.05

1
10
0.95

8
6

0.9

4

0.85
2

Weak Scaling Index

Maximum Elapsed Time [s]

12

BASIC
STAG
STAG-TRIF

BASIC
STAG
STAG-TRIF

0.8

0

10x1x1

10x2x2

10x4x4

10x8x8

10x16x16

(10)

(40)

(160)

(640)

(2,560)

10x32x32
(10,240)

Node Shape (#node)
Fig. 7. (Bar and error bar; left axis) maximum elapsed time (seconds) of the point-to-point communications between MPI ranks for
ðN ^ ; N ^ ; N ^ Þ ¼ ð10; 2LR ; 2LR Þ, where LR ¼ 0; 1; 2; 3; 4 and 5. Blue, red, and green indicate BASIC, STAG, and STAG-TRIF, respectively. Each experiment was
X
Y
Z
repeated three times. Each bar shows the ensemble mean of the maximum elapsed time, and the error bar shows its ﬂuctuation. By deﬁnition, STAG-TRIF is
same as STAG for LR ¼ 0. (Line and mark; right axis) The weak scaling index, aNweak , for each rank-mapping algorithm. (For interpretation of the references to
colour in this ﬁgure legend, the reader is referred to the web version of this article.)

per one call of comm_data_transfer(), where vmax and kmax are the numbers of 3-D variables and vertical layers, respectively, and for an 8-byte data format. As with the algorithms in the previous section, the communication kernel ignores
the north and south poles; the amount of data transmitted for the poles is approximately 8 Â 2 Â 5 Â vmax Â kmax bytes,
about 2LG ÀLR À1 times smaller than that between the normal regions. For each rank-mapping algorithm, we prepared a

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

369

Fig. 8. Elapsed time of the point-to-point communications for each MPI rank when LR ¼ 5. (a) BASIC. (b) STAG. (c) STAG-TRIF. The horizontal axis is the MPI
rank, ranging from 0 to 10,239, and the vertical axis shows the elapsed time, ranging between 9 and 12 s. Only one ensemble member is shown here, but the
conclusions do not depend on which ensemble member is used.

‘‘rank-map ﬁle’’ that listed N for each MPI rank. When the job script was submitted to the K computer, the job manager allocated the MPI ranks to the nodes according to the rank-map ﬁle.
For the elapsed-time measurement, comm_data_transfer() was called 1000 times (NUM = 1000 in Fig. 6), and vmax and
kmax were set to 100 and 38, respectively. Though the conﬁguration of vmax = 100 may be too large considering the current
standard conﬁguration of vmax = 12, vmax is expected to increase in near future by introducing chemical processes (plus
several dozen) and more cloud categories (plus 6 or more). In addition, vmax and kmax are exchangeable in a sense of
the point-to-point communications, and the realistic simulation with kmax = 261 is planned on the K computer in 2014.
In order to observe weak scaling, the amount of the point-to-point communications per node was kept constant by keeping
LG À LR unchanged throughout the series of experiments; ðLG ; LR Þ ¼ ð5; 0Þ; ð6; 1Þ; ð7; 2Þ; ð8; 3Þ; ð9; 4Þ; and ð10; 5Þ. The corresponding numbers of nodes are 10, 40, 160, 640, 2560, and 10,240. Each experiment was repeated three times in order to
check ﬂuctuations of the elapsed time. A weak scaling index, aNweak , was deﬁned to be the elapsed time for N/4 nodes divided
by that for N nodes. The amount of data transmitted for each rank was approximately 3.7 MiBytes for each call of
comm_data_transfer() in all the experiments.

6. Results and discussion
6.1. Impact of rank-mapping algorithm
Fig. 7 shows the maximum elapsed time of the point-to-point communications between the MPI ranks in the NICAM communication kernel. For BASIC, aNweak was more than 0.98 for 40, 160, and 640 nodes, about 0.96 for 2560 nodes, and 0.90 for
10,240 nodes. The maximum elapsed time increased by 19% from 10 to 10,240 nodes. For STAG, the maximum elapsed time

370

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

Fig. 9. Same as Fig. 8, but for the theoretical maximum number of hops between four communication links.

and aNweak were similar to those for BASIC. Compared to STAG and BASIC, the maximum elapsed time for STAG-TRIF was signiﬁcantly reduced for 2560 and 10,240 nodes. aNweak was more than 0.99 not only for 160 and 640 nodes, but also for 2560 and
10,240 nodes. Therefore, based on the actual weak scaling, STAG-TRIF is the most scalable rank-mapping algorithm among
the three that we tested. We also run NICAM communication kernel with the north and south poles and conﬁrmed that the
exclusion of the poles has no signiﬁcant impact on the above conclusion (Appendix B).
Fig. 8 shows the elapsed time for each MPI rank when 10,240 nodes were used. Fig. 9 indicates the corresponding theoretical number of hops. The patterns in Fig. 8 resemble those in Fig. 9, for example, the 1024-rank-cycle for BASIC and STAG.
For STAG-TRIF, both the elapsed time and the number of hops show little change with rank. For 0 6 rank < 1024
[ðp; q; rÞ ¼ ðÃ; Ã; 0Þ in Fig. 1; ⁄ stands for any possible index], the elapsed times for rank = 0, 32, 64 . . . [ðp; q; rÞ ¼ ð0; Ã; 0Þ]
are longer than the background times ($9.3 s) for BASIC and STAG. This tends to be more evident as the rank approaches
512 [ðp; q; rÞ ¼ ð0; 2LR À1 ; 0Þ; LR ¼ 5]. In addition, the elapsed times for the ranks between 992 and 1023
[ðp; q; rÞ ¼ ðÃ; 2LR À 1; 0Þ] are also longer than the background times. Such characteristics are commonly seen for 0 6 r < 5.
For 5 6 r < 10, the elapsed times are longer at ðp; q; rÞ ¼ ð2LR À 1; Ã; rÞ and ðÃ; 0; rÞ. Consistently, these ranks with longer
elapsed time theoretically need larger numbers of hops. This indicates the usefulness of the number of hops on 3-D torus
network as a metric of the elapsed time for the K computer.
6.2. Synchronized/asynchronized communication
We further investigated what causes the difference in weak scaling between the STAG-TRIF and the other algorithms for
larger numbers of nodes. The elapsed time corresponds to the number of hops, as mentioned in the previous subsection, and
therefore the number of hops itself may simply affect the elapsed time and weak scaling. At the same time, increases in the
number of hops are often accompanied by greater congestion in communication, and this may also affect the results. To separate the two possible factors, a random sleep time was inserted just before comm_data_transfer() to reduce the probability

371

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

22

1.05

1
18
0.95

16
14

0.9

12

0.85
10
8

Weak Scaling Index

Maximum Elapsed Time [s]

20

BASIC
STAG
STAG-TRIF

BASIC
STAG
STAG-TRIF

0.8

10x1x1

10x2x2

10x4x4

10x8x8

10x16x16

(10)

(40)

(160)

(640)

(2,560)

10x32x32
(10,240)

Node Shape (#node)
Fig. 10. Same as Fig. 7 but for inserting a random sleep time before comm_data_transfer().

of congestion and to isolate the effect of the number of hops. The length of the sleep time was randomly allocated from
between 0 and 0.01 [s] for each MPI rank and each of the 1000 calls to comm_data_transfer(). We also conﬁrmed that
the following conclusion is not affected by setting random sleep time between 0 and 0.1 [s] (not shown).
Fig. 10 shows the results of the random-sleep experiments. The elapsed time was shorter for ten nodes than elsewhere,
since for only ten nodes, the random sleep time did not well cover the interval of 0–0.01 [s]. For 40 nodes or more, the
elapsed time was saturated around 18 [s], and the weak scaling index became almost 1 for 160 nodes or more. Comparison
between BASIC and STAG for the random and no-sleep experiments suggests that the synchronicity of the point-to-point
communications among MPI ranks signiﬁcantly affects the weak scaling. Fig. 10 also shows that the choice of the rank-mapping algorithm does not affect the elapsed time if the timing for the point-to-point communications differs among the MPI
ranks. This indicates that the number of hops itself does not worsen the weak scaling on the K computer. Alternatively, congestion of the communication (generally as a result of a larger number of hops) seems to affect the weak scaling, though to
observe and improve this congestion is beyond the scope of this study.
7. Conclusion
We developed a scalable rank-mapping algorithm, STAG-TRIF, for icosahedral grid system on a supercomputer with the 3D torus network topology. Regardless of the number of nodes, with STAG-TRIF, the maximum number of hops for the pointto-point communications is constant (=2). We conﬁrmed that STAG-TRIF achieves almost perfect weak scaling on the K computer using the NICAM communication kernel, even for 10,240 nodes. The results of additional experiments imply that
STAG-TRIF achieves high scalability by reducing the communication congestion through the links between the adjacent
nodes. When the timings of the communications are delayed randomly among the MPI ranks, in order to reduce the probability of congestion, both STAG-TRIF and the standard algorithms show almost perfect weak scaling.
In principle, STAG-TRIF is applicable to any 3-D or higher-dimensional torus network topology. Such a node network
topology is highly scalable for a massively parallel computer system, such as the exascale computer, which is expected to
appear in the late 2010s. In theory, STAG-TRIF is perfectly scalable, and thus we believe it is useful not only for the K computer but also for other computer systems with a 3-D or higher-dimensional torus network topology. We will conﬁrm this in
a future study on an exascale computer.
Acknowledgements
We would like to express our sincere thanks to J. Ueno at Fujitsu Limited for providing valuable information on the node
interconnections of the K computer. Our thanks also go to the three anonymous reviewers for providing us constructive comments. Part of the ﬁgures in this paper were plotted using Grid Analysis and Display System (GrADS). The elapsed times were
measured on the K computer at the RIKEN Advanced Institute for Computational Science (Proposal number hp120279 and
hp130010). This study is supported by Strategic Programs for Innovative Research (SPIRE) Field 3 (Projection of Planet Earth
Variations for Mitigating Natural Disasters), which is promoted by the Ministry of Education, Culture, Sports, Science and
Technology (MEXT), Japan.
Appendix A. Anisotropic aspect of the 3-D torus network on the K computer
The three directions of the 3-D torus network are anisotropic on the K computer. Such an anisotropic aspect quantitatively affects the impact of the rank-mapping algorithms on the elapsed time of the point-to-point communications.

372

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

1.05

12
1
10

0.95

8
6

0.9

4

Weak Scaling Index

Maximum Elapsed Time [s]

14

0.85
2

BASIC
STAG
STAG-TRIF
BASIC
STAG

STAG-TRIF

0.8

0
8x10x8

16x10x16

8x8x10

16x16x10

(640)

(2,560)

(640)

(2,560)

Node Shape (#node)
Fig. A1. Same as Fig. 7, but for ðN ^ ; N ^ ; N ^ Þ ¼ ð2LR ; 10; 2LR Þ and ð2LR ; 2LR ; 10Þ, where LR = 3 and 4.
X

Y

Z

1.05

12
1
10
0.95

8
6

0.9

4

0.85
2
0

Weak Scaling Index

Maximum Elapsed Time [s]

14

BASIC
STAG
STAG-TRIF

BASIC
STAG
STAG-TRIF

0.8

10x1x1

10x2x2

10x4x4

10x8x8

10x16x16

(10)

(40)

(160)

(640)

(2,560)

10x32x32
(10,240)

Node Shape (#node)
Fig. A2. About the same as Fig. 7 but for including the point-to-point communications with the grid points at the north and south poles. Note that the
measuring conditions are somewhat different between Figs. A2 and 7 (such as a frequency of timers for measurement and number of ensembles as well as
the treatment of the pole grids).

Fig. A1 shows the results for ðN ^ ; N ^ ; N ^ Þ = ð2LR ; 10; 2LR Þ and ð2LR ; 2LR ; 10Þ, where LR = 3 and 4. As in Fig. 7, only STAG-TRIF
X
Y
Z
achieves an almost perfect weak scaling for 2560 nodes. The elapsed times for BASIC and STAG were worse than those
LR
LR
for ðN ^ ; N ^ ; N ^ Þ = ð10; 2 ; 2 Þ. Determining why the quantitative impact of the rank-mapping algorithm differs with rotation
X
Y
Z
of the node is beyond the scope of this study. It will require consideration of the actual 6-D mesh/torus network topology.
Again, this anisotropic aspect does not affect the main conclusions and discussion of this paper.
Appendix B. Point-to-point communications with the pole grids
In this study, the point-to-point communications with the grid points at the north and south poles are not included in the
measurement of the elapsed time (Figs. 7–10 and A1). It is justiﬁed by comparing the results with and without pole grids
(Figs. A2 and 7). Both ﬁgures show that, as number of nodes increases, weak scaling index, aNweak , is decreased for BASIC
and STAG, whereas it remains almost constant for STAG-TRIF. Therefore, the exclusion of the pole grids has no signiﬁcant
impact on the conclusion of this paper.
References
[1] J.L. Kinter, B. Cash, D. Achuthavarier, J. Adams, E. Altshuler, P. Dirmeyer, B. Doty, B. Huang, E.K. Jin, L. Marx, J. Manganello, C. Stan, T. Wakeﬁeld, T.
Palmer, M. Hamrud, T. Jung, M. Miller, P. Towers, N. Wedi, M. Satoh, H. Tomita, C. Kodama, T. Nasuno, K. Oouchi, Y. Yamada, H. Taniguchi, P. Andrews, T.
Baer, M. Ezell, C. Halloy, D. John, B. Loftis, R. Mohr, K. Wong, Revolutionizing climate modeling with project Athena: a multi-institutional, international
collaboration, Bull. Am. Meteorol. Soc. 94 (2013) 231–245, http://dx.doi.org/10.1175/BAMS-D-11-00043.1.
[2] R. Sadourny, A. Arakawa, Y. Mintz, Integration of the nondivergent barotropic vorticity equation with an icosahedral–hexagonal grid for the sphere,
Mon. Weather Rev. 96 (1968) 351–356, http://dx.doi.org/10.1175/1520-0493(1968)096<0351:IOTNBV>2.0.CO;2.
[3] D.L. Williamson, Integration of the barotropic vorticity equation on a spherical geodesic grid, Tellus 20 (1968) 642–653, http://dx.doi.org/10.1111/
j.2153-3490.1968.tb00406.x.
[4] M. Satoh, Atmospheric Circulation Dynamics and General Circulation Models, second ed., Springer-Verlag, 2013.

C. Kodama et al. / Parallel Computing 40 (2014) 362–373

373

[5] L. Thomas, ICOMEX: Icosahedral-grid Models for Exascale Earth System Simulations, <http://www.agence-nationale-recherche.fr/Colloques/G8HORCsworkshop/presentations/03_Session2_G8ExascaleWorkshop_ICOMEX.pdf>, Last access on 16/Jan/2014.
[6] H. Tomita, M. Satoh, A new dynamical framework of nonhydrostatic global model using the icosahedral grid, Fluid Dyn. Res. 34 (2004) 357–400, http://
dx.doi.org/10.1016/j.ﬂuiddyn.2004.03.003.
[7] M. Satoh, T. Matsuno, H. Tomita, H. Miura, T. Nasuno, S. Iga, Nonhydrostatic icosahedral atmospheric model (NICAM) for global cloud resolving
simulations, J. Comput. Phys. 227 (2008) 3486–3514, http://dx.doi.org/10.1016/jjcp.2007.02.006.
[8] A. Gassmann, A global hexagonal C-grid non-hydrostatic dynamical core (ICON-IAP) designed for energetic consistency, Q. J. R. Meteorol. Soc. 139
(2013) 152–175, http://dx.doi.org/10.1002/qj.1960.
[9] W.C. Skamarock, J.B. Klemp, M.G. Duda, L.D. Fowler, S.H. Park, T.D. Ringler, A multiscale nonhydrostatic atmospheric model using centroidal voronoi
tessellations and C-grid staggering, Mon. Weather Rev. 140 (2012) 3090–3105, http://dx.doi.org/10.1175/MWR-D-11-00215.1.
[10] Top500 Supercomputer sites, <http://www.top500.org/lists/2013/11/>, Last access on 17/Jan/2014.
[11] M. Yokokawa, F. Shoji, A. Uno, M. Kurokawa, T. Watanabe, The K computer: Japanese next-generation supercomputer development project, in: 2011
International Symposium on Low Power Electronics and Design (ISLPED), 2011, pp. 371–372. http://dx.doi.org/10.1109/ISLPED.2011.5993668.
[12] H. Miyazaki, Y. Kusano, H. Okano, T. Nakada, K. Seki, T. Shimizu, N. Shinjo, F. Shoji, A. Uno, M. Kurokawa, K computer: 8.162 PetaFLOPS massively
parallel scalar supercomputer built with over 548k cores, in: 2012 IEEE International Solid-State Circuits Conference Digest of Technical Papers (ISSCC),
2012, 192–194. http://dx.doi.org/10.1109/ISSCC.2012.6176971.
[13] S.H. Bokhari, On the mapping problem, IEEE Trans. Comput. 30 (1981) 207–214.
[14] S. Matic, Emulation of hypercube architecture on nearest-neighbor mesh-connected processing elements, IEEE Trans. Comput. 39 (1990) 698–700,
http://dx.doi.org/10.1109/12.53582.
[15] A. Gonzalez, M. Valerogarcia, L.D. Decerio, Executing algorithms with hypercube topology on torus multicomputers, IEEE Trans. Parallel Distrib. Syst. 6
(1995) 803–814, http://dx.doi.org/10.1109/71.406957.
[16] W.J. Gutjahr, M. Hitz, T.A. Mueck, Task assignment in Cayley interconnection topologies, Parallel Comput. 23 (1997) 1429–1460, http://dx.doi.org/
10.1016/S0167-8191(97)89285-X.
[17] J. Seo, H. Lee, M. Jang, E. Kim, Node mapping algorithm between hypercube and Petersen-torus networks, in: 2008 Fourth International Conference on
Networked Computing and Advanced Information Management, NCM ’08, vol. 1, 2008, pp. 535–539. http://dx.doi.org/10.1109/NCM.2008.49.
[18] J. Seo, H. Lee, M. Jang, E. Kim, Node mapping algorithm between torus and Petersen-torus networks, in: 2008 Fourth International Conference on
Networked Computing and Advanced Information Management, NCM ’08, vol. 1, 2008, pp. 540–544. http://dx.doi.org/10.1109/NCM.2008.50.
[19] A. Bhatele, R.G. Gupta, L.V. Kale, I.-H. Chung, Automated mapping of regular communication graphs on mesh interconnects, in: 2010 International
Conference on High Performance Computing (HiPC), 2010, pp. 1–10. http://dx.doi.org/10.1109/HIPC.2010.5713190.
[20] A. Bhatele, L.V. Kale, Heuristic-based techniques for mapping irregular communication graphs to mesh topologies, in: 2011 IEEE 13th International
Conference on High Performance Computing and Communications (HPCC), 2011, pp. 765–771. http://dx.doi.org/10.1109/HPCC.2011.109.
[21] P. Malakar, T. Georgez, S. Kumarx, R. Mittalz, V. Natarajan, Y. Sabharwalz, V. Saxenaz, S.S. Vadhiyary, A divide and conquer strategy for scaling weather
simulations with multiple regions of interest, in: 2012 International Conference for High Performance Computing, Networking, Storage and Analysis
(SC), 2012, pp. 1–11. http://dx.doi.org/10.1109/SC.2012.4.
[22] E.M. Loiola, N.M.M. de Abreu, P.O. Boaventura-Netto, P. Hahn, T. Querido, A survey for the quadratic assignment problem, Eur. J. Oper. Res. 176 (2007)
657–690, http://dx.doi.org/10.1016/j.ejor.2005.09.032.
[23] T. Hoeﬂer, T. Schneider, A. Lumsdaine, Optimized routing for large-scale inﬁniband networks, in: 2009 17th IEEE Symposium on High Performance
Interconnects, HOTI 2009, 2009, pp. 103–111. http://dx.doi.org/10.1109/HOTI.2009.9.
[24] J. Kim, I.L. Evanston, W.J. Dally, S. Scott, D. Abts, Technology-driven, highly-scalable dragonﬂy topology, in: 2008 35th International Symposium on
Computer Architecture, ISCA ‘08, 2008, pp. 77–88. http://dx.doi.org/10.1109/ISCA.2008.19.
[25] B. Arimilli, R. Arimilli, V. Chung, S. Clark, W. Denzel, B. Drerup, T. Hoeﬂer, J. Joyner, J. Lewis, J. Li, N. Ni, R. Rajamony, The PERCS high-performance
interconnect, in: 2010 IEEE 18th Annual Symposium on High Performance Interconnects (HOTI), 2010, pp. 75–82. http://dx.doi.org/10.1109/
HOTI.2010.16.
[26] A. Bhatele, N. Jain, W.D. Gropp, L.V. Kale, Avoiding hot-spots on two-level direct networks, in: 2011 International Conference for High Performance
Computing, Networking, Storage and Analysis (SC), 2011, pp. 1–11.
[27] Y. Miura, M. Kaneko, M.M. Haﬁzur Rahman, S. Watanabe, Adaptive routing algorithms and implementation for TESH network, Commun. Network 5
(2013) 34–49, http://dx.doi.org/10.4236/cn.2013.51004.
[28] H. Miura, M. Satoh, T. Nasuno, A.T. Noda, K. Oouchi, A Madden–Julian oscillation event realistically simulated by a global cloud-resolving model,
Science 318 (2007) 1763–1765, http://dx.doi.org/10.1126/science.1148443.
[29] Y. Miyamoto, Y. Kajikawa, R. Yoshida, T. Yamaura, H. Yashiro, H. Tomita, Deep moist atmospheric convection in a subkilometer global simulation,
Geophys. Res. Lett. 40 (2013) 4922–4926, http://dx.doi.org/10.1002/grl.50944.
[30] H. Tomita, M. Tsugawa, M. Satoh, K. Goto, Shallow water model on a modiﬁed icosahedral geodesic grid by using spring dynamics, J. Comput. Phys. 174
(2001) 579–613, http://dx.doi.org/10.1006/jcph.2001.6897.
[31] Y. Ajima, S. Sumimoto, T. Shimizu, Tofu: a 6D mesh/torus interconnect for exascale computers, IEEE Comput. 42 (11) (2009) 36–40, http://dx.doi.org/
10.1109/MC.2009.370.
[32] Y. Ajima, Takagi, T. Inoue, S. Hiramoto, T. Shimizu, The tofu interconnect, in: 2011 IEEE 19th Annual Symposium on High Performance Interconnects
(HOTI), 2011, pp. 87–94. http://dx.doi.org/10.1109/HOTI.2011.21.
[33] Y. Ajima, T. Inoue, S. Hiramoto, T. Shimizu, Tofu: interconnect for the K computer, Fujitsu Sci. Tech. J. 48 (3) (2012) 280–285.

