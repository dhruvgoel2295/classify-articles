j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

Available online at www.sciencedirect.com

ScienceDirect
journal homepage: www.elsevier.com/locate/jisa

An Enhanced and Secured RSA Key Generation
Scheme (ESRKGS)
M. Thangavel*, P. Varalakshmi, Mukund Murrali, K. Nithya
Department of Information Technology, MIT Campus, Anna University, Chromepet, Chennai, 600044, Tamilnadu,
India

article info

abstract

Article history:

Public-key cryptography can be claimed as the greatest and an excellent revolution in the

Available online 6 November 2014

field of cryptography. A public-key cryptosystem is used for both confidentiality and
authentication. One such public-key cryptosystem is the RSA cryptosystem. In this paper,

Keywords:

a modified and an enhanced scheme based on RSA public-key cryptosystem is developed.

Cryptosystem

The proposed algorithm makes use of four large prime numbers which increases the

RSA algorithm

complexity of the system as compared to traditional RSA algorithm which is based on

Public key

only two large prime numbers. In the proposed Enhanced and Secured RSA Key Gener-

Private key

ation Scheme (ESRKGS), the public component n is the product of two large prime

Encryption

numbers but the values of Encryption (E) and Decryption (D) keys are based on the

Decryption

product of four large prime numbers (N) making the system highly secured. With the
existing factorization techniques, it is possible only to find the primes p and q. The
knowledge of n alone is not sufficient to find E and D as they are based on N. The time
required for cryptanalysis of ESRKGS is higher than traditional RSA cryptosystem. Thus
the system is highly secure and not easily breakable. A comparison is done between the
traditional RSA scheme, a recent RSA modified scheme and our scheme to show that the
proposed technique is efficient.
© 2014 Elsevier Ltd. All rights reserved.

1.

Introduction

Security is the concept of keeping information secret by protecting it from unauthorized users. In order to keep a data
secured it must be hidden from unauthorized access (confidentiality), prevented from modifications (integrity) and

* Corresponding author.
E-mail address: thangavelmuruganme@gmail.com (M. Thangavel).
http://dx.doi.org/10.1016/j.jisa.2014.10.004
2214-2126/© 2014 Elsevier Ltd. All rights reserved.

available to authorized persons when needed (availability).
Confidentiality, integrity and availability are thus, the three
security goals (Forouzan, 2007, ). Security goals can be implemented using several techniques among which cryptography
is the most general and widely prevalent one. Cryptography is
a term of Greek origin meaning secret writing. In earlier days,

4

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

cryptography referred only to the process of encryption and
decryption, but today cryptography involves more complex
processes and procedures.
Any cryptographic system is usually characterized by three
main dimensions, viz., the operations involved in the transformation of plain text to cipher text, the number of secret
keys used and the method of processing the plain text
(Stallings, 2011). Based on this, there are two broad classifications of cryptosystems. One is the symmetric-key cryptosystem (or shared-key cryptosystem) and the other is the
asymmetric-key cryptosystem (or public-key cryptosystem).
In symmetric key cryptosystem, encryption and decryption
are done using the same key whereas in a public-key cryptosystem, encryption and decryption are done using two
different keys. Among the two keys, one key is private and the
other is public. Generally encryption is done using public key
and decryption is done using private key but some schemes do
the vice versa. In public-key cryptosystems, finding the private key from the public key is computationally infeasible. A
public-key cryptosystem has six components e 1) Plain text; 2)
Encryption algorithm; 3) Public Key; 4) Private Key; 5)
Decryption algorithm; 6) Cipher text. The entire cryptosystem
evolves around these key components. Public-key cryptosystems can be used for encryption/decryption, to create digital
signatures and for key exchange. Among the public-key
cryptosystems, the most popular one is the RSA cryptosystem developed by Rivest et al. (1978) at MIT. The RSA algorithm
can be described as follows.
ALGORITHM 1.1. RSA ALGORITHM

To strengthen the security, RSA algorithms based on more
than two prime numbers can be seen in the works of Al-Hamami
and Aldariseh (2012) and Ivy et al. (2012) but the drawback with
both approaches is that the original message can be easily obtained by the knowledge of the public key transmitted as no
complexity is involved in encryption and decryption. Yet another
variant of RSA algorithm was proposed by Sharma et al. (2011) in
which a modified subset-sum over RSA was used for encryption.
The subset sum problem is a good introduction to the NPcomplete class of problems. This approach was significantly
complex in terms of its operations. So the security level was
higher than the previous approach. However, the method cannot
work efficiently against brute-force attacks as it was based on
factoring. The work by Segar and Vijayaragavan (2013)introduced
a new technology named as “modify trial division technique” to
implement RSA algorithm for large numbers. The work by Minni
et al. (2013) introduced an enhanced RSA algorithm in which the
distribution of n was eliminated from the key so that one cannot
trace back to the factors p and q. A systolic RSA cryptosystem
based on modified Montgomery's algorithm and the Chinese
Remainder Theorem (CRT) technique was developed by Wu et al.
(2001) based on hardware implementations. Another variant of
RSA called the BEAIRSA (Batch Encrypt Assistant Improved RSA)
was developed by Liu et al. (2011) to improve the Batch RSA
decryption performance by transferring some decryption computations to encryption in modular exponentiation. In this paper
the RSA system was divided into four phases: Setup, PercolateUp, Exponentiation-Phase and Percolate-Down. This scheme
speeded up the decryption process. Rama Chandra Rao et al.
(2012) developed a novel modular multiplication algorithm and
its application to RSA Decryption. The basic idea behind the work
was that RSA can be speeded up by using the Chinese Remainder
Theorem (CRT) and using strong prime criterion and thus an

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

efficient modulo n multiplication algorithm was introduced. A
new algorithm (SA_RSA) which presented design of JordonTotient function and applied them to RSA public-key cryptosystem with one public key and one private key used for development of protocols to provide secured communication was
introduced by Mahajan and Easo (2012). The scheme tells that
increase of key size increases the security of the system.
In this paper, an Enhanced RSA Key Generation Scheme
(ESRKGS) is proposed to reduce the direct attacks possible in
the case of RSA. The scheme is based on four large prime
numbers instead of two. Also, the keys are not directly
dependent on the public key n. Therefore any kind of bruteforce attack is difficult on the proposed method.
The rest of the paper is organized as follows. Section 2 gives an
overview of few recent modified RSA algorithms and the disadvantages in those methods. The proposed algorithm ESRKGS is
explained in detail in Section 3. The mathematical proof of the
proposed method is explained in Section 4. In Section 5, a comparison of performance of the proposed method with other
methods is done to show that the ESRKGS is not easily attacked
by brute-force when compared to other systems. Finally, the
conclusions of the present algorithm are discussed in Section 6.

2.

Related works

Many researchers have given several proposals to modify the
RSA algorithm. Few recent and major modifications proposed
are discussed with the algorithms used in each case.

2.1.
RSA cryptosystem based on ‘n’ prime numbers
(Ivy et al., 2012)
In this work, RSA was modified with the introduction of four
prime numbers. The algorithm is described as follows.
ALGORITHM 2.1. RSA CRYPTOSYSTEM BASED ON ‘N’ PRIME
NUMBERS

5

The encryption and decryption algorithm are similar to
the traditional RSA algorithm. The approach increases the
security level of RSA because the time taken to find four
prime numbers with the knowledge of n is greater than the
time required to find two prime numbers of RSA. The
complexity of the system lies in factoring of the public key
n. With the existing factorization techniques (Ali and
Salami, 2004; Lenstra, 1987), it is possible to factorize n
and subsequently find the private key, making the system
insecure.

2.2.
Encryption and decryption using secure RSA
(Jamgekar and Joshi, 2013)
In this approach, complexity was brought in the computation
of cipher text from plain text. A similar level complexity was
also used in the decryption part. The algorithm can be
described as follows.
ALGORITHM 2.2. ENCRYPTION AND DECRYPTION USING
SECURE RSA

6

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

This approach overcomes the disadvantage of the previous
algorithm. This algorithm also uses four prime numbers and
the key generation phase is similar to RSA. The system is
highly secure because the encryption and decryption are not
only dependent on n but also other new factors computed. The
disadvantage of the algorithm is that the encryption and
decryption computation is very complex. There are several
parameters introduced whose need was not clearly justified. It
thus increases the overhead of the system.

2.3.
2011)

Modified RSA algorithm (Chhabra and Mathur,

3.
The approach eliminated the need to transfer n. So it becomes
difficult for the hackers to derive at the prime numbers used.
The algorithm can be described as follows. The disadvantage
of the system is that the attacker can easily attack the system
with the value ofkp and d known.
ALGORITHM 2.3. MODIFIED RSA ALGORITHM

Proposed model

The proposed ESRKGS scheme focuses on removing the
major issues of above discussed RSA systems. Most RSA
systems are easily breakable because the computation of
keys is based on n. This n can be easily found by factoring
methods (Ali and Salami, 2004; Lenstra, 1987)because it is
only a product of 2 primes. If this n is obtained, the hacker
can easily find the keys and thus break the system. The
major modifications which make the proposed system an
efficient RSA algorithm are discussed in the following
sections.

3.1.

ESRKGS key generation

The proposed ESRKGS key generation involves the usage of
four prime numbers. The value of E, D depends on the value
of N, which is the product of 4 prime numbers. The computation of E is also not direct. The values e1, e2 are needed to
find the value of E1 thus increasing the time taken to attack
the system. Only the value of n is kept as public and private
component. Thus the attacker with the knowledge of n
cannot determine all the primes which are the basis for
finding the value of N and subsequently D. The parameter E1
also increases the complexity of the system. For security
purposes, the bit length of all the primes chosen is of same
length as in case of traditional RSA. The algorithm is presented below.

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

7

ALGORITHM 3.1. ESRKGS KEY GENERATION

Let us discuss an example problem using the proposed
ESRKGS algorithm.
ESRKGS-EXAMPLE.

3.2.

ESRKGS encryption and decryption

The encryption is done with the help of the public components and decryption is done with the help of the private
components. The encryption and decryption are based on n
but the computation of keys is not based on n but on N. This
makes the system secure and not easily breakable. The algorithm is presented below.
ALGORITHM 3.2. ESRKGS ENCRYPTION & DECRYPTION

8

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

Table 1 e Performance of ESRKGS.
Length of p, q,
r and s (in bits)
100
128
256
512
1024
2048
4096

4.

Key generation
time (in ms)

Encryption
time (in ms)

Decryption time
(in ms)

Total execution
time (in ms)

113
165
237
389
1168
11,164
181,811

1.5
2
3
16
105
784
6620

1.3
2
2
16
106
745
6647

115.8
169
242
421
1379
12,693
195,078

Mathematical proof of ESRKGS

(By Fermat's Little Theorem {Ribenboim, 1995}MpÀ1 ≡1 mod p)
À
Á
¼ M*1kðqÀ1ÞðrÀ1ÞðsÀ1Þ*E1 mod n ¼ Mmod n ¼ M Since M < n

The proposed ESRKGS algorithm is proved mathematically in
the following way.
The Cipher text is found using,
C ¼ ME mod n

(1)

and the plain text can be obtained by decryption of the Cipher
text using
P ¼ CD mod n

(2)

The aim now is to get back the original message M
fromCD mod n.
CD mod n ¼ MED mod n

(3)

From Algorithm 3.1,
À
Á
D)EÀ1 mod FðNÞ*E1 :

5.

For simulation purpose, ESRKGS is implemented using Java
BigInteger library functions (Wagner, 2003). The user is
allowed to enter the prime numbers or specify the bit length of
the prime numbers to generate automatically using random
function. BigInteger library provides operations for modular
arithmetic, GCD calculation, primarily testing, prime generation, bit manipulation, and a few other miscellaneous operations. The implementation of the algorithm, is implemented
in JAVA, running on a 2.50 GHz Intel ® Core ™ i5-3120M Processor and 8 GB RAM.

5.1.

Hence,
ED ¼ 1$mod ðFðNÞ*E1 Þ ¼ 1$mod ððp À 1Þðq À 1Þðr À 1Þðs À 1Þ*E1 Þ
¼ 1 þ kððp À 1Þðq À 1Þðr À 1Þðs À 1Þ*E1 Þ
(4)
(k is any positive integer)
Substituting (4) in (3)
CD mod n ¼ M1þkððpÀ1ÞðqÀ1ÞðrÀ1ÞðsÀ1Þ*E1 Þ mod n


¼ M*MkððpÀ1ÞðqÀ1ÞðrÀ1ÞðsÀ1Þ*E1 Þ mod n
À
ÁkðqÀ1ÞðrÀ1ÞðsÀ1Þ*E1
¼ M* MðpÀ1Þ
mod p*q
À ðpÀ1Þ ÁkðqÀ1ÞðrÀ1ÞðsÀ1Þ*E1
mod p*q
¼ M* M
¼ M*MðpÀ1ÞkðqÀ1ÞðrÀ1ÞðsÀ1Þ*E1 mod p*q

Implementation and results

Performance analysis

The proposed algorithm ESRKGS was tested on varying bit
sizes of inputs. The performance of the ESRKGS system in
terms of key generation time, encryption time and decryption
time is shown in Table 1.
Also, the performance of RSA algorithm by Rivest et al.
(1978) (denoted as RSA1 henceforth)and RSA by Ivy et al.
(2012) (denoted as RSA2 henceforth) is depicted in Table 2
and Table 3 respectively.
From the above tables, it can be seen that the time for key
generation of ESRKGS is slightly greater than that of RSA1 and
RSA2. The increased key generation time of ESRKGS can be
justified by the fact that the time to break the system is high
because of the complexity introduced. The encryption and

Table 2 e Performance of RSA1.
Length of p, q,
r and s (in bits)
100
128
256
512
1024
2048
4096

Key Generation
Time (in ms)

Encryption Time
(in ms)

Decryption
Time (in ms)

Total Execution
Time (in ms)

72
92
133
352
889
4315
91,542

1
1.1
1
3
21
183
1380

1
1.1
1.1
3
22
169
1381

74
94.2
135.1
358
932
4667
94,303

9

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

Table 3 e Performance of RSA2.
Length of p, q,
r and s (in bits)
100
128
256
512
1024
2048
4096

Key generation
time (in ms)

Encryption time
(in ms)

Decryption time
(in ms)

Total execution
time (in ms)

110
144
216
313
922
7471
93,899

2
2.5
4
21
170
1393
10,907

1.7
2.2
3
23
169
1379
10,957

113.7
148.7
223
357
1261
10,243
115,763

decryption time of all the RSA methods are compared in Figs. 1
and 2. From the graphs it can be seen that, the encryption and
decryption time is higher than RSA1 because of the usage of 4
primes but it is less than RSA2. The increase in time is tolerable because the security is increased to a great extent in the
proposed method. For example, for input primes of bit length
512, the encryption time of ESRKGS is 16 ms whereas for RSA1
it is only 3 ms but for RSA2 it is 21 ms. Similarly the decryption
time for input of 512 bits in all the three cases is almost same
as their respective encryption times.

5.2.

Security analysis

There are various attacks possible on RSA which include the
timing attack as shown in Carl (1996). The time to break an

RSA system is equivalent to the time taken for finding the
prime numbers used. This requires the factorization of the
parameter ‘n’. For this purpose, Elliptic Curve factorization
Method (ECM) (Ali and Salami, 2004) and General Number
Field Sieve (GNFS) (Lenstra, 1987) are used in common. GNFS
and ECM are the first and third fastest known factoring
methods respectively. ECM is commonly used for smaller
number factoring whereas GNFS is capable of factoring integers larger than 100 digits. But in the proposed RSA algorithm (ESRKGS) even though the public key ‘n’ can be factored
using any of the methods, this parameter is not sufficient
enough in the computation of private key D. The above
factoring techniques can be used to find p and q but the other
two primes can be found only using a brute-force. In other
words,
tsystem ¼ tp; q þ tbrute force
where,
tsystem ¼ Time taken to break the system
tp; q ¼ Time taken to find p and q using GNFS or ECM
tbrute force ¼ Time taken for brute-force attack

Fig. 1 e Encryption time comparison.

So, brute-force analysis is employed for this. The time
taken for brute-force attack on ESRKGS, RSA1 and RSA2 is
shown in Table 4. A graph is plotted based on the readings as
shown in Fig. 3. For example, the time needed to find n by
brute-force in the case of ESRKGS for input primes of bit length
12 is 234.95032s whereas in the case of RSA1 and RSA2 it is
only 75.70676086s and 123.498494s respectively.
From the graph, it is clear that the time taken for bruteforce attack on ESRKGS is far higher than that of other RSA
schemes. This is based on the fact that only ‘n’ is known to the
attacker but to find E and D the value of ‘N’ is needed thus
making the system difficult to break.

Table 4 e Brute-force attack time.
Length of p, q,
r and s (in bits)

Fig. 2 e Decryption time comparison.

6
8
10
12
16

Time to find a ‘n’ by Brute-force (in s)
RSA1

RSA2

ESRKGS

1.083344
1.574581
4.047046
75.706760
14,961.466536

2.645654
5.383928
18.146578
123.498494
61,928.389156

7.855621
12.383894
32.492047
234.950321
126,473.290471

10

j o u r n a l o f i n f o r m a t i o n s e c u r i t y a n d a p p l i c a t i o n s 2 0 ( 2 0 1 5 ) 3 e1 0

Fig. 3 e Brute-force time comparison.

6.

Conclusion

In this paper, an enhanced RSA key generation algorithm
called ESRKGS is proposed. The proposed work uses four large
prime numbers instead of two prime numbers thereby
increasing the attacking time needed to find these primes. The
computation of keys E, D depends on the value of N (not n),
which is the product of 4 prime numbers and the computation
of E is also not direct. As a result the key generation time of
ESRKGS is higher than traditional RSA and another compared
RSA. The higher key generation time in turn increases the
time needed to break the system, thereby making the system
strong. The encryption and decryption time of ESRKGS is
higher than RSA but significantly less than the other modified
RSA which used four primes. Thus there is not much overhead
or burden on the system. The performance of the algorithm is
measured in terms of the time taken for brute-force attack.
From the experiments, it is proved that the proposed algorithm is highly secure and not easily breakable as compared to
RSA and the compared modified RSA algorithm.

references

Al-Hamami AH, Aldariseh IA. Enhanced method for RSA
cryptosystem algorithm. In: International Conference on

Advanced Computer Science Applications and Technologies,
Kuala Lumpur; 2012. p. 402e8.
Ali H, Salami MA. Timing attack prospect for RSA cryptanalysts
using genetic algorithm technique. Int Arab J Inf Technol
2004;1(1):80e4.
Carl PA. Tale of two sieves. Notices Amer Math Soc
1996;43(12):1473e85.
Chhabra A, Mathur S. Modified RSA algorithm: a secure approach.
In: International Conference on Computational Intelligence
and Communication Networks, Gwalior; 2011. p. 545e8.
Forouzan BA. Cryptography and network security. Special Indian
Edition. Tata McGraw-Hill; 2007. p. 2e11.
Ivy PU, Mandiwa P, Kumar M. A modified RSA cryptosystem based
on ‘n’ prime numbers. Int J Eng Computer Sci 2012;1(2):63e6.
Jamgekar RS, Joshi GS. File encryption and decryption using
secure RSA. Int J Emerg Sci Eng (IJESE) 2013;1(4):11e4.
Lenstra Jr HW. Factoring integers with elliptic curves. Ann Math
1987;126(3):649e73.
Liu Q, Li Y, Li T, Hao L. The research of the batch RSA decryption
performance. J Comput Inf Syst 2011;7(3):948e55.
Mahajan S, Easo S. Performance evolution of RSA and new
cryptosystem. Int J Emerg Technol Adv Eng 2012;2(3):279e83.
Minni R, Sultania K, Mishra S, Vincent DR. An algorithm to
enhance security in RSA. In: Fourth International Conference
on Computing, Communications and Networking
Technologies (ICCCNT), Tiruchengode; 2013. p. 1e4.
Rama Chandra Rao GAV, Lakshmi PV, Ravi Shankar N. A novel
modular multiplication algorithm and its application to RSA
decryption. Int J of Comput Sci Issues 2012;9(6):303e9.
Ribenboim P. In: The New Book of Prime Number Records. 3rd ed.,
Vol. 49. New York: Springer-Verlag; 1995. p. 22e5.
Rivest RL, Shamir A, Adleman LA. Method for obtaining digital
signatures and public-key cryptosystems. Commun ACM
1978;21(2):120e6.
Segar TC, Vijayaragavan R. Pell's RSA key generation and its
security analysis. In: Fourth International Conference on
Computing, Communications and Networking Technologies
(ICCCNT), Tiruchengode; 2013. p. 1e5.
Sharma S, Sharma P, Dhakar RS. RSA algorithm using modified
subset sum cryptosystem. In: International Conference on
Computer & Communication Technology (ICCCT), Allahabad;
2011. p. 457e61.
Stallings W. Cryptography and network security: principles and
practice. 5th ed. Pearson Education; 2011. p. 121e44. 253e97.
Wagner NR. The Laws of Cryptography with Java Code. Tech Rep
2003:78e112.
Wu CH, Hong JH, Wu CW. RSA cryptosystem design based on the
Chinese remainder theorem. In: Design Automation
Conference, Proceedings of the ASP-DAC, Yokohama; 2001.
p. 391e5.

