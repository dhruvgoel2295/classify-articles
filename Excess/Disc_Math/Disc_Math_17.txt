Discrete Mathematics 311 (2011) 1957–1967

Contents lists available at ScienceDirect

Discrete Mathematics
journal homepage: www.elsevier.com/locate/disc

Max-multiflow/min-multicut for G + H series-parallel
Denis Cornaz
LAMSADE, Université Paris-Dauphine, Place du Maréchal de Lattre de Tassigny, 75775 Paris CEDEX 16, France

article

abstract

info

Article history:
Received 23 September 2010
Received in revised form 18 May 2011
Accepted 20 May 2011
Available online 15 June 2011
Keywords:
Maximum integer multiflow
Minimum multicut
Min-max equality

We give a new characterization of series-parallel graphs which implies that the maximum
integer multiflow is equal to the minimum capacity multicut if G + H is series-parallel,
where G + H denotes the union of the support graph G and the demand graph H.
We investigate the difference between a result of the type ‘‘the cut-condition is
sufficient for the existence of a multiflow in some class’’ and a result of the type ‘‘maxmultiflow = min-multicut for some class’’.
© 2011 Elsevier B.V. All rights reserved.

1. Introduction
Given an undirected graph G = (V , E ) with positive integer edge capacity u ∈ ZE+ and a list s1 t1 , . . . , sk tk of pairs of
distinct vertices, the maximum integer multiflow problem consists in maximizing the total amount of integer flow between
j=k
any pair of vertices of the list subject to capacity constraints. Let P j be the set of sj tj -paths of G and denote the union j=1 P j
of them by P := {p1 , . . . , p|P | }, then it can be formulated as follows:
i=|P |

max

−

fi

(1)

i=1

−

f i ≤ ue

for all e ∈ E ,

(2)

i s.t. path pi ∋e

for i = 1, . . . , |P |,

(3)

fi ∈ Z for i = 1, . . . , |P |.

(4)

fi ≥ 0

A multicut separating each pair sj tj is a subset of edges the removing
∑ of which destroy any path linking the vertices sj and tj
for j = 1, . . . , k. The capacity of a multicut D is the sum u(D) :=
e∈D ue of the capacities of its edges. The minimum multicut
problem is to find a minimum capacity multicut separating each pair sj tj . It can be formulated as:
min

−

ue ce

(5)

e∈E

−

ce ≥ 1

for i = 1, . . . , |P |,

e s.t. e∈path pi

E-mail address: cornaz@lamsade.dauphine.fr.
0012-365X/$ – see front matter © 2011 Elsevier B.V. All rights reserved.
doi:10.1016/j.disc.2011.05.025

(6)

1958

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

ce ≥ 0

for all e ∈ E ,

ce ∈ {0, 1}

for all e ∈ E .

(7)
(8)

By the duality theorem, the linear program (1)–(3) has the same optimum as the linear program (5)–(7) and by the
max-flow/min-cut theorem, the integer programs (1)–(8) have the same optimum when there is only one pair in the list
(that is k = 1) [12]. But in general both problems are NP-hard, even if G is a (undirected) tree [14]. The graph H = (V , R)
where R is the set of the pairs sj tj is called the demand graph and then the graph G is called the support graph. If G is inner
Eulerian and if H is bi-stable, then max-multiflow = min-multicut, that is (1)–(8) are equal, see [13]. (In particular, the
complete graph and 2K2 are bi-stable.) Bentz et al. [5] proved that if G is a rectilinear grid with uniform capacities, then,
except for some very special cases, max-multiflow = min-multicut. Let G + H = (V , E ∪ R) denote the union of G and H.
(Notice that G + H may have parallel edges so E ∩ R = ∅). The maximum integer multiflow problem remains NP-hard if
G + H is planar [18]. The minimum multicut problem is tractable if G + H has bounded tree width [15], in particular, if
G + H is series–parallel, that is, it can be constructed by starting with a forest, adding loops, and repeatedly replacing edges
by parallel edges or by edges in series (series–parallel graphs are graphs with tree-width 2). Lomonosov [17] proved that if
|R| = 2 and if G + H is planar and not Z -special, then max-multiflow = min-multicut. For a survey, see [21,7,4].
The integer multiflow feasibility problem is, given an additional list d1 , . . . , dk of positive integers, to decide if an integer
multiflow exists, that is, if the system (2)–(4) together with (9) is empty or not.

−

fi ≥ dj

for j = 1, . . . , k.

(9)

i s.t. path pi ∈P j

(Note that it can be formulated as a maximum integer multiflow problem by adding some edges with capacity uj = dj ). The
integer multiflow feasibility problem is NP-complete even if G is series–parallel [20]. It is tractable if G + H has bounded
tree-width [28]. Sebő [22] showed that if G + H is planar and if |R| is bounded, then the problem is solvable in polynomial
time. A multicut of a graph is the subset δ(V1 , . . . , Vk ) of all edges between distinct vertex-subsets of some partition
V1 , . . . , Vk of its vertex-set, and if the partition has at most two vertex-subsets, the multicut δ(V1 , V \ V1 ) is also called
a cut denoted by δ(V1 ). A necessary condition for the existence of a multiflow is the so-called cut-condition that, for any cut
D of G + H, the sum of the capacities ue over all e ∈ D \ R is greater than or equal to the sum of the dj over all sj tj ∈ D ∩ R.
Checking the cut-condition is NP-complete [1]. There are several necessary conditions for the existence of a multiflow and
several characterizations for some of these conditions to be sufficient. The cut-condition is sufficient for the existence of an
integer multiflow if G + H has no odd-K4 minor where R is the set of the signed edges [23], or for the larger class of G + H
without odd-K5 minor, which contains that of G + H planar, if moreover the Euler condition holds [25], see also [21, p. 1342].
For a survey, see [21, p. 1234] and [19].
Given integer weight∑
w ∈ ZE on the edges of a graph G, where a weight may be negative, the weight of a cut or multicut
D is the sum w(D) :=
e∈D we of the weights of its edges. The maximum cut problem in (G, w) is to find the maximum
weight of a cut of G. The problem is NP-hard even if G has no minor K6 and polynomial if it has no minor K5 [2], furthermore
a linear description of the cut polytope is known for these graphs [3]. The maximum multicut problem in (G, w) is to find the
maximum weight of a multicut of G. The problem is NP-hard in general and a linear description of the multicut polytope is
known if G is series–parallel (or equivalently G has no minor K4 ) [6]. So there is a (non combinatorial) polynomial algorithm
for these graphs. Seymour established a min–max formula for the chromatic index of series–parallel graphs [26]. Facets of
the multicut polytope are given in [16,27]. See also [21,8].
This paper is motivated by finding a class of (planar) G + H for which max-multiflow = min-multicut, and by the following
question: Is it possible to transform a result of the type ‘‘the cut-condition is sufficient for the existence of a multiflow in
some class’’ into a result of the type ‘‘max-multiflow = min-multicut for some class?’’
In this paper we introduce the minimum multiflow loss problem which is, given a weighted graph (G, w) with w ∈ ZE ,
to find the minimum amount of demand whose removal ensures the existence of an integer multiflow. It generalizes the
maximum integer multiflow problem since w can be chosen so as to represent infinite amounts of demand with capacity
constraints; minimizing the demand loss is then equivalent to maximizing the multiflow. (A formal definition is given later
and actually both problems are equivalent). We prove that it has the same optimum than the maximum multicut problem,
for any weight w ∈ ZE , if and only if G is series–parallel. It implies that max-multiflow = min-multicut holds for G + H
series–parallel.
The paper is organized as follows. In Section 2, we give definitions and basic results needed in the paper. In Section 3,
we prove the characterization of series–parallel graphs involving the minimum multiflow loss and the maximum multicut
problems. Actually, we also show that it implies a similar characterization involving the minimum cut-condition problem
(defined later) which is an optimization version of checking the cut-condition. In Section 4, we derive consequences
concerning a new characterization of series–parallel graphs and TDIness (defined in Section 4). In Section 5, we derive
consequences concerning a new characterization of series–parallel graphs and packing and covering. We also show some
difficulties for translating a result of the type ‘‘the cut-condition is sufficient for the existence of a multiflow in some class’’
into a relation of the type ‘‘max-multiflow = min-multicut for this class’’.

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

1959

2. Preliminaries
2.1. Basics
First we recall that a nonempty inclusionwise minimal cut is called a bond and a circuit is a nonempty subset

{e1 , e2 , . . . , ek } of edges such that there exist k distinct vertices v1 , v2 , . . . , vk and ei = vi vi+1 (with vk+1 = v1 ).

Both sets of circuits and of bonds of G satisfy the (matroid) exchange property, that is, if two circuits (bonds, respectively)
intersects properly, one can find a third circuit (bond, respectively) excluding an edge of the intersection and including an
edge outside the intersection. Formally:

∀C1 , C2 ∈ C , ∀e ∈ C1 ∩ C2 , ∀f ∈ C1 \ C2 , then ∃C ∈ C : f ∈ C ⊆ (C1 ∪ C2 ) \ {e},

(10)

where C either denotes the set of all circuits or the set of all bonds of G.
Let C denote the set of all circuits, and D denotes the set of all bonds of G. An edge e is called a loop (bridge, resp.) if {e} is
a circuit (bond, resp.). Two edges e, f are said to be parallel (in series, resp.) if {e, f } is a circuit (bond, resp.). So two edges are
parallel if they share the same distinct endpoints. A particular case of edges in series arises with two edges incident with a
degree 2 vertex, the reader may assume that two edges in series are always adjacent if he is accustomed with this definition,
but it is optional. What matters is that two edges in series belong to the same circuits (and that two parallel edges belong
to the same bonds). Deleting an edge e means replacing E with E \ {e} and contracting e means to delete e and to identify its
vertices. Deleting e replaces C with {C ∈ C : e ̸∈ C } and contracting e replaces C with {C ∈ C : e ̸∈ C } ∪ {∅ ̸= P ⊆ E :
P ∪ {e} ∈ C }. On the contrary, deleting e replaces D with {D ∈ D : e ̸∈ D} ∪ {∅ ̸= P ⊆ E : P ∪ {e} ∈ D } and contracting e
replaces D with {D ∈ D : e ̸∈ D}. A minor of a graph G is a graph obtained from G by a series of deletions and contractions.
Let Kn be the complete graph on n vertices. Recall that [9]
G is series–parallel if and only if it has no minor K4 .

(11)

It follows that series–parallelism is closed under taking minor. Recall also that [9]
if G is series–parallel, then it has either a circuit or a bond of size ≤ 2.

(12)

2.2. Notation and preliminary results
Let G = (V , E ) be an undirected graph and w ∈ ZE an integer weight vector. The optimum of the maximum multicut
problem is denoted by max-multicut(G, w). We define a multiflow problem in such a way that the input is also the weighted
graph (G, w):

• Let R ⊆ E be the set of all edges of G with positive weight, then an edge e ∈ R is called a demand of (G, w) and we is the
amount of demand of e ∈ R;
• An edge f with negative weight is called a link of (G, w) and |wf | is the capacity of f ∈ E \ R;
• A flow in (G, w) is a circuit C ⊆ E with |C ∩ R| = 1;
• Denoting by F the set of all flows of (G, w), a multiflow in (G, w) is a nonnegative integer vector y ∈ ZF satisfying
(13)–(14):

−

yC ≥ we

for e ∈ R,

(13)

C ∈F :C ∋e

−

yC ≤ −wf

for f ∈ E \ R.

(14)

C ∈F :C ∋f

By removing one unit of demand we mean reset we := we − 1 for some e ∈ R and eventually delete e if then we = 0. The
minimum multiflow-loss problem in (G, w) is to find the minimum number of units of demand
∑ the removal of which makes a
multiflow exist; denote it by min-mflowloss(G, w). It can be formulated as minimizing e∈R le over all nonnegative integer
vectors l ∈ ZR satisfying (14)–(15) for some nonnegative integer vector y ∈ ZF :

−

yC ≥ we − le

for e ∈ R.

(15)

C ∈F :C ∋e

Since demands have positive weights and links have negative weights, the cut-condition in (G, w) is that no cut of G has a
positive weight. One associates a minimization problem with the cut-condition, namely the minimum cut-condition problem
in (G, w) which is to find the minimum number of units of demands the removal of which satisfies the cut-condition. We
write min-cutcond(G, w) for the optimum of this problem.
Recall that:

|C ∩ D| is even for any circuit C and any bond D, and
D is a multicut if and only if |C ∩ D| ̸= 1 for any circuit C .

(16)
(17)

1960

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

Necessity in (17) follows directly from (16). To see sufficiency in (17), remove the edges in D and assume for contradiction
that D is not the set of all edges of G between the different subsets of the partition of V induced by the connected components
of the graph G\D that we have obtained. So, there is an edge e ∈ D and a path P of G\D linking the vertices of e. Yet C = P ∪{e},
is a circuit of G such that |C ∩ D| = 1.
Notice that:
D is a multicut if and only if it is the union of cuts.

(18)

Indeed, necessity in (18) is straightforward. Sufficiency follows from (16) together with (17). Remark also that (since ∅ is a
multicut with weight 0):
max-multicut(G, w) = 0

if and only if min-cutcond(G, w) = 0.

Necessity is straightforward since a cut is a multicut. Sufficiency follows from the fact that w(δ(V1 , . . . , Vk ))
∑i=k
1/2 i=1 w(δ(Vi )). Notice also that the necessity of the cut-condition is:
min-mflowloss(G, w) = 0

only if min-cutcond(G, w) = 0.

(19)

=
(20)

We are now ready for the rest of the paper.
3. Multiflow loss, cut-condition and multicut
This section is devoted to the min–max relation.
We first note that for every graph G = (V , E ) and for every w ∈ ZE then:
max-multicut(G, w) ≤ min-cutcond(G, w) ≤ min-mflowloss(G, w).

(21)

The first inequality in (21) follows from (19). The second inequality in (21) follows from (20). Note that if the cut-condition
is sufficient for some class of (G, w) and if this class is closed under the removing of demands then the second inequality in
(21) holds with equality for this class. This is not the case for Eulericity but this the case for the class of (G, w) with no minor
odd-K4 (taking R as a signing for G) which contains series–parallel graphs. However, it may be that the second equality holds
but not the first, for instance:
Example 1. If G is a K4 with we = +1 for the three edges of a triangle and we = −1 for the other edges, then
max-multicut(G, w) = 1 < 2 = min-cutcond(G, w) = min-mflowloss(G, w). (See the graph on the left in Fig. 1).
The contrary may also happen:
Example 2. If G is a K4 with we = +1 for two disjoint edges and we = −1 for the four other edges, then max-multicut
(G, w) = min-cutcond(G, w) = 0 < 1 = min-mflowloss(G, w). (See the graph on the right in Fig. 1).
The theorem below addresses the two possible min–max equalities.
Theorem 3.1. The following propositions are equivalent:
(i) min-mflowloss(G, w) = max-multicut(G, w), for every w ∈ ZE ;
(ii) min-cutcond(G, w) = max-multicut(G, w), for every w ∈ ZE ;
(iii) G is series–parallel.
The proof is based on the following reduction algorithm:
Reduction Algorithm
IN: A graph G with integer edge weight w .
˜ of G with integer edge weight w
OUT: A minor G
˜ , and an integer β such that

˜ , w)
min-mflowloss(G, w) = min-mflowloss(G
˜ + β,

and

˜ , w)
max-multicut(G, w) = max-multicut(G
˜ + β.

(22)
(23)

First we set β ← 0, then we do the reduction operations (described below) until none of them can be proceeded with.
˜ with its new weights and the new (increased) value of β .
We return the reduced graph G
Reduction operations

(A1 ) If we find an edge with weight 0, we delete it;
(A2 ) If we find an edge with weight −∞, we contract it; (by −∞ we mean less than the negative sum of the positive weights
of the current graph)

(B1 ) If we find a loop, we delete it;
(B2 ) If we find a bridge e, we delete it and we do β ← β + max{0, we };

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

1961

Fig. 1. Two graphs with edge weights in {−1, +1} (bold edges are those with weight +1) for which one inequality, but not the other, holds with equality
in (21).

(C1 ) If we find two parallel edges e, f , we delete f and we do we ← we + wf ;
(C2 ) If we find two edges e, f in series, we do:
(C2a ) If we , wf > 0, we delete e and f , and we do β ← β + we + wf ;
(C2b ) If we , wf < 0, we contract f and we do we ← max{we , wf };
(C2c ) If we > 0 and wf < 0, we contract f and we do β ← β + max{0, we + wf }, and we do we ← min{we , | wf |}.
Assuming that the reduction algorithm is valid (which is ensured by Propositions 3.2 and 3.3), the proof is easy:
Proof of Theorem 3.1. (i) ⇒ (ii): It follows directly from (21).
(ii) ⇒ (iii): If G is not series–parallel, by (11) we can assume that the reduced graph G˜ is a K4 . Indeed, we only have to
give the weight 0 for each edge that needs to be deleted, the weight −∞ for each edge that needs to be contracted, and any
different weight for the six remaining edges. Thus, we can assume that we are in the case of Example 1.
(iii) ⇒ (i): If G is series–parallel, it follows by (12) that the reduced graph G˜ has no edge. Consequently,
˜ , w)
max-multicut(G
˜ = 0 = min-mflowloss(G˜ , w)
˜ ; and then max-multicut(G, w) = β = min-mflowloss(G, w).
We only need now to check the validity of the algorithm. For simplicity in the proofs below, we assume that the reduction
operations are done in the order we presented them.

˜ , w,
Proposition 3.2. For any input (G, w) of the reduction algorithm and its output (G
˜ β), then (22) holds.
˜ = G and β = 0. We show that (22) is closed under any reduction, that is, that (22) is
Proof. Initially (22) is true, since G
˜
true when (G, β) is obtained by one reduction operation of some edge e, where the operation and the edge e are chosen
arbitrarily.
If we = 0 for the edge e, then e is a link without capacity, and then we can remove from F the circuits containing e, that
is, we can delete e. If we = −∞ the capacity is infinite on e, and then we can replace each circuit C containing e by C \ {e};
we can contract e. Hence (22) is closed under (A1 ) and (A2 ). We assume in the following that no edge has weight 0. A loop
e is either a useless link, or a demand that can always be routed on the circuit {e}; hence e creates no multiflow loss and we
can delete it, that is doing (B1 ). Since no circuit contains a bridge, a bridge is either a useless link, or a lost demand; we can
do (B2 ). Let e and f be two parallel edges, thus if C is a circuit containing f and not e, then by (10) C \ {f } ∪ {e} is a circuit. If
e and f have the same sign, (C1 ) preserves (22). Indeed, {e, f } ̸∈ F , then removing the circuits containing f preserves (22) if
the demand (or the capacity) of e becomes the sum of the demands (or of the capacities) of e and f . If e and f have different
signs, say wf < 0, then {e, f } ∈ F . Since the flows play a symmetric role in the objective function, by (10) we can always
suppose that the maximum possible amount of the demand e is routed on the circuit {e, f }. Thus if f is saturated by flow,
we can delete f and decrease the demand of e by |wf |. Otherwise, the demand of e is satisfied, and then we can delete e and
decrease the capacity of f by |we |. Hence (22) is closed under (C1 ).
Now we let e and f be two edges in series. We have that (C2a ) and (C2b ) preserve (22). Indeed, if we , wf > 0, then both
demands e and f are lost, and if we , wf < 0, we can replace every circuit C containing e and f by C \ {f } if the capacity
of e becomes min{|we |, |wf |}. Assume now that we > 0 and wf < 0. If we < |wf |, then we can do (C2c ). Indeed we have
we + wf ≤ 0 and furthermore we can contract f since f will never be saturated. Finally (22) is closed under (C2c ) since if
we ≥ |wf |, the maximum amount of the demand e that can be achieved is |wf |. Hence we must accept losing the amount
we − |wf | = we + wf of demand, and then we can contract f .
˜ , w,
Proposition 3.3. For any input (G, w) of the reduction algorithm and its output (G
˜ β), then (23) holds.
Proof. It is easily seen that (A1 ), (A2 ) and (B1 ) preserve (23). We can suppose now that no edge of G has weight 0, and we
show that (23) still holds after any other reduction operation of an edge e. Let e be a bridge. If we > 0, then e belongs to
all maximum multicuts of G, and if we ≤ 0, there are maximum multicuts without e; it follows that (B2 ) preserves (23).
Obviously (23) is closed under (C1 ).
Now we can suppose that e and f are two edges in series, that is {e, f } is a bond. By (18) if we and wf are positive, then
e and f belong to every maximum multicut. Hence we can delete e and f if we increase β by we + wf ; then (23) is closed

1962

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

under (C2a ). We can suppose now that wf < 0. Note that since {e, f } is a bond, by (10), if D is a bond containing f and not e
then D \ {f } ∪ {e} is a bond. Consequently, if we ≥ wf and if the weight of the bond {e, f } is not positive, then we can remove
all bonds D containing f . Hence doing (C2b ) preserves (23). Moreover, providing that we + wf ≤ 0, we can do (C2c ) (indeed
since we have we ≤ |wf |). Finally we can assume that we > 0, wf < 0, and we + wf > 0 (and so |wf | < we ). By (18), e
belongs to every maximum multicut. The weight contribution of both edges e and f to a maximum multicut is either we or
(at least) we − |wf |; furthermore it is we if and only if there is a maximum multicut containing e and not f . Hence by (18)
we can remove all bonds D containing f if we increase β by we − |wf | and if we the weight of e becomes |wf |. Finally, the
property is closed under (C2c ).
The rest of the paper is devoted to the corollaries of the theorem. But first we give the one concerning the maxmultiflow/min-multicut equality:
Corollary 3.4. If the union G + H of the support graph G = (V , E ) and of the demand graph H = (V , R) is series–parallel, then
the maximum integer multiflow problem and the minimum multicut problem have the same optimum, for any capacity u ∈ ZE+ .
Proof. Given a support graph G = (V , E ) with positive integer edge capacity u ∈ ZE+ and a demand graph H = (V , R), we
∑
E ∪R
define M := |R| ×
be the
e∈E ue , so obviously M is an upper bound for the maximum multiflow problem. Let w ∈ Z
vector defined as follows:

−
we :=

ue

e∈E

−u e

if e ∈ R,
if e ∈ E .

Thus min-mflowloss(G + H , w) is equal to M minus the optimum of the maximum integer multiflow problem. Obviously,
any cut in (G + H , w) containing at least one edge in R has a nonnegative weight. Since R has no loop each edge of R
belongs to a cut, then by (18), a maximum multicut of (G + H , w) contains R. Then max-multicut(G + H , w) is equal to M
minus the optimum of the minimum multicut problem. The result follows from the equality min-mflowloss(G + H , w) =
max-multicut(G + H , w).
Given a min–max theorem, an interesting question is to associate it with a system of linear inequalities having both
primal and dual integer optimal solutions. This is the goal of the next section with the min–max relations of Theorem 3.1.
4. TDIness
The dual of zLP := max c T x over {Ax ≤ b, x ≥ 0} is ψLP := min yT b over {yT A ≥ c T , y ≥ 0} and the linear system
{Ax ≤ b, x ≥ 0} is said to be totally dual integral – TDI for short – if for any integer objective function c such that ψLP admits
a feasible solution then ψLP has an integer optimal solution (where A ∈ Rm×n , x, c ∈ Rn and y, b ∈ Rm ).
Often, there is a min–max relation associated with a TDI system and vice-versa. Schrijver [21, page 505] pointed out that
G is series–parallel if and only if the linear system
xe ≥ 0
xe ≤

for each e ∈ E ,

−

xf

for each cut D of G and each edge e ∈ D,

(24)
(25)

f ∈D\{e}

is TDI. But no min–max relation is associated with (24)–(25) since the objective function of the dual is the zero function. In
this section, we give a TDI system associated with the min–max relation (i) of the theorem.
TDIness implies integrality [10] but of course the converse is generally false, especially for the system (24)–(25) which is
integral for any graph G (and describes its circuit cone) [24]. Chopra [6] showed that G is series–parallel if and only if
for each e ∈ E ,

0 ≤ xe ≤ 1
xe ≤

−

xf

for each circuit C of G and e ∈ C

(26)
(27)

f ∈C \{e}

is integral, yielding the description of the multicut polytope of these graphs. Removing the upper-bound constraints, the
system obtained, that is (24) and (27), is integral for the larger class of graphs G with no minor K5 (and describes the cut
cone of G) [25]. In the same way, adding the upper bounds constraints to (24)–(25), the system obtained, that is (25)–(26),
is not integral anymore, as expected from the NP-hardness of the maximum bridgeless subgraph problem [11].
Theorem 3.1 has the following corollary:
Corollary 4.1. The system (26)–(27) is TDI if and only if G is series–parallel.

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

1963

Proof. Necessity follows from [6], hence we only need to show sufficiency. Let G be a series–parallel graph with edge
E
weight w ∈ Z
∑. Recall that R is the set of all edges with
∑ positive weight and that C is the set of circuits of G. The dual
of zLP := max e∈E we xe over (26)–(27) is ψLP := min e∈E le over all nonnegative vectors l ∈ RE such that


−


yeC

−

C ∈C :C ∋e

−

f
yC

≥ we − le for each e ∈ E

f ∈C \{e}

for some nonnegative vector y ∈ RC ×E . Since xe = 0 and yeC = 0, le = we yield feasible solutions for both problems, then
by linear programming duality, zLP = ψLP . Since (14)–(15) admits
∑ a trivial feasible solution le = we and yC = 0, there exists
¯l ∈ ZR a nonnegative integer vector satisfying (14)–(15) with e∈R ¯le minimum. Let y¯ be the corresponding vector in ZF .
One obtains a feasible integer solution (ˆl, yˆ ) for ψLP as follows:
for e ∈ R,
otherwise,


¯
ˆle := le
0

yˆ eC :=



y¯ C
0

for C ∈ F and e ∈ C ∩ R,
otherwise.

Since the solution (ˆl, yˆ ) has the same value as (¯l, y¯ ), the value of (ˆl, yˆ ) equals min-mflowloss(G, w). Moreover, since the
incidence vectors of the multicuts of G are feasible solutions for zLP , then max-multicut(G, w) ≤ zLP = ψLP . Hence
Theorem 3.1 implies that (ˆl, yˆ ) is optimal.
The proof of Corollary 4.1 is that the equality max-multicut(G, w) = min-mflowloss(G, w) for any w ∈ ZE implies the
TDIness of (26)–(27). Besides the converse holds since both happen exactly when G is series–parallel. In the following we
point out that, in a similar way, the equality min-cutcond(G, w) = min-mflowloss(G, w) for any w ∈ ZE implies the
TDIness of the system defined by (24) and (27). Again in fact both properties are equivalent, since both are equivalent to
series–parallelism, yet we can prove the implication for the larger class of graphs without minor K5 . Clearly, the equality
min-cutcond(G, w) = min-mflowloss(G, w) implies that the cut-condition is sufficient for the existence of a multiflow.
Since G has no minor K5 , as mentioned above, the cut-cone of G, that is, the cone pointed in 0 generated by the incidence
vectors of the cuts of G, is described by (24) and (27). If w(D) > 0 for some cut D, then the maximum of w T x over (24) and
(27) is infinite. So, max w T x over the cut-cone has an optimal solution (with value zero) if and only if w(D) ≤ 0 for any cut
D, that is, if and only if the cut-condition holds. If the system (24) and (27) admits a feasible solution, since the cut-condition
is sufficient, then (G, w) admits a multiflow y. As in the proof of Corollary 4.1, this multiflow y can be used in order to obtain
an integer feasible solution for the dual. Optimal and feasible are the same for the dual, since it consists in minimizing 0
over nonnegative y ∈ RC ×E such that


−
C ∈C :C ∋e


yeC

−

−

f
yC

≥ we for each e ∈ E .

f ∈C \{e}

Hence the system (24) and (27) is TDI.
Remark also that the cut inequalities (25) and the circuit inequalities (27) are equivalent for the class of planar graphs,
which contains series–parallel graphs. Series–parallelism being closed under taking the dual graph (since the dual graph of
K4 is still K4 ) we can restate Corollary 4.1 as follows:
Corollary 4.2. The system (25)–(26) is TDI if and only if G is series–parallel.
To end the section we note that it seems unlikely that a TDI system associated with the min–max relation (ii) in
Theorem 3.1 exists although it is not difficult to find, for the maximum multicut problem, formulations using variables
associated with cuts or multicuts whose integer dual formulates the minimum cut-condition problem. However, since the
weights then are associated with multicuts and not with edges, the system may not even be integral for e.g. triangles. So one
should find a formulation using only edge variables x different from the circuit formulation. It seems impossible to express
that x is the union of cuts without additional variables.
One could not have associated a TDI result with the relation min-mflowloss = max-multicut if we had restrictions on the
weight function. However, as a by product of Theorem 3.1, we have the equality min-cutcond(G, w) = min-mflowloss(G, w)
for series–parallel G and any w , which is a particular case of the result of [23] cited in the Introduction. Indeed, as this result
implies, the equality min-cutcond(G, w) = min-mflowloss(G, w) if the signed graph associated with (G, w) has no oddminor K4 . The next section investigates a generalization of the equality min-mflowloss = max-multicut using signed graphs.
5. Covering and packing flows of signed graphs
A signed graph is a pair (G, R) where G = (V , E ) is a loopless graph and R ⊆ E. Any edge in R is said to be signed in (G, R).
An odd circuit of (G, R) is a circuit C of G that contains an odd number of edges in R, and if moreover |C ∩ R| = 1, call C a
flow of (G, R). The cut-condition in (G, R) is that |D ∩ R| ≤ |D \ R| for any cut D of G. (In terms of weighted graphs, this is
equivalent to w(D) ≤ 0 where the edges in R have weight 1 and the other edges have weight −1).
An odd circuit cover of (G, R) is a subset T ⊆ E intersecting each odd circuit of (G, R). Every odd circuit cover is also a flow
cover (that is, an edge subset intersecting each flow). Given a signed graph (G, R), we use the following notation:

1964

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

Fig. 2. Two signed graphs (G, R), where R is the set of the edges in bold. For the signed graph on the left: νflow = 1 < 2 = τflow = τodd = νodd . For the
signed graph on the right: τflow = νflow = νodd = 2 < 3 = τodd .

•
•
•
•

νodd for the maximum number of edge-disjoint odd circuits of (G, R);
τodd for the minimum size of an odd circuit cover of (G, R);
νflow for the maximum number of edge-disjoint flows of (G, R);
τflow for the minimum size of a flow cover of (G, R).

Obviously, we have τodd ≥ νodd and τflow ≥ νflow with any (G, R). It is not hard to see that νflow ≤ νodd and τodd ≥ τflow with
any (G, R). Fig. 2 shows that the four inequalities can be strict, and, moreover, that neither the equality νodd = τodd implies
the equality νflow = τflow , nor does the equality νflow = τflow imply the equality νodd = τodd .
Signed graphs have been introduced because the collection of odd circuits of (G, R) is closed under resigning, that is,
resetting R := R △ D for some cut D of G. Here A △ B denotes the symmetric difference (A ∪ B) \ (A ∩ B) between two sets
A, B. Indeed, let C be any circuit, then after resigning, first, it is clear that C has the same number of signed edges outside
D, and second, the parity of the signed edges in C ∩ D is the same, since by (16), |(C ∩ D) ∩ X | and |(C ∩ D) \ X | have the
same parity for any X ⊆ E. We stress that the collection of flows is not closed by resigning. A minor of (G, R) is a signed
graph obtained from (G, R) by a series of deletion of edges, resigning, and contraction of unsigned edges, yet, since any edge
e belongs to some cut, one can always resign so e is unsigned. An odd-K4 is a signed K4 where each triangle is odd (that is,
either R = E, or R is a triangle, or R is two disjoint edges). An important property for the odd circuit covers of (G, R), see
[21, p. 1329], which is not true for flow covers, is:
T ⊆ E is a minimal odd circuit cover of (G, R) if and only if

(28)

T ⊆ E is a minimal set such that T = R △ D for some cut D of G.
The odd circuits of (G, R) have also the important property, which is not shared by flows, that for any collection C1 , . . . , C2k+1
of an odd number of odd circuits, there is an odd circuit which contains the symmetric difference C1 △ . . . △ C2k+1 of them.
In other words, the odd circuit hypergraph of (G, R) is binary (see Schrijver’s book [21, p. 1406] for a definition) and it follows
(see [21, p. 1329–1331] for details) that a particular case of Seymours’ characterization of Mengerian binary hypergraphs is
Theorem 5.1.
Theorem 5.1 ([23]). If (G, R) has no minor odd-K4 , then the maximum number of edge-disjoint odd circuits is equal to the
minimum size of an odd circuit cover.
A consequence of it is Corollary 5.3 (to make our contribution clear later in Proposition 5.7 we give the proofs):
Lemma 5.2 ([21, p. 1334]). If the cut-condition holds in (G, R), then R is a minimum odd circuit cover of (G, R).
Proof. For every cut D, if the cut-condition holds, then |R △ D| = |D \ R| + |R \ D| ≥ |D ∩ R| + |R \ D| = |R|. So, by (28),
every odd circuit cover has at least |R| edges. Hence R is a minimum odd circuit cover.
Corollary 5.3 ([21, p. 1334]). If (G, R) has no minor odd-K4 and if the cut-condition holds in (G, R), then the maximum number
of edge-disjoint flows is equal to the minimum size of a flow cover.
Proof. Since the cut-condition holds, by Lemma 5.2, R is a minimum odd circuit cover. Then, by Theorem 5.1, there exists a
collection C1 , . . . , C|R| of edge-disjoint odd circuits. Yet each Ci contains one edge of R and then it is a flow.
Notice that Corollary 5.3 generalizes the max-flow/min-cut theorem since, when H has only one multiple edge, then
G + H has no minor odd-K4 . Besides, the proof of Corollary 5.3 shows that, for every signed graph, if the cut-condition
holds, then the equality νodd = τodd implies the equality νflow = τflow . Yet in general, as noticed before, the statements
are unrelated. Proposition 5.7 shows that the case where the cut-condition holds is very special since in this case, for every
signed graph (G, R), the equalities νodd = τodd and νflow = τflow are actually equivalent. If the cut-condition does not hold,
dealing with flows instead of odd circuits seems to change everything, especially because unlike odd circuits, the symmetric
difference of an odd number of flows may contains no flow even if G is series–parallel as illustrated by Fig. 3. Actually, Fig. 3
shows that, even if G is series–parallel, the flow hypergraph of (G, R), that is the pair (E , F ), is neither binary, nor balanced

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

1965

Fig. 3. Two signed graphs (G, R) with the signed edges in bold, where G is the same series–parallel graph, such that, on the left, the flow hypergraph is not
binary, and, on the right, the flow hypergraph is not balanced.

(see [21, p. 1439] for a definition). Proposition 5.8 shows that the equality νflow = τflow and the equality max-multicut =
min-mflowloss are equivalent. Let us start the proof of these propositions with three small lemmas.
Lemma 5.4. If D is a multicut of G, then T = R △ D is a flow cover of (G, R).
Proof. Let D be a subset of edges and let T = R △ D. Assume that T is not a flow cover, that is, there exists a flow C of (G, R)
with C ∩ T = ∅. Let e be the demand of C . Since e is in R but not in T , then e belongs to R ∩ D. Moreover for each f ∈ C \ {e},
since f is not in R ∪ T , then f is not in D. It follows that e is the only edge in C ∩ D; hence by (17) D is not a multicut.
Lemma 5.5. If T is an inclusionwise minimal flow cover of (G, R), then D = R △ T is a multicut of G.
Proof. Let T be a minimal flow cover of (G, R). Note that, since T is minimal, for each edge f ∈ T there exists a flow such
that f is the only edge in the flow and in T . For each edge f ∈ T , we let Cf be a flow with Cf ∩ T = {f }. Now assume for
contradiction that D = R △ T is not a multicut of G. By (17), there exists a circuit C such that |C ∩ D| = 1. Let e be the (unique)
edge in C ∩ D. Observe that every edge in T ∩ C \ {e} is necessarily in R, and that every edge in R ∩ C \ {e} is necessarily in T .
We denote by F the set of the edges in R ∩ T ∩ C \ {e}. By (10), the union of C \ F and of the paths Cf \ {f } for f ∈ F contains
a circuit C˜ without an edge in R ∪ T \ {e}. Since T is a flow cover, it follows that e is not in R \ T . Indeed, otherwise C˜ is a
flow but C˜ ∩ T = ∅. Thus e is in T \ R. Let e′ be the demand of the flow Ce (note that e and e′ are distinct). By (10), the union
of C˜ \ {e} and of the path Ce \ {e} contains a flow, the demand of which is e′ . We have a contradiction since this flow is not
covered by T .
In order to state the last lemma, let us associate a weighted graph (G, w) to a signed graph (G, R) by defining the weight
of each edge e as:

we :=



+1
−1

if e ∈ R,
if e ∈ E \ R.

Clearly, there is a one-to-one correspondence between signed graphs and weighted graphs with weight in {−1, +1}. In
multiflow and multicut problems we can assume that the weights are in {−1, +1} since these problems remain unchanged
after the following transformation:
Replace each edge e of (G, w) by |we | parallel edges with weight

we
.
|we |

In the following we assume that (G, R) and (G, w) are in correspondence. Combining the two first lemmas we obtain that
finding a minimum flow cover in a signed graph and finding a maximum multicut in a weighted graph are equivalent, as
stated by the last lemma below:
Lemma 5.6. Let T be a minimum size flow cover of (G, R) and let D be a maximum weight multicut of (G, w), then |T |+w(D) =
|R|.
Proof. Let T be a minimum flow cover and let D be a multicut maximizing |D ∩ R| − |D \ R| over all multicuts D of G. Notice
that |R △ D| + |D ∩ R| − |D \ R| = |R|. Since by Lemma 5.4, R △ D is a flow cover, it follows that |T | + w(D) ≤ |R|. Now
remark that |T | + |(R △ T ) ∩ R| − |(R △ T ) \ R| = |T | + |R \ T | − |T \ R| = |R|. Since by Lemma 5.5, R △ T is a multicut, it
follows that |T | + w(D) ≥ |R|.
Now we can prove the propositions.
Proposition 5.7. If the cut-condition holds in (G, R), then the following propositions are equivalent:
(i) The maximum number of edge-disjoint odd circuits is equal to the minimum size of an odd circuits cover;
(ii) The maximum number of edge-disjoint flows is equal to the minimum size of a flow cover.
If, moreover, (i)–(ii) hold, then τflow = τodd = νodd = νflow = |R|.

1966

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

Proof. (i) ⇒ (ii): It follows from the proof of Corollary 5.3.
(ii) ⇒ (i): If the cut-condition holds then the maximum of w(D) over all multicuts is 0, and hence, by Lemma 5.6, R is a
minimum flow cover. Then there are |R| edge-disjoint odd circuits, yet R is an obvious (minimum) odd circuit cover.
Proposition 5.8. The maximum number of edge-disjoint flows is equal to the minimum size of a flow cover in (G, R) if and only
if min-mflowloss(G, w) = max-multicut(G, w).
Proof. Clearly, the maximum number of disjoint flows is equal to |R| − min-mflowloss(G, w) (where w is defined as above).
By Lemma 5.6, the minimum size of a flow cover of (G, R) is equal to |R| − max-multicut(G, w).
Now let max-cutcond(G, R) be the maximum number of signed edges which satisfies the cut-condition, that is, the
maximum of |R′ | over all R′ ⊆ R such that |D ∩ R′ | ≤ |D \ R| for every cut D of G. Obviously, max-cutcond(G, R) =
|R| − min-cutcond(G, w). By Lemma 5.6, τflow = |R| − max-multicut(G, w). We have νflow = |R| − min-mflowloss(G, w).
Hence the two inequalities of (21) imply that for every signed graph (G, R) we have:

νflow ≤ max-cutcond(G, R) ≤ τflow .

(29)

So, by Proposition 5.8, Theorem 3.1 is equivalent to this direct corollary:
Corollary 5.9. The following propositions are equivalent:

• The maximum number of edge-disjoint flows is equal to the minimum size of a flow cover in (G, R), for every R ⊆ E;
• The maximum number of edges in R which satisfies the cut-condition is equal to the minimum size of a flow cover in (G, R), for
every R ⊆ E;
• G is series–parallel.
We close this section by a conjecture extending the max-multiflow/min-multicut equality νflow = τflow of series–parallel
graphs to a class depending both on G and R. Since the class of the signed graphs without minor odd-K4 is closed under the
removing of demand, one can see from the proof of Corollary 5.3 that the first inequality in (29) holds with equality for this
class. Hence νflow = τflow holds for any subclass of signed graphs without minor odd-K4 for which the second inequality
in (29) holds with equality. But it may be inappropriate to consider minors of the odd circuit hypergraphs (for a definition
of minor of hypergraphs see [21, p. 1376]). Just as the minor operations (deletion and contraction) in graphs correspond to
minor operations in the cycle hypergraph, the minor operations in signed graphs correspond to minor operations in the odd
cycle hypergraph. But no operation on a signed graph can correspond to the minor operations in its flow hypergraph. Indeed,
the signed graph (G, R) with G = K4 and R a triangle is a minimal counter-example both for νodd = τodd and νflow = τflow ,
but unlike the odd circuit hypergraph of this signed graph, its flow hypergraph is not minimally non-Mengerian as it has a
minor K3 (see [21, p. 1400] for the definition). One can however define a strong minor of (G, R) to be a signed graph that
arises from (G, R) by a series of deletion of edges in E and contraction of edges in E \ R. Call flow-K4 the signed graph (G, R)
with G = K4 and R two disjoint edges. Call flow-odd-wheel a signed odd wheel with signed edges the odd cycle (an odd wheel
is a graph composed by an odd cycle and by an additional vertex which is linked to all vertices of the odd cycle).
Conjecture 1. If (G, R) has no strong minor flow-K4 nor flow-odd-wheel, then the maximum number of edge-disjoint flows is
equal to the minimum size of a flow cover in (G, R).
6. Conclusions
We proved that the equality min-multicut = max-multiflow is satisfied for every G + H series–parallel. To the best of our
knowledge, this is the first class of instances with this strong min–max property such that neither does the cut-condition
necessarily hold, nor is the number of demands bounded. In contrast, the literature is full of classes of instances of the
multiflow feasibility problem such that a multiflow exists if (and only if) the cut-condition holds. We have investigated the
fundamental difference between these two kinds of results and we have showed that the case where the cut-condition holds
is very particular for the equality min-multicut = max-multiflow.
Our min–max equality is the best possible according to the structure of the graph G + H but it could be improved by
considering the structure of both G + H and the demands. We gave a conjecture in this direction.
References
[1]
[2]
[3]
[4]

F. Barahona, On the complexity of Max Cut, Rapport de recherche 186, 1980. IMAG, Université Joseph Fourier, Grenoble, France.
F. Barahona, The max-cut problem on graphs not contractible to K5 , Operations Research Letters 2 (1983) 107–111.
F. Barahona, A.R. Mahjoub, On the cut polytope, Mathematical Programming 36 (1986) 157–173.
C. Bentz, M.-C. Costa, L. Létocart, F. Roupin, Erratum to minimal multicut and maximal integer multiflow: a survey, European Journal of Operational
Research 177 (2007) 1312.
[5] C. Bentz, M.-C. Costa, F. Roupin, Maximum integer multiflow and minimum multicut problems in two-sided uniform grid graphs, Journal of Discrete
Algorithms 5 (1) (2007) 36–54.
[6] S. Chopra, The graph partitioning polytope on series–parallel and 4-wheel free graphs, SIAM Journal on Discrete Mathematics 7 (1) (1994) 16–31.

D. Cornaz / Discrete Mathematics 311 (2011) 1957–1967

1967

[7] M.-C. Costa, L. Letocart, F. Roupin, Minimal multicut and maximal integer multiflow: a survey, European Journal of Operational Research 162 (2005)
55–69.
[8] M. Deza, M. Laurent, Geometry of Cuts and Metrics, in: Series Algorithms and Combinatorics, vol. 15, Springer Ed., 1997.
[9] R.J. Duffin, Topology of series–parallel networks, Journal of Mathematical Analysis and Applications 10 (1965) 303–318.
[10] J. Edmonds, R. Giles, A min–max relation for submodular functions on graphs, in: Studies in Integer Programming, in: Annals of Discrete Mahtematics,
vol. 1, North-Holland, Amsterdam, 1977, pp. 185–204.
[11] M. Fischetti, J.J. Salazar, Models and algorithms for the 2-dimensional cell suppression problem in statistical disclosure control, Mathematical
Programming 84 (2) (1999) 283–312.
[12] L.R. Ford, D.R. Fulkerson, Maximal flow through a network RAND corporation, Santa Monica, California, 1954.
[13] A. Frank, A. Karzanov, A. Sebő, On integer multiflow maximization, SIAM Journal on Discrete Mathematics 10 (1) (1997) 158–170.
[14] N. Garg, V.V. Vazirani, M. Yannakakis, Primal–dual approximation algorithms for integral flow and multicut in trees, Algorithmica 18 (1997) 3–20.
[15] G. Gottlob, S. Lee, A logical approach to multicut problems, Information Processing Letters 103 (4) (2007) 136–141.
[16] M. Grötschel, Y. Wakabayashi, Facets of the clique partitioning polytope, Mathematical Programming 47 (1990) 367–387.
[17] M.V. Lomonosov, On the planar integer two-flow problem, Combinatorica 3 (2) (1983) 207–218.
[18] M. Middendorf, F. Pfeiffer, On the complexity of the disjoint path problem, Combinatorica 13 (1993) 97–107.
[19] G. Naves, A. Sebő, Multiflow feasibility: an annotated tableau, in: Research Trends in Combinatorial Optimization, 2009, pp. 261–283.
[20] T. Nishizeki, J. Vygen, X. Zhou, The edge-disjoint paths problem is NP-complete for series–parallel graphs, Discrete Applied Mathematics 115 (1–3)
(2001) 177–186.
[21] A. Schrijver, Combinatorial Optimization, Springer-Verlag, Berlin, Heidelberg, 2003.
[22] A. Sebő, Integer plane multiflow with a fixed number of demands, Journal of Combinatorial Theory, Series B 59 (1993) 163–171.
[23] P.D. Seymour, The matroid with the max-flow min-cut property, Journal of Combinatorial Theory, Series B 23 (1977) 189–222.
[24] P.D. Seymour, Sums of circuits, in: Graph Theory and Related Topics, Academic Press, New York, 1979, pp. 341–355.
[25] P.D. Seymour, Matroids and multicommodity flows, European Journal of Combinatorics 2 (1981) 257–290.
[26] P.D. Seymour, Colouring series–parallel graphs, Combinatorica 10 (1990) 379–392.
[27] M. Sørensen, A note on Clique–Web facets for multicut polytopes, Mathematics of Operations Research 27 (4) (2002) 740–742.
[28] X. Zhou, S. Tamura, T. Nishizeki, Finding edge-disjoint paths in partial k-trees, Algorithmica 26 (1) (2000) 3–30.

