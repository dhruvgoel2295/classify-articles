Computer-Aided Design 70 (2016) 78–88

Contents lists available at ScienceDirect

Computer-Aided Design
journal homepage: www.elsevier.com/locate/cad

Consistent quadrangulation for shape collections via feature line
co-extraction✩
Min Meng a,b,∗ , Ying He b
a

Singapore Polytechnic, Singapore

b

Nanyang Technological University, Singapore

highlights
• We propose a framework to produce consistent quadrangulations for a shape collection.
• We propose an efficient method for extracting feature lines from the shape collection.
• We propose a practical greedy algorithm for extracting the aligned cut graphs.

article

info

Keywords:
Quad mesh
Shape collection
Feature line co-extraction

abstract
This paper presents a method that takes a collection of 3D surface shapes, and produces a consistent and
individually feature preserving quadrangulation of each shape. By exploring the correspondence among
shapes within a collection, we coherently extract a set of representative feature lines as the key characteristics for the given shapes. Then we compute a smooth cross-field interpolating sparsely distributed
directional constraints induced from the feature lines and apply the mixed-integer quadrangulation to
generate the quad meshes. We develop a greedy algorithm to extract aligned cut graphs across the shape
collection so that the meshes can be aligned in a common parametric domain. Computational results
demonstrate that our approach not only produces consistent quad meshes across the entire collection
with significant geometry variation but also achieves a trade-off between global structural simplicity for
the collection and local geometry fidelity for each shape.
© 2015 Elsevier Ltd. All rights reserved.

1. Introduction
In recent years, the problem of converting an object given as
triangulated surface mesh into a quadrilateral representation, referred to as quadrangulation, has received a great deal of attention.
Quad meshes are highly desired in many graphics applications,
such as texture mapping and shape modeling. The quality of quadrangulation depends on the application and a quadrangulation
algorithm should produce high-quality meshes with controlled element alignment, orientation, sizing, aspect ratio, etc. Most of the
existing methods [1–5] can handle orientation control by using

✩ This paper has been recommended for acceptance by Scott Schaefer and Charlie
C.L. Wang.
∗ Correspondence to: Singapore Polytechnic, School of Mechanical & Aeronautical
Engineering, 500 Dover Road, Singapore, 139651, Singapore.
E-mail addresses: mengmin1985@gmail.com (M. Meng), yhe@ntu.edu.sg
(Y. He).

http://dx.doi.org/10.1016/j.cad.2015.07.010
0010-4485/© 2015 Elsevier Ltd. All rights reserved.

a cross-field to guide the quads. In contrast to the inherent ability of orienting elements according to local regularity, the global
structure is much more difficult to handle. Many state-of-the-art
quadrangulation techniques are prone to producing quad meshes
with complex patch layouts unless sharp surface features or additional structural constraints are taken into consideration. Hence,
more attention has been paid recently to the high-level global
structure of the resulting quad meshes [6–8].
This paper investigates the problem of consistent quadrangulation for a shape collection in order to produce quad meshes that
exhibit global structure and simple patch layouts for each individual shape and can be aligned together in a common parametric
domain for the entire collection. The main technical challenge in
realizing our goal is how to construct the consistent parametrization domain on a set of shapes with large variation. Therefore we
prefer to identify the prominent characteristics of input shapes and
their global relations. One front in geometry processing is highlevel shape analysis, the goal of which is to drive structural and
semantic information from the shape’s low-level geometric properties. In this direction, some methods attempt to extract a set

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

of representative primitives, such as structural curves [9] or rigid
components and joints [10], that serve as the key characteristics to
facilitate a variety of applications. To address the above-mentioned
domain construction challenge, our method detects a set of feature
lines for each of the input shapes and performs an analysis to extract a set of representative ones as the key characteristics that exhibit global structure and semantics of input shapes to guide the
quadrangulation.
The setting and objective of our analysis have similarities with
other recent studies (e.g., [11]). Given mesh sequences with pointto-point registration, Marcias et al. [11] presented a method for
designing a quad mesh for dynamic shape by local analysis of the
shape throughout the animation. The main idea is to produce an
initial guidance field on a reference mesh that reveals shape features that originate from animation. In our setting, the set consists
of shapes with a variety of non-rigid and geometric differences.
However, it is often difficult and ambiguous to establish one-toone point correspondences across a shape collection. Our approach
allows the shared sharp features among a shape collection to be inferred automatically through a set of feature lines that comply with
global structure and semantics of input shapes.
In this paper, we present a framework for consistent quadrangulation for 3D surface shape collections. By exploring the correspondence between shapes within a collection, we first extract
a set of representative feature lines that are aware of individual
shape geometry and also ensure structural consistency among the
given shapes. The extracted feature lines induce a set of consistent directional constraints for the input shapes. We then apply
the mixed-integer solver [5] to compute a smooth cross-field that
interpolates sparsely distributed directional constraints induced
from feature lines. Finally we adopt the global parametrization
technique [5] to generate the quad meshes through the intersections of the iso-lines following the cross-field. We also develop
a greedy algorithm for computing cut graphs so that the quad
meshes are aligned in a common parametric domain. To simplify
the alignment of cut graphs, we only deal with genus-0 shapes in
this paper. Fig. 1 shows the results of feature line co-extraction and
quadrangulation on a collection of animals using our approach. The
experimental results demonstrate that our approach can achieve
high performance and produce consistent quad meshes across the
entire collection.
This paper makes the following contributions:

• A framework to produce consistent quadrangulation results for
a shape collection with respect to the individual shape geometry and structural consistency across the collection;
• An efficient method for co-extracting the feature lines that are
served as the key characteristics to induce the directional constraints for the generation of quad layouts; and
• A practical greedy algorithm for extracting the aligned cut
graphs that determine the final quad layouts within the collection.
2. Related work
2.1. Quad meshing
The aim of quad meshing is to generate a quadrilateral structure
that accurately represents the input shape and has superior quality.
In recent years, quad meshing has been studied intensively in
the mesh generation community. See the recent comprehensive
survey [12].
Early method proposed in [1] attempted to generate orientated
quadrilateral elements by explicitly tracing lines along the
principal curvature directions. More recent parametrization-based
approaches [4,3,5] generated curvature-oriented all-quadrilateral

79

Fig. 1. Consistent quadrangulation for the set of animals. The feature lines
are extracted coherently and shown for the given shapes, same color for the
corresponding feature lines. The close-up views show that the produced quad
meshes not only preserve their local geometry features (e.g., the edges follow the
principal directions), but are also consistent within the set. (For interpretation of the
references to color in this figure legend, the reader is referred to the web version of
this article.)

meshes, either by smoothing or optimizing the feature field
typically derived from the principal curvature directions. Although
these methods can generate quadrilateral meshes with excellent
angle and edge-length distribution, the patch layouts are often
very complex unless sharp surface features or additional structural
constraints are enforced.
As an alternative to using principal curvature directions as
a guide, the methods presented in [2,13,14] directly exploit a
base-complex using harmonic maps to generate all quadrilateral
meshes. Also the method developed in [15] utilize the combined
gradient information of eigenfunctions as the guidance.
2.2. Cross parametrization
As an essential step for many geometry processing applications,
computing cross parametrization for two or more shapes has been
studied for many years [16]. Most of the existing approaches have
required a base domain in order to find consistent parametrization.
The spherical domain [17] is commonly used as the base domain

80

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

to produce seamless and continuous parametrization for genus0 shapes. Praun et al. [18] employed a predefined template as
the base domain with the intention of tracing the boundary of
patch layouts on each input shape by consistently linking the given
anchor points. Kraevoy et al. [19] and Schreiner et al. [20] proposed
using the heuristic of path’s lengths to generate the template base
domains. They first compute the shortest paths between anchor
points and select the best pairs of corresponding paths from a
priority queue sorted by the sum of path lengths on meshes. The
base domains are eventually obtained by triangulating the patches
in a trial-and-error manner. Kwok et al. [21] used Voronoi diagram
to govern the construction of Delaunay-like triangular base
domains. They observed that the Voronoi diagram of the anchor
points gives better cues than the heuristic of connecting shortest
paths greedily. Kwok and Wang [22] constructed volumetric
domains with consistent topology for cross parametrization of 3D
volumes.
Most existing cross-parametrization techniques focus on automatically generating common base domains (e.g., polycubes [23],
simplicial complexes [24]), on which each 3D shape can be mapped
with low distortion. Many real-world shape classes, however, have
a large degree of intra-class variation, making it difficult to construct common base domains and/or define anchor points in a
consistent way. In this paper, we aim to construct consistent
parametrization by quad meshing each shape in the same class
based on corresponding feature lines that are extracted from the
shape set. Both the problems including specifying anchor points
and generating consistent base domains are addressed in our quadrangulation procedure. This will ensure that quad layouts on surfaces are consistent with each other across an entire class and
follow the local geometry for each individual shape.
2.3. Shape collection analysis
A recent trend that intends to combine information from
multiple sources to improve the processing of each individual
shape involves extracting the relationships across a collection of
shapes from the same class to yield more robust results than
analyzing an isolated model. There have been several recent efforts
to investigate this strategy for various applications, including datadriven analysis [25] and data-driven modeling [26].
The present study focuses on the work that analyzes model
collections to compute correspondences. The techniques in [25,27]
jointly analyze a set of shapes to establish consistent part-to-part
correspondences across the collections. Kim et al. [28] proposed an
analysis method for computing similarity relationships using fuzzy
point correspondence on 3D surface shapes across a collection. In
order to cover a diverse collection, Huang et al. [29] developed an
optimization approach for computing high quality point-to-point
maps among a collection of related shapes.
In order to handle shape collections with large variation, we
adopt the optimization approach [29] to analyze the relationships
of detected feature lines and extract a set of representative feature
lines in correspondence that is aware of the individual shape’s
geometry and ensures structural consistency across a collection.
2.4. Feature detection and shape descriptors
Feature-based object retrieval has gained popularity in computer vision and computer graphics communities, due to the recent
progress in feature detection, such as scale invariant feature transform [30] in 2D image domain and heat kernel signatures [31–33]
in 3D shapes.
Feature-based shape descriptors can be roughly divided into
four classes in terms of the feature type: (i) global features,
(ii) local features, (iii) distribution based features, and (iv) spatial

map. Generally global features analyze the shape in an overview
perspective and fail to capture the specific details of a 3D surface
shape. The concept of global feature based similarity has been
refined by comparing distributions of global features instead of
the global features directly. Spatial maps are the representations
that capture the spatial location of a shape and generally not
invariant to rotations and require a pose normalization first. The
information of local features inherent in the 3D surface shapes
plays an important role in description of those 3D shapes belonging
to the same category but with locally dissimilar features. We refer
the readers to [34,35] for the comprehensive surveys for shape
descriptors.
In our setting, the collection consists of real-world shapes with
large variation and local feature lines that are usually extracted as
curves on surface can be naturally used as sources of orientation
information. Extensive methods have been developed for the fast
and accurate detection of feature lines on discrete meshes. The
work in [36] is able to extract visually pleasing feature lines
from surface meshes and smooth thereof. The algorithm proposed
in [37] is efficient and robust for detecting the so-called crest
lines on a surface based on estimating the curvature tensor
and curvature derivatives via local polynomial fitting. We adopt
Yoshizawa et al.’s technique [37] for detecting feature lines on
individual shapes.
3. Problem statement
A quad mesh should feature a number of characteristics, which
are usually diverse and need to be optimized under consideration
of global dependencies. The quality of quad meshing as a measure
depends on its purpose. Typically, a set of common properties that
accurately describe the general suitability of a layout can be clearly
identified, such as orientation, alignment, regularity and global
structure. Some of these qualities are related to individual quad
elements, while others are related to the quad arrangements. In our
work, we consider the problem of consistent quad meshing for a
set of shapes in the same class. Apart from the qualities mentioned
above, we must also consider the consistency of quad layout across
the collection.
Based on the quality measure in [7], we have identified the
quality of quad layout for our problem from the application point
of view:

• Local geometric fidelity: Patches should map to planar
rectangles with low parametric distortion.

• Global structural simplicity: The graph that connects the
irregular vertices should be simple.

• Structural consistency across collection: The quad layouts
should be consistent across the collection.
The first point implies that it is favorable if patches are close to
being developable, their corner angles close to right, and their arcs
close to geodesic. This is important because deviating patches are
prone to lead to distortions in most applications. The second point
indicates that the number of irregular vertices should be small
and their position should capture the global geometric structure.
If this holds, the graph connecting them is simple which implies
a simple structure of the resulting quad mesh. Finally, the third
point expresses the general objective of cross-parametrization. In
our work, this criteria requires that the quad layouts are arranged
consistently and global parametrization domains correspond
across the shape collection. These criteria tend to be opposing
objectives and need to be balanced appropriately.
3.1. Motivation
Although strong methods for generating quad meshes with
good orientation and alignments properties have been proposed,

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

81

Fig. 2. Overview of our approach. (a) The consistent point-to-point maps between input shapes are computed. (b) The feature lines are extracted coherently for the given
shapes, ensuring both global structural correspondences across the collection and local geometric fidelity for each shape. Feature lines in correspondence are shown in the
same color. (c) The consistent quadrangulations are obtained for the input collections by employing the Mixed-Integer Quadrangulation (MIQ) algorithm [5] based on the
directional constraints identified from the co-extracted feature lines. (For interpretation of the references to color in this figure legend, the reader is referred to the web
version of this article.)

careful analysis of their global structure reveals that they still do
not exhibit a quad layout that complies with the semantics of
a 3D model. This imperfection is mainly caused by the fact that
singularities are usually placed based on local geometric features
without considering global structures. Furthermore, the structural
consistency is hard to control when proceeding the quad meshing
for each shape individually across a set of shapes with large
variation. Hence, it can be difficult to generate high-quality and
consistent quad meshes across a shape collection without merging
any information from 3D modeling system.
In many applications, such as animation and simulation, the
edges in a quad mesh tend to form smooth curves on the surface
that are well suited to represent feature curves and to naturally
segment shapes into structured parts. Consequently, the most
obvious attempt to construct the quad layouts consistently, given
a set of shapes, is to improve their global structures by further
exploiting the feature curves and natural semantics in common
across the set.
3.2. Our approach
Our approach takes as input a set of shapes from the same class
and generates the consistent quadrangulations of given shapes. As
Fig. 2 shows, our strategy contains two main stages.
In the first stage, we coherently extract the feature lines for
the given shapes that reveal shared shape features among the
collection and disregard other features that may occasionally occur
in specific shapes. For each shape, we first detect the feature lines
by the method in [37]. We then analyze the relationships between
these feature lines and select proper ones as the key characteristics
that will serve as directional constraints for quad meshing. These
co-extracted feature lines are capable of achieving the trade-off
between global structural simplicity for the collection and local
geometry fidelity for each shape.
In the second stage, we produce the consistent quadrangulations of the input shapes based on the co-extracted feature lines.
For each shape, we collect the directional constraints induced from
the feature lines and apply the technique in [5] to compute the

smooth cross-field interpolating sparsely distributed constraints.
To achieve the consistent quad-meshing for the given shapes, we
propose a greedy algorithm to extract the cut graphs in alignment
that can be used to cut open the shape mesh. Having obtained
patches with the aligned boundaries, we then perform the global
parametrization to produce all-quad meshes consistently across
the collection.
3.3. Assumptions
Our key argument here is that a set of shapes from the same
class can be automatically converted into consistent quadrangular
meshes. This paper represents a first attempt to realize this
approach and present a technique that allows shape collections to
be quadrangulated in a coherent way by exploring the feature lines
and their mutual relations. A notable feature of our method is that
it can deal with shape collections that have large variability. For
completeness, it is necessary to outline certain assumptions.
To facilitate feature line co-extraction, we need to obtain the
consistent map between shapes. However, this is not our main focus, so we employ the existing techniques to handle this problem.
Taking the shapes S = {Si : i = 1, . . . , n} and a set of initial
point-to-point maps as input, the technique in [29] organizes these
data into a model graph and uses an iterative strategy to compute
a subset of base shapes B ⊂ S , a hub-and-spoke correspondence
network G and a complete set of maps φij : Si → Sj between all
shapes encoded by G. Noting that the resulting optimized maps are
defined only on sample points of the surface, hence we must extrapolate these maps into surface to produce the consistent pointto-point maps ψij : Si → Sj among the collection. Furthermore,
we introduce the alignment weight between shapes Si and Sj as
wij = 1/align2 (ψij , ψji ) where align2 is the function defined in [29]
that scores the alignment between maps.
To ensure the consistency of quad layouts for shapes within
a collection, we need to cut and flatten the shape meshes into
patches coherently in a way that we can find a planar embedding
of these patches in alignment. For easy reading, we add a notation
table to list the notations in our algorithm, shown in Table 1.

82

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

4. Feature lines co-extraction
The goal of our feature lines co-extraction is to derive high-level
structural information from low-level geometric properties. To this
end, our approach first detects a set of feature lines on the surface
and then performs the co-analysis for the collection.
4.1. Per-shape feature line detection
Feature line detection requires a high quality estimation of
curvature tensor and curvature derivatives. In this paper we adapt
the fast and robust algorithm in [37] for detecting crest lines on the
surface.

Table 1
Notation table.
Symbol

Explanation

Consistent map
S

Shape
Shape collection
Point map between Si and Sj
Alignment weight between Si and Sj

S

ψij
wij
Feature line
L

Feature line
Feature line set
Collection of consistent feature line set
Face set passed by Li
Point set covered by Fi
Face-level descriptors of f
Line-level descriptors of Li
Intra-shape distance between Li and Lj
Directional distance between Li and L′j
Inter-shape distance between Li and Lj

L
L

Fi
Vi
S (f )
hdi
D1 (Li , Lj )
D2 (Li ⇒ L′j )
D (Li , Lj )
Quadrangulation

θi
θi′

Angle of triangle fi
Constrained angle of triangle fi
Rotation of reference frames from fi to fj
Period jump across edge eij
Weight of constraint angle θ ′
Singularity
Singularity set
Collection of singularity set
Cut graph
Cut graph set
Parameter value
Orthogonal vectors in fi

kij
pij

α
p
P

P
C

C

Given a shape S, we can detect a set of feature lines L =
{Li : i = 1, . . . , m}. For a feature line Li , we can collect a set of
faces Fi passed by Li and a set of points Vi covered by the face set
Fi on the surface. Accordingly, a feature line Li can be described as
{Fi , Vi }. On the right side an example is shown with a feature line in
blue, its associated faces and points in green and red respectively.
The output of this step is a set of feature lines for each shape that
can preserve the visually important features on the surface.

(u, v)
(ui , vi )

Combined with the line-level descriptors, we can define the
intra-shape distance metric between two feature lines Li and Lj on
a surface as

D1 (Li , Lj ) =



DG + DS .

(1)

Here
4.2. Feature line distance

DG = d2 (Li , Lj )

As a large variability may exist within the collection, we introduce a set of descriptors to help measure the dissimilarity between
two feature lines.
Descriptor space. Aiming to classify the feature lines, we prefer
to collect a set of shape descriptors. Inspired by the feature
selection in [25], we choose three shape descriptors, i.e., average
geodesic distance (AGD), conformal factor (CF), shape diameter
function (SDF), which are defined on the normalized shapes. For
each face f , we define a D-dimensional (D = 3) vector obtained by
the shape descriptors

DS =

S (f ) = (. . . , di (f ), . . .) i = 1, . . . , D.
Based on the face-level descriptors, we formulate the line-level
descriptors as the histograms that capture the distribution of each
descriptor for a set of faces passed by the feature line. For each
face-level descriptor d, we compute the histogram as the line-level
descriptor for feature line Li , denoted as hdi .
Intra-shape distance metric. Starting with the set of feature
lines on a single shape, we develop a new distance metric to
measure their dissimilarity.
Let Vi and Vj be the set of points associated to the feature lines Li
and Lj respectively, we denote dG (vi , Vj ) = min({dG (vi , vj ), ∀vj ∈
Vj }) as the geodesic distance from a point vi ∈ Vi to a set of points
Vj . Then the geodesic distance between Li and Lj is
d(Li , Lj ) = (DV (Vi , Vj ) + DV (Vj , Vi ))/avgRadius
where avgRadius is the average Euclidean distance from a point on
the surface to centroid of the shape, and DV is a directional function
defined as DV (Vi , Vj ) = mean(dG (vi , Vj ), ∀vi ∈ Vi ).



EMD2 (hdi , hdj )

d

and hdi are the line-level descriptors with respect to different
shape descriptors. EMD is the earth-mover’s distance, which
is commonly used to measure the dissimilarity between two
probability distributions.
Inter-shape distance metric. In order to explore the distance
metric of feature lines between different shapes, we need to
elaborate the mapping of feature line from one shape to another.
Let Li be a feature line with the variables {Fi , Vi } on S and ψ :
S → S ′ be the consistent point-to-point map from S to S ′ . If we
denote Vi′ as the mapping of point set Vi using the map ψ and Fi′ as
the set of faces surrounded by Vi′ on the shape S ′ , then we can formulate the mapping of Li from shape S to shape S ′ as L′i associated
with the variables {Fi′ , Vi′ }. Then for a feature line L′j on the shape
S ′ we can define the directional distance function between Li on S
and L′j on S ′ as

D2 (Li ⇒ L′j ) = D1 (L′i , L′j ).
Due to symmetry, the inter-shape distance metric between Li and
L′j is defined as

D2 (Li ⇒ L′j ) + D2 (L′j ⇒ Li )

.
(2)
2
Fig. 3 illustrates the distance metric between feature lines. For
a reference feature line, similar feature lines are either determined
by intra-shape distance metric within a shape, or by inter-shape
distance metric within the collection.

D (Li , L′j ) =

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

83

4.3. Feature line co-extraction
Now we investigate the problem of feature lines co-extraction
for a set of shapes so as to extract a set of representative feature
lines for each shape.
Clustering. Aiming to extract the salient feature lines in global
consistency, we take the feature lines computed individually for
each shape and cluster them into groups. We start with the set of
feature lines detected for all the shapes L = {L1 , . . . , LM }. The
dissimilarity between two feature lines Li and Lj is given by the
distance D (Li , Lj ). Then we construct the affinity matrix W with
elements
Wij = exp(−D (Li , Lj )/2σ 2 ).

(3)

After obtaining the affinity matrix, we apply the Normalized Cuts
method [38] based on a generalized eigenvalue problem to group
the feature lines into potential clusters, in which the feature lines
with high degree of similarity are grouped together.
Co-extraction. In order to induce reliable directional constraints for guiding the quadrangulation, we only consider partial
feature lines that are closer to the center of cluster. For a cluster
c, the reliable feature line L within c is determined by d(L, µc ) <
σc , where µc and σc are the parameters specifying the mean and
variance of cluster c. The complete algorithm for feature lines coextraction is summarized in Algorithm 1.
Algorithm 1: Feature lines co-extraction
input : a set of feature lines for all shapes
L = {Li : i = 1, . . . , M }
output: a set of consistent feature lines
L = {Li |Si : i = 1, . . . , N }.
// compute affinity matrix
foreach Li ∈ L do
foreach Lj ∈ L do

Fig. 3. An illustrative example for the distance metric between feature lines. Given
a reference feature line on a shape, (a) vicinal feature lines are shown according to
the intra-shape distance metric within the shape, closer (resp. farther) feature lines
are represented as red (resp. blue). (b) Similar feature lines are shown on shapes
within the collection according to the inter-shape distance metric between feature
lines on different shapes. (For interpretation of the references to color in this figure
legend, the reader is referred to the web version of this article.)

2
Wij = e−D (Li ,Lj )/2σ

// clustering
group L into clusters by NCuts c = {ck : k = 1, . . . , K }
// co-extraction
initialize a collection of feature lines set L
foreach shape Si ∈ S do

Li ← ∅
foreach cluster ck ∈ c do
foreach L ∈ ck do
if d(L, µck ) < σck then
if L ⊂ Si then
Li ← Li ∪ {L}

Fig. 4 shows the results of feature line co-extraction from
clusters. We observe that only the reliable feature lines that are
closer to the center of cluster are accepted. After this procedure, for
each shape we obtain a set of representative feature lines which
are used to induce directional constraints for guiding the quad
meshing.
5. Consistent quadrangulation
Our goal is to automatically generate the quadrilateral layouts
in consistency for a set of shapes from the global parametrization
aligned with the input vector fields. In order to construct a fieldguided and globally smooth conformal parametrization for each
given shape, we need to compute a smooth orientation field on the
surface subject to target directions induced from extracted feature
lines. Similar to the MIQ algorithm [5], our co-quadrangulation

Fig. 4. After grouping the potential feature lines into clusters, we extract the
reliable feature lines for each shape from large clusters, the solid (resp. hollow)
circles represent the accepted (resp. discarded) feature lines.

method consists of two phases: orientation field generation and
quad mesh synthesis by global parametrization, which are detailed
in following two subsections.
5.1. Orientation field generation
In order to compute a smooth cross field, we find the directional
constraints on a subset of faces on a triangular mesh, then we
modify the energy for smoothing the cross field to allow for soft
constraints, following [39].

84

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

Fig. 5. Directional constraints classification for the feature line. (a) directional
constraints are locally estimated on the feature line, where the first and second
directions of the constraints are shown in red and blue arrows respectively. (b) By
applying the clustering, reliable and noisy directional constraints are classified and
shown as solid and dashed arrows respectively. (For interpretation of the references
to color in this figure legend, the reader is referred to the web version of this article.)

Directional constraints. Aiming to compute a smooth cross
field on each shape, we can estimate a set of directional constraints
θˆi for a subset of faces passed by the feature lines. Considering the
smoothness of cross field, directly using the directional constraints
estimated from feature line as a guiding field may lead to suboptimal results. Typical artifacts are noisy directions estimated at local
turning place of feature line, as shown in Fig. 5. In order to find
reliable directional constraints, for each feature line we apply the
K-Means method to group the estimated directions into potential
clusters. The directional constraints belonging to the large clusters
are identified as final reliable constraints. Fig. 5 shows the classification of directional constraints for a feature line.
Constrained field energy. Now we seek a smooth cross field
constrained to the directional constraints on a subset of faces.
Following [40,5], we use the formalism for N-Symmetry direction
field [40] to define a orientation field, i.e. cross field (N = 4). On a
triangle mesh S = (V , E , F ), a discrete cross field is represented
at triangle fi by an angle θi with respect to a local frame. We
associate a constant angle kij and an integer variable pij to an edge
eij separating triangles fi and fj . The angle kij is the rotation of the
reference frame from fi to fj and the period jump pij determines
the additional rotation of the cross field between values on fi and
fj . Smoothness of the field across an edge eij can be expressed as
θi + kij + π2 pij − θj .
Similarly to [39,11], we define the smoothness energy
Esmooth

2


π
= (1 − α)
θi + kij + pij − θj + α
(θi − θˆi )2 (4)
eij ∈E

2

t ∈F

with the second term measuring faithfulness to the constrained
orientation θˆi . Here the parameter α is a trade off between
smoothness and faithfulness to the directional constraints. α = 0
yields the identical results with the standard MIQ, while α = 1
produces the field restricted only to the initial constraints. We have
chosen α = 0.5 for all shape collections tested herein.
We adopt the greedy mixed-integer optimization algorithm [5]
to optimize the cross field with respect to the energy in Eq. (4).
Other than the approach for a single shape, our method takes
the directional constraints in a reliable manner. As a result, it
guarantees that our meshes are constrained to be aligned with
global features that are shared across the collection, without local
disturbances arising in a single shape.
5.2. Quad mesh generation
In order to be able to produce the consistent quad-meshing of
input shapes, we consistently extract the cut graphs by a greedy
algorithm, then adopt the global parametrization method in [5] to
generate the quad meshes in consistency across the collection.

Cut graph co-extraction. In order to compute a proper
parametrization, we need to cut and flatten the mesh into a patch
that is topologically equivalent to a disk. An additional requirement
is that all the singularities of the cross field must lie on the cut
boundaries so as to capture the rotational changes around singular
vertices. Note that in order to align the parametrization domain
together for the shapes in the same class, it is important to ensure
that the boundaries of flatten patches for the shapes are well
aligned in a common domain.
We compute a cut graph spanning the singularities and the surface is cut along it into a topological disk. The resulting parameter
lines are usually independent of this choice and the continuity of
parameter lines can be enforced by transition function along the
cut. In practice we treat

the computation of cut graph for a genus-0 shape as a greedy propagation illustrated on the right. To start with, we choose the singularity (red circle) that has the smallest average distance to other
singularities to initialize the cut graph. Then we add the paths
(black lines) connecting the remaining singularities (blue circles)
to the cut graph by successively applying Dijkstra’s shortest path
algorithm. To ensure the compactness of cut graph, the order of addition of singularity is determined by its geodesic distance to the
cut graph.
To establish the consistent cut graphs for the shape collection,
we need to exploit the relations of cut graphs by means of the
consistent maps ψij : Si → Sj . In order to align the cut boundaries
of the input shapes, we will have to specify the mapping of
singularity from one shape to another. Observing that the shapes
do not necessarily have the same number of singularities across the
collection and the correspondences between their singularities are
also not guaranteed. To ensure the consistency of cut graphs, we
introduce the concept of virtual singularity to define the mapping
of singularity between different shapes. Let Pi and Pj be the set of
singularities for the shape Si and Sj respectively, the mapping of a
singularity pis ∈ Pi from Si to Sj is defined as
mij (pis ) =


p

 jt

if ∃pjt ∈ Pj s.t.
|ψij (pis ) − pjt | < ϵ · avgRadius




otherwise.

ψij (pis )

Here a virtual singularity ψij (pis ) will be proposed for Sj if we cannot
find a proper singularity pjt ∈ Pj corresponding to pis , the parameter ϵ controls the range of proper correspondence between singularities and we have chosen ϵ = 0.1 for all examples tested herein.
It is worth noting that, introducing additional virtual singularities
into the cut graph can allow the alignment of the cut boundaries
and not cause any topological change in resulting quad layouts.
Now we formulate the cut graph co-extraction as a greedy
algorithm where a combinational optimization will be proposed
to balance the compactness of cut graph for each shape and their
alignment across the collection. For each step of the procedure, we
first choose a singularity pis ∈ Pi that is closest to the cut graph Ci
for the shape Si and compute the following compactness energy
Ecompact (pis ) =

N


wij dj (mij (pis ), Cj )

j =1

where wij denotes the alignment weight between the shapes Si and
Sj , dj (p, Cj ) = min{dist(p, vj ), ∀vj ∈ Cj } expresses the distance

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

from p to the cut graph Cj and mij (pis ) is the mapping of singularity
pis from Si to Sj defined before. Then we search for the optimal
singularity pˆis that minimizes the compactness energy and obtain
the corresponding set of singularities {mij (pˆis ) : j = 1, . . . , N }
for the collection. Finally we can update the cut graph for each
shape by adding the path connecting the selected singularity to cut
graph. At the very beginning, the cut graph is empty and need to
be initialized. For the shape Si , the singularity pis ∈ Pi is chosen by
the average distance to the rest singularities Pi \ {pis } instead of the
distance to the cut graph Ci . The complete algorithm for cut graph
co-extraction is detailed in Algorithm 2.

85

Fig. 6. Illustration of cut graph co-extraction for the shape collection. Red circles
represent the first singularity of the cut graph for each shape and hollow circles
denote virtual singularities. (For interpretation of the references to color in this
figure legend, the reader is referred to the web version of this article.)

Algorithm 2: Cut graph co-extraction
input : A shape collection S = {Si : i = 1, . . . , N } associated
with a collection of singularity set
P = {Pi : i = 1, . . . , N }.
output: A set of cut graphs C = {Ci : i = 1, . . . , N }.
k←0
foreach shape Si ⊂ S do
Ci0 ← ∅
Pi0 ← Pi
while P is not empty do
foreach shape Si ∈ S do
choose the singularity pkis ∈ Pik minimize
k
k
Ecompact (pkis ) =
j=1 wij dj (mij (pis ), Cj )
obtain a set of candidate singularities
{mij (pkis ) : j = 1, . . . , N }

N

choose the optimal singularity pˆkis subject to
k
Ecompact
= minpk Ecompact (pkis )
is

obtain a set of optimal singularities

{mij (pˆkis ) : j = 1, . . . , N }
foreach shape Sj ∈ S do

compute a path lkj connecting mij (pkis ) to Cjk
Cjk+1 ← Cjk ∪ lkj
Pjk+1 ← Pjk \ {mij (pkis )}

k←k+1
foreach shape Si ∈ S do
Ci ← Cik
Fig. 7. Consistent quadrangulation for the animal collections. The representative
feature lines of one shape are shown for each collection.

Fig. 6 shows the illustration of cut graph co-extraction for the
shape collection. In the figure, the first singularity for each shape
is marked by red circle and virtual singularities are marked by
hollow circles. We can see that the cut graphs can be well aligned
by introducing virtual singularities during the greedy procedure
even though the correspondences between singularities are not
guaranteed. At the end of the greedy algorithm, we obtain a mesh
patch with disk-like topology for each shape where all the cross
field singularities are located at the boundary, and the boundaries
of all patches are well aligned together due to the alignment of the
cut graphs.
Global parametrization. In the global parametrization, we
assign an (u, v) parameter value to each vertex of the surface
mesh so that its iso-parameter lines on the surface are locally
oriented according to the optimized cross field. Following [5], we
minimize the orientation energy function to seek for the optimal
(u, v) parameter values:
Eorient =



area(fi )(∥h ▽ u − ui ∥2 + ∥h ▽ v − vi ∥2 ).

fi

Here h is a global scaling parameter which controls the edge length
of the resulting quad mesh, the vectors (ui , vi ) are two orthogonal
vectors in fi corresponding to the cross field direction θ and θ + π2 .
Since the cross field is defined only up to rotation by π2 , we need to

specify which one of the four possibilities is picked in each triangle
to satisfy the proper compatibility conditions across each edge in
the surface mesh.
By minimizing the orientation energy, we compute a global
parametrization for each shape within the collection, i.e. a map
from the mesh patch to a disk-shaped parameter domain Ω ⊂ R2 .
Since the mesh patches are well aligned by means of the greedy
algorithm for cut graph co-extraction, it is sufficient to embed
the mesh patches into a common parameter domain. After the
parametrization, we can extract the quad meshes through the
intersections of the iso-lines of the parameter domain for each
shape. As a result of the planar embedding into a common domain
for all shapes, our approach is capable of generating the consistent
quad-meshing results across the entire collection.
6. Results and discussions
To demonstrate the key properties of our approach, we
performed various experiments and comparisons on a range of
collections with highly varied shapes.
Experiments. Fig. 7 shows the quadrangulation results for the
animal collections, such as wolves and cats. For each collection,

86

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

Fig. 8. Quadrangulation results for the human collections. The representative feature lines of one shape for each collection are shown in the left. Although the dynamic
sequence contains large deformations, highly consistent quad meshes are obtained using our approach.

Fig. 9. Quadrangulation results for the shape collections from Princeton Benchmark [41]. The representative feature lines of one shape for each collection are shown in the
left. Although the shape collection contains different representations, our approach can produce the consistent quadrangulations that comply with the global semantics and
respect local geometry fidelity.

we also show the representative feature lines of one shape in the
figure. The figure shows that the quad meshes are consistent with
each other across the collection. The overall alignment of the quad
meshes follows the global structural well and respects the local
geometry for each individual shape. Note that the arrangement of
quads on the leg areas are mostly coincidental with the central axes
of the legs, as well as other relatively semantic parts such as tails.
The examples in Fig. 8 show the quadrangulation results for the
dynamic collections. Despite of the presence of large deformations
among shape collections, the quad layouts maintain the correct
alignment across the collection and naturally comply with the
structural semantics, especially on the arm and leg areas. Note that

the quad elements at the body part are well aligned with the body
centerline, getting closer to the semantic structure of the collection
and ignoring local disturbance of each individual shape.
Thanks to the effectiveness of our feature lines co-extraction,
our algorithm can not only deal with the dynamic sequence of single object, but also handle a collection of different objects from
the same family. We tested our algorithm on the Princeton Benchmark [41] to demonstrate the robustness of our approach with respect to different objects within a collection. The quad-meshing
results for several collections are shown in Figs. 1 and 9. Although
the collection contains different objects with highly variance, our
approach is able to generate quad meshes consistently. Our mesh

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

87

| angle - 90 |

| angle - 90 |

MIQ

Fig. 10. Color-coding of consistency error of the shape of elements in quad meshes
computed with MIQ (left) and our approach (right). Color scale goes from blue to
green to red. (For interpretation of the references to color in this figure legend, the
reader is referred to the web version of this article.)

follows the natural directions guided by the global semantics of the
collection, due to the feature lines being extracted in a way that ensures structural consistency across the whole collection and fulfills
local geometry fidelity of each shape. The representative feature
lines in the figure show how our approach captures the features of
the semantic parts of the shapes naturally.
Comparison. Based on the experimental results, we present the
analysis and comparisons between our algorithm and the standard
MIQ. For a single shape, the quality of quadrangulation is measured
by the following two criteria: (a) the shape of elements, which
measures the absolute difference in degrees between angles of
quads and 90° and (b) mesh distance, which measures the distance
between the input mesh and the quad mesh. As for the consistent
quadrangulation for a shape collection, a third criterion that should
also be considered is: (c) structural consistency, which measures the
consistency of quad layouts across the collection.
In our work, the quality of consistent quadrangulation for a
shape collection is measured as consistency error of quad layouts
among the shapes within the collection. Here we define the consistency error as the residual standard deviation among consistent
quad elements of the shapes. For the sake of consistent and fair
comparison, we generated a large number of corresponding samples for the shapes and computed the consistency error on quad
elements specified by the samples. We have chosen NS = 1000
samples in our experiments.
Fig. 10 shows the consistency error of the shape of elements in
quad meshes computed with MIQ and with our approach. We can
see that our approach performs better than the standard MIQ in a
way that the consistent quad elements of the shapes share similar
qualities. To illustrate the consistency error measured for specific
quads, Fig. 11 shows the plot of the average and consistency error
of the shape of elements on a subset of consistent quads in quad
meshes computed with MIQ (upper) and our method (lower) for
the human collection.
To evaluate the performance of our approach, we computed:

• The average of consistency error: the average of consistency
error of quad layouts across all the sample quads for each
collection.
• The variance of consistency error: the variance of consistency
error of quad layouts across all the sample quads for each
collection.
Figs. 12 and 13 show statistics related to our experiments
on all example sets. In all cases our method performs better
than MIQ, which is no surprising. By exploiting the feature

50
45
40
35
30
25
20
15
10
5
0

50
45
40
35
30
25
20
15
10
5
0

Average of the shape of elements
Correspondence Error of the shape of elements

0

5

10

15
20
Subset of Sample Quad

25

30

35

Our approach
Average of the shape of elements
Correspondence Error of the shape of elements

0

5

10

15
20
Subset of Sample Quad

25

30

35

Fig. 11. Consistency error of shape of elements on a subset of consistent quads in
quad meshes computed with MIQ (upper) and our method (lower) for the human
collection.

Fig. 12. Statistics of consistency error of the shape of elements in the quad
meshes within the collection computed with MIQ (blue) and our method (red). (For
interpretation of the references to color in this figure legend, the reader is referred
to the web version of this article.)

curves and natural semantics in common under consideration of
global structural consistency for the collection, our quad-meshing
features a number of key characteristics and optimizes them using
soft constraints according to their prominence. In order to achieve
the consistency of the final quad meshes across the collection,
we cut and flattened the meshes into well-aligned patches by
extracting the cut graphs coherently and found the consistent
embedding of these well-aligned boundary patches. Thanks to
the key properties mentioned above, our quad meshes have high
consistency with one another.
Parameters. Our algorithm has two major parameters α in constrained vector field generation and ϵ in cut-graph co-extraction.
We set α = 0.5 in Eq. (4) balances smoothness and faithfulness to
the initial cross field. Generally speaking, hard constraints should
be used with care since outlier direction may perturb the orientation field and introduce unnecessary singularities. While using soft
constraints we obtain a more stable behavior even if we include
some outlier directions in the optimization.
The parameter ϵ is to control the range of proper correspondences between singularities: the smaller ϵ , the more virtual
singularities introduced, making alignment of cut graph more

88

M. Meng, Y. He / Computer-Aided Design 70 (2016) 78–88

Fig. 13. Statistics of consistency error of mesh distance in the quad meshes within
the collection computed with MIQ (blue) and our method (red). (For interpretation
of the references to color in this figure legend, the reader is referred to the web
version of this article.)

challenging. On the other hand, large ϵ induces the misalignment
errors in the alignment graph and hereby increase the consistency
error of quad meshes. In our implementation, we set ϵ = 0.1, i.e.,
10% of the model diagonal.
Limitations. The proposed framework has several limitations.
First, the quadrangulation results highly depend on the extracted
feature lines. For noisy models, denoising may be required as
a preprocessing step along with robust feature curve detection.
In the case when we fail to detect important features or
appropriate interrelationships, user assistance may be needed to
retain desirable shape properties. The second limitation comes
from the fact that the consistency measurements include only
the shape element quality and faithfulness (mesh distance) for
surface approximation. It is desired to develop a more advanced
approach based on well-defined and objective metrics, which can
evaluate the consistency of the quad layouts within the shape
collection. Lastly, a key step in our algorithm is to align the cut
graphs consistently and our current implementation is limited to
genus-0 shapes.
7. Conclusion
This paper has presented an approach for consistent quadrangulation of a set of shapes from the same class. By analyzing the
relationships between feature lines, we coherently extract proper
feature lines that serve as directional constraints for quad meshing.
In order to obtain the consistent quad meshes, we have proposed
a greedy algorithm to extract the cut graphs in alignment across
the collection. We have evaluated our approach on various shape
collections and the experimental results have shown that the proposed algorithm can produce remarkably consistent quad meshes
across the set with large variability.
Acknowledgments
We thank the anonymous reviewers for their detailed comments and valuable suggestions. This project was partially
supported by MOE2012-TIF-1-T-016, MOE2013-T2-2-011, and
RG40/12.
References
[1] Alliez P, Cohen-Steiner D, Devillers O, Lévy B, Desbrun M. Anisotropic
polygonal remeshing. ACM Trans Graph 2003;22(3):485–93.
[2] Dong S, Kircher S, Garland M. Harmonic functions for quadrilateral remeshing
of arbitrary manifolds. Comput Aided Geom Design 2005;22(5):392–423.

[3] Kälberer F, Nieser M, Polthier K. Quadcover-surface parameterization using
branched coverings. Comput Graph Forum 2007;26(3):375–84.
[4] Ray N, Li WC, Lévy B, Sheffer A, Alliez P. Periodic global parameterization. ACM
Trans Graph 2006;25(4):1460–85.
[5] Bommes D, Zimmer H, Kobbelt L. Mixed-integer quadrangulation. ACM Trans
Graph 2009;28(3):77:1–77:10.
[6] Tarini M, Puppo E, Panozzo D, Pietroni N, Cignoni P. Simple quad domains
for field aligned mesh parametrization. In: Proc. of SIGGRAPH Asia, 2011,
pp. 142:1–142:12.
[7] Campen M, Bommes D, Kobbelt L. Dual loops meshing: quality quad layouts
on manifolds. ACM Trans Graph 2012;31(4):110:1–110:11.
[8] Bommes D, Campen M, Ebke H-C, Alliez P, Kobbelt L. Integer-grid maps for
reliable quad meshing. ACM Trans Graph 2013;32(4).
[9] Gal R, Sorkine O, Mitra NJ, Cohen-Or D. iWIRES: an analyze-and-edit approach
to shape manipulation. ACM Trans Graph 2009;28(3):33:1–33:10.
[10] Xu W, Wang J, Yin K, Zhou K, van de Panne M, Chen F, Guo B. Joint-aware
manipulation of deformable models. ACM Trans Graph 2009;28(3):35:1–35:9.
[11] Marcias G, Pietroni N, Panozzo D, Puppo E, Sorkine-Hornung O. Animationaware quadrangulation. Comput Graph Forum 2013;32(5).
[12] Bommes D, Lévy B, Pietroni N, Puppo E, Silva C, Tarini M, Zorin D. State of the
art in quad meshing. In: Eurographics STARS. 2012.
[13] Dong S, Bremer P-T, Garland M, Pascucci V, Hart JC. Spectral surface
quadrangulation. In: ACM SIGGRAPH 2006. 2006, p. 1057–66.
[14] Tong Y, Alliez P, Cohen-Steiner D, Desbrun M. Designing quadrangulations
with discrete harmonic forms. In: Proc. of SGP06. 2006, p. 201–10.
[15] Liao T, Xu G, Zhang YJ. Structure-aligned guidance estimation in surface
parameterization using eigenfunction-based cross field. Graph Models 2014;
76(6):691–705.
[16] Hormann K, Lévy B, Sheffer A. Mesh parameterization: Theory and practice. In:
ACM SIGGRAPH 2007 Courses, SIGGRAPH’07. 2007.
[17] Praun E, Hoppe H. Spherical parametrization and remeshing. In: ACM
SIGGRAPH 2003, SIGGRAPH’03. 2003, p. 340–9.
[18] Praun E, Sweldens W, Schröder P. Consistent mesh parameterizations. In: Proc.
of ACM SIGGRAPH 2001. 2001, p. 179–84.
[19] Kraevoy V, Sheffer A. Cross-parameterization and compatible remeshing of 3D
models. ACM Trans Graph 2004;23(3):861–9.
[20] Schreiner J, Asirvatham A, Praun E, Hoppe H. Inter-surface mapping. In: ACM
SIGGRAPH 2004. 2004, p. 870–7.
[21] Kwok T-H, Zhang Y, Wang CC. Constructing common base domain by cues from
Voronoi diagram. Graph Models 2012;74(4):152–63.
[22] Kwok T-H, Wang CC. Domain construction for volumetric crossparameterization. Comput Graph 2014;38:86–96.
[23] Garcia I, Xia J, He Y, Xin S-Q, Patow G. Interactive applications for sketch-based
editable polycube map. IEEE Trans Vis Comput Graphics 2013;19(7):1158–71.
[24] Kwok T-H, Zhang Y, Wang CC. Efficient optimization of common base domains
for cross parameterization. IEEE Trans Vis Comput Graphics 2012;18(10):
1678–92.
[25] Kalogerakis E, Hertzmann A, Singh K. Learning 3D mesh segmentation and
labeling. ACM Trans Graph 2010;29(3):102:1–102:12.
[26] Fisher M, Savva M, Hanrahan P. Characterizing structural relationships in
scenes using graph kernels. In: ACM SIGGRAPH 2011 Papers, SIGGRAPH’11.
2011, p. 34:1–34:12.
[27] Sidi O, van Kaick O, Kleiman Y, Zhang H, Cohen-Or D. Unsupervised cosegmentation of a set of shapes via descriptor-space spectral clustering. ACM
Trans Graph 2011;30(6):126:1–126:10.
[28] Kim VG, Li W, Mitra NJ, DiVerdi S, Funkhouser T. Exploring collections
of 3D models using fuzzy correspondences. ACM Trans Graph 2012;31(4):
54:1–54:11.
[29] Huang Q-X, Zhang G-X, Gao L, Hu S-M, Butscher A, Guibas L. An optimization
approach for extracting and encoding consistent maps in a shape collection.
ACM Trans Graph 2012;31(6):167:1–167:11.
[30] Lowe DG. Object recognition from local scale-invariant features. In: ICCV.
1999, p. 1150–7.
[31] Sun J, Ovsjanikov M, Guibas LJ. A concise and provably informative multi-scale
signature based on heat diffusion. Comput Graph Forum 2009;28(5):1383–92.
[32] Bronstein MM, Kokkinos I. Scale-invariant heat kernel signatures for non-rigid
shape recognition. In: Proc. CVPR. 2010, p. 1704–11.
[33] Bronstein AM, Bronstein MM, Guibas LJ, Ovsjanikov M. Shape google:
Geometric words and expressions for invariant shape retrieval. ACM Trans
Graph 2011;30(1):1:1–1:20.
[34] Bustos B, Keim DA, Saupe D, Schreck T, Vranić DV. Feature-based similarity
search in 3d object databases. ACM Comput Surv 2005;37(4):345–87.
[35] Heider P, Pierre-Pierre A, Li R, Grimm C. Local shape descriptors, a survey and
evaluation. In: Conf. on 3D object retrieval. 2011, p. 49–56.
[36] Hildebrandt K, Polthier K, Wardetzky M. Smooth feature lines on surface
meshes. In: Symposium on geometry processing. 2005, p. 85–90.
[37] Yoshizawa S, Belyaev A, Seidel H-P. Fast and robust detection of crest lines on
meshes. In: Proceedings of SPM05. 2005, p. 227–32.
[38] Shi J, Malik J. Normalized cuts and image segmentation. IEEE Trans Pattern
Anal Mach Intell 1997;22:888–905.
[39] Panozzo D, Lipman Y, Puppo D, Zorin E. Fields on symmetric surfaces. ACM
Trans Graph 2012;31(4):111:1–111:12.
[40] Ray N, Vallet B, Li WC, Lévy B. N-symmetry direction field design. ACM Trans
Graph 2008;27(2):10:1–10:13.
[41] Chen X, Golovinskiy A, Funkhouser T. A benchmark for 3D mesh segmentation.
ACM Trans Graph 2009;28(3):73:1–73:12.

