Neural Networks 71 (2015) 196–203

Contents lists available at ScienceDirect

Neural Networks
journal homepage: www.elsevier.com/locate/neunet

Consensus analysis of networks with time-varying topology and
event-triggered diffusions✩
Yujuan Han a , Wenlian Lu b,c , Tianping Chen d,∗
a

College of Information Engineering, Shanghai Maritime University, Shanghai, People’s Republic of China

b

Centre for Computational Systems Biology, Fudan University, People’s Republic of China

c

School of Mathematical Sciences, Fudan University, People’s Republic of China

d

School of Computer Sciences, Fudan University, People’s Republic of China

article

info

Article history:
Received 22 June 2015
Received in revised form 15 August 2015
Accepted 19 August 2015
Available online 8 September 2015
Keywords:
Consensus
Time-varying topology
Event-triggered algorithm

abstract
This paper studies the consensus problem of networks with time-varying topology. Event-triggered rules
are employed in diffusion coupling terms to reduce the updating load of the coupled system. Two strategies are considered: event-triggered strategy, that each node observes the state information in an instantaneous way, to determine the next triggering event time, and self-triggered strategy, that each node only
needs to observe the state information at the event time to predict the next triggering event time. In each
strategy, two kinds of algorithms are considered: the pull-based algorithm, that the diffusion coupling
term of every node is updated at the latest observations of the neighborhood at its triggered time, and
push-based algorithm, the diffusion coupling term of every node uses the state information of its neighborhood at their latest triggered time. It is proved that if the coupling matrix across time intervals with
length less than some given constant has spanning trees, then the proposed algorithms can realize consensus. Examples with numerical simulation are provided to show the effectiveness of the theoretical results.
© 2015 Elsevier Ltd. All rights reserved.

1. Introduction
In recent years, the consensus problems of multi-agent systems
have been widely studied in Liu, Lu, Chen, and Liu (2011), Lu,
Atay, and Jost (2011), Moreau (2005), Olfati-Saber, Fax, and Murray
(2007), Porfiri and Stilwell (2007), Ren and Beard (2004) and many
others. In network of agents, consensus means that all agents will
converge to some common state. A consensus algorithm is an
interaction rule how agents update their states. Since the network
can be regarded as a graph, the issues can be depicted by the graph
theory. In the most existing literature, the concept of spanning tree
is widely used to describe the communicability between agents in
networks that can guarantee the consensus of system. See Liu et al.
(2011), Lu et al. (2011) and Ren and Beard (2004).

✩ This work is jointly supported by the National Natural Sciences Foundation of
China under Grant Nos. 61273211, 60974015, and 61273309; the Foundation for
the Author of National Excellent Doctoral Dissertation of PR China, No. 200921; the
Shanghai Rising-Star Program (No. 11QA1400400) and China Postdoctoral Science
Foundation, No. 2011M500065.
∗ Corresponding author.
E-mail addresses: yjhan@shmtu.edu.cn (Y. Han), wenlian@fudan.edu.cn
(W. Lu), tchen@fudan.edu.cn (T. Chen).

http://dx.doi.org/10.1016/j.neunet.2015.08.008
0893-6080/© 2015 Elsevier Ltd. All rights reserved.

A closely relating topic is synchronization with linear coupling.
In fact, the consensus can be regarded as a special case of synchronization when the intrinsic function disappears. For example, readers can refer to Lu and Chen (2004, 2007). The results obtained in
these paper can derive those results on consensus directly.
All of the papers mentioned above concern the situation that
each node needs to gather information of its own and neighbors states and update continuously. However, as pointed out in
Åström and Bernhardsson (2002), the event-based sampling technique showed better performance than sampling periodically in
time for some simple systems. Hence, some researchers suggested
that the event-based control algorithms can be utilized to reduce
communication and computation load in networked coupled systems, see Åström and Bernhardsson (2002) and Tabuada (2007),
but maintain control performance, see Dimarogonas, Frazzoli, and
Johansson (2002), Johannesson, Henningsson, and Cervin (2007),
Rabi, Johansson, and Johansson (2008), Seyboth, Dimarogonas, and
Johansson (2013), Tabuada (2007), Wang and Lemmon (2011),
Alderisio (2013), Yi, Lu, and Chen (2014) and Yu and Antsaklis
(2011). Therefore, the event-based control can particularly be suitable for networked systems with limited resources and has attracted wide interests in the scope of distributed control of networked systems. The idea of event-triggered control can be re-

Y. Han et al. / Neural Networks 71 (2015) 196–203

garded as a specific temporal linearization and discretization approach, which has been studied in early papers Lu and Chen (2004,
2007).
For example, in the paper Lu and Chen (2004), the following
algorithm was investigated
xi (t + 1) = f (xi (t )) + ci

m


aij (f (xj (t )))

(1)

j =1

which can be considered as nonlinear consensus algorithm.
As a special case, let f (x(t )) = x(t ) and ci = (tki +1 − tki ), then
xi (tki +1 ) = xi (tki ) + (tki +1 − tki )

m


aij xj (tki )

(2)

j =1

which is just the event triggering (distributed, self triggered) model
for consensus problem, though the term ‘‘event triggering’’ is not
used. In centralized control, the bound for (tki +1 −tki ) = (tk+1 −tk ) to
reach synchronization was given in that paper when the coupling
graph is undirected, too. For the direct graph, see Lu and Chen
(2007).
Recently, Seyboth et al. (2013) considered centralized and
distributed formulation of event-driven strategies for consensus
of multi-agent systems and proposed a self-triggered setup.
Johannesson et al. (2007) and Rabi et al. (2008) studied the
stochastic event-driven strategies. Seyboth et al. (2013) introduced
event-based control strategies for both networks of singleintegrators with time-delay in communication links and networks
of double-integrators.
It is widely known that the movement or/and defaults of the
agents may lead the graph topology changing through time. So, it
is inevitable to study the consensus in a time-varying environment.
In this paper, we employ the event-triggered strategy in coupling
configuration terms to realize consensus in multi-agents systems
with time varying couplings. We consider two strategies: eventtriggered and self-triggered. In the event-triggered strategy, each
node can observe the state information in a instantaneous way; on
the contrary, in self-triggered strategy, each node can only obtain
the state information at the event-triggering time point, which
results in a small cost of monitoring (communication load) but the
triggering events happening more frequently than event-triggered
case, namely higher updating load.
For each strategy, two algorithms are proposed, the pull-based
algorithm and push-based algorithm. In the pull-based algorithm,
the diffusion coupling term at each node uses the information of
its local neighborhood only at the latest time of specific event,
which is triggered by specified criteria derived from the information of its local neighborhood. In other words, once the triggering
criterion of node is satisfied, the diffusion coupling term will be
updated; otherwise these terms are constant between two neighboring event time points. In the push-based algorithm, the diffusion coupling term at each node uses the information of its local
neighborhood at their latest triggered time, in other words, once
one node is triggered, it needs to translate its current information
to its out-coming nodes. And each node is triggered by specified
criteria derived from the distance between its current state and
state at the latest triggered time. For each scenario, it is proved
that the proposed algorithms guarantee the consensus of the timevarying coupled multi-agent systems.
This paper is organized as follows. After formulating the underlying problem in Section 2, the pull-based and push-based algorithms are proposed to guarantee the consensus of the multi-agent
systems by using event-triggered and self-triggered strategies in
Sections 3 and 4 respectively. Simulations are given in Section 5
to verify the theoretical results. Finally, this paper is concluded in
Section 6.

197

2. Preliminaries
2.1. Matrix and graph theories
For a matrix A, Aij denotes the element of A on the ith row and
jth column. A⊤ denotes the transpose of A and As = (A + A⊤ )/2
denotes the symmetry part of a square matrix A. Let E and O denote
the identity matrix and zero matrix with proper dimension, 1 and
0 denote the column vector with each element being 1 and 0
respectively.
A directed graph G consists of a vertex set V (G) = {v1 , . . . , vn },
a directed edge set E (G) ⊆ V (G) × V (G), i.e. an edge is an ordered
pair of vertices in V (G). Ni denotes the neighborhood of the vertex
vi , i.e. Ni = {vj : (vi , vj ) ∈ E (G)}. A (directed) path of length l from
vertex vi to vj , denoted by (vr1 , vr2 , . . . , vrl+1 ), is a sequence of l + 1
distinct vertices vr1 , . . . , vrl+1 with vr1 = vi and vrl+1 = vj such
that (vrk , vrk+1 ) ∈ E (G). The graph G contains a spanning (directed)
tree if there exists a vertex vi such that for all the other vertices vj
there is a directed path from vi to vj , and vi is called the root vertex.
An m × m matrix L is called a Metzler matrix
m with zero row sum
if Lij ≥ 0 holds for any i ̸= j. And let
j=1 Lij = 0 holds for
any i = 1, . . . , m. An m × m matrix L can be associated with a
directed graph G(L) = {V , E } in such a way: (vj , vi ) ∈ E (G(L)) if
and only if Lij > 0. With this correspondence, we also say L contains
a spanning tree if G(L) contains a spanning tree.
An m ×
m matrix A is called a stochastic matrix if Aij ≥ 0 for
m
all i, j and j=1 Aij = 1 for i = 1, . . . , m. A stochastic matrix A is
called scrambling if for any i and j, there exists k such that both Aik
and Ajk are positive.
Consider a network consisting of m agents. Network with a
time-invariant topology means that if one agent can get information from another agent at one time, it can obtain the information
from that agent all the time with the same weight. But the coupling
topology may change in reality, such as some links between agents
may appear or disappear due to disturbances. Therefore, it is necessary to study networks with time-varying coupling topologies.
In this paper, we study the consensus problem in networks with
time-varying topologies.
Different from most of the papers, in which Lyapunov function
is the main tool, the main tool used in this work is the Hajnal
inequality, which was proposed in Hajnal (1976) and Hajnal and
Bartlett (1958). The Hajnal’s inequality describes the compression
of the differences among rows in a stochastic matrix when
multiplied by another stochastic matrix which is scrambling. In
Wolfowitz (1963), it was proved that a scrambling stochastic
matrix could be obtained if a certain number of stochastic matrices
that have spanning trees for their corresponding graphs were
multiplied. So, in most of the papers involving stability analysis of
(2), the sufficient conditions were expressed in terms of spanning
trees in the union graph across time intervals of a given length.
Similar to the concept of δ -digraph proposed in Moreau (2004), we
introduce the following definition.
Definition 1. We say the time-varying graph G(L(t )) has a δ t
spanning tree across time interval [t0 , t1 ) if [ t 1 L(s)ds]δ has a
0

spanning tree. For a matrix L, we define Lδ = [Lδij ] as follows
Lδij =

1,
0,



if Lij ≥ δ;
if Lij ≤ δ.

(3)

In the linearly coupled networks, the dynamics of each agent i
can be described as:
x˙ i (t ) =

m

j =1

Lij (t )[xj (t ) − xi (t )],

i = 1, . . . , m

(4)

198

Y. Han et al. / Neural Networks 71 (2015) 196–203

where xi (t ) ∈ R is the state of agent i, Lij (t ) denotes the coupling
coefficient
from agent j to agent i at time t. Denote Lii (t ) =

− m
L
j=1,j̸=i ij (t ). Then, for any t, L(t ) = [Lij (t )] is a Metzler matrix
with zero row sum. It may be determinant or random. When it
comes to the static topology case, L(t ) = L holds for any time t.
In practice, the coupling matrix is always bounded, which assures
the following assumption hold. Throughout this paper, we suppose
Assumption 1: There exists a positive constant M1 > 0, such
that the elements of coupling matrix satisfy |Lij (t )| ≤ M1 , here
t ≥ t0 , i ̸= j.

here, tki is referred to the event-triggered time point for agent i.
According to the algorithm (5), it can be seen that each agent
updates its control law at its event-triggered time points.
In the push-based algorithm, each agent takes into account latest
information of all its neighbors in its diffusion coupling term. That
is

Definition 2. We say multi-agents system reaches consensus if the
state x(t ) = [x1 (t ), . . . , xm (t )]⊤ satisfies:

where, kj (t )

lim |xi (t ) − xj (t )| = 0,

t →+∞

∀i ̸= j, i, j = 1, . . . , m.

S = x = [x1 , . . . , xm ]⊤ ∈ Rm : xi = xj , i, j = 1, . . . , m .



diam(A) = max ∥Ai − Aj ∥∞ .
i,j

To introduce the Hajnal’s inequality, the scrambling coefficient
which measures the scramblingness of a stochastic matrix is
needed.
Define the scrambling coefficient of a stochastic matrix B = [Bik ]
as
i ,j

min Bik , Bjk .





diam(AB) ≤ (1 − λ(A))diam(B).
Similarly, for any vector x = [x1 , . . . , xn ]⊤ ∈ Rn , we define
diam(x) = max |xi − xj |.
i ,j

From the definition, it is clear that the system realizes consensus if and only if diam(x(t )) → 0 as time goes on. Noting that in (4),
each agent needs to collect information of its own and neighbors’
states and updates them continuously. To reduce the communication and actuation load in the system, event-triggered algorithms
are proposed instead. For each agent, event is triggered by some
criteria. In this paper, we study pull-based and push-based algorithms respectively.
2.2. Model description
In the pull-based algorithm, each agent updates the diffusion
coupling term at its latest event-triggered time point. That is
x˙ i (t ) =

Lij (t )


( )− ( ) ,

xj tki



xi tki

j =1

t ∈ [tki , tki +1 ), i = 1, . . . , m

j

j =1

t ∈ [ , tki +1 ), i = 1, . . . , m
tki

(6)
j

arg minl∈N,t >t j {t − tl }, and arg min is abbreviation of
l

the argument of the minimum, and it returns the point for which
j
the given function attains its minimum value. Thus tk (t ) is the latest

event time of agent j at time t. Hence, for agent i and time t > tki ,
if one of its neighbor, for example, denoted by j, is triggered at
j
t = tk′ +1 (let k′ be the latest event at node j before t), then j
is replaced by

j
xj tk′ +1

(

).

3. Event-triggered strategy
3.1. Pull-based algorithm
Define the state measurement error for algorithm (5) by
zi (t ) =

m


Lij (t ) xj (tki ) − xi (tki ) − xj (t ) + xi (t ) ,



(5)



j =1

t ∈ [ , tki +1 ).
tki

(7)

For each agent i, we define its event-triggered time sequence {tki }
according to the following rule:
tki +1 = max{τ ≥ tki : |zi (τ )| ≤ a exp(−bτ )}

k

Furthermore, we say B is δ -scrambling if and only if λ(B) ≥ δ .
If A, B are stochastic matrices with same dimension, then the
following Hajnal’s inequality holds

m




j

j

Definition 3. Given a matrix A with row vectors A1 , . . . , An , define
the Hajnal diameter of A as





Lij (t ) xj (tk (t ) ) − xi (tki ) ,

transfers its current information to i and xj (tk′ ) in the coupling term

The concept of Hajnal diameter is proposed to measure the
difference of the rows in a stochastic matrix. We extend the Hajnal
diameter to general matrices as follows.

λ(B) = min

m


j

By reaching consensus, we mean that states converge to the
following subspace in Rm :



x˙ i (t ) =

(8)

where a, b are some positive constants.
Before giving the main result, we give the following lemma
which will be used later. Noting that consensus can be seen as a
special case of cluster consensus. Hence, the following lemma can
be directly derived from Lemma 2 in Han, Lu, and Chen (2015).
Lemma 1. Let Φ (t , t0 ) be the solution matrix of system y˙ (t ) =
L(t )y(t ) initialed at time t0 . If the graph G(L(t )) has a δ -spanning
tree across time interval [T1 , T2 ), then Φ (T2 , T1 ) is a stochastic matrix
and it has a δ ′ -spanning tree with δ ′ = min{1, δ}e−(m−1)M1 (T2 −T1 ) .
Moreover, the diagonal elements, Φii (T2 , T1 ) ≥ δ ′ also holds for all
i = 1, . . . , m.
Remark 1. In Wolfowitz (1963), it was proved that a scrambling
stochastic matrix could be obtained if a certain number of stochastic matrices that have spanning trees for their corresponding
graphs were multiplied. More specifically, suppose there are m
stochastic matrices A1 , . . . , Am ∈ Rm , each of which has a δ ′ spanning tree and with diagonal elements larger than δ ′ . Then, the
product of A1 , . . . , Am is η-scrambling with η = (δ ′ )m .
Now, we are in the position to address the main result of this
manuscript.
Theorem 1. If there exist positive constants T > 0, δ > 0 and a time
sequence {Tk } with Tk+1 − Tk < T , k = 0, 1, . . . , such that timevarying graph G(L(t )) has a δ -spanning tree across [Tk , Tk+1 ), then
pull-based algorithm (5) with updating rule (8) will realize consensus
exponentially.

Y. Han et al. / Neural Networks 71 (2015) 196–203

Proof. From (5) and (7), we have

Combining (10), (12), (13), we get
diam (x(t )) ≤ M2 e−min(b,c )t

m

x˙ i (t ) =



Lij (t )[xj (t ) − xi (t )] + zi (t ),

i = 1, . . . , m.

j=1

where M2 =

Let Φ (t , t0 ) be the solution matrix of system y˙ (t ) = L(t )y(t )
initialed at time t0 . Denote x(t ) = [x1 (t ), . . . , xm (t )]⊤ . Hence,
t



x(t ) = Φ (t , t0 )x(t0 ) +

199

Φ (t , s)z (s)ds.

(9)

(14)

2a(1+e(c −b)t0 )+ect0 (c −b)diam(x(t0 ))
. The proof is completed.
(1−η)(c −b)

In the following, we prove that under some assumption, the
Zeno behavior, proposed in Johansson, Egerstedt, Lygeros, and
Sastry (1999), can be excluded, that is, an infinite number of
triggered times cannot happen in a finite time period.

t0

diam(ξ + ζ ) ≤ diam(ξ ) + diam(ζ ).

Theorem 2. Under the assumptions in Theorem 1, the pull-based
algorithm (5) will not exhibit Zeno behavior. Furthermore, if constants
η, T and b satisfy

Hence, the diameter of state x(t ) satisfies



1
− log (1 − η) mT

From the definition of diam(·), for any vectors ξ , ζ ∈ Rm , we have

diam(x(t )) ≤ diam (Φ (t , t0 )x(t0 ))
t





Φ (t , s)z (s)ds .

+ diam

(10)

t0

From Lemma 1, it can be concluded that Φ (Tk+1 , Tk ) has a δ spanning tree. Then, from Remark 1, we conclude that the product
of matrices Φ (Tk+1 , Tk ) with length m is η-scrambling
with η =

(δ ′ )m > 0. Suppose t ∈ [Tn , Tn+1 ) and n = mn m + d, then

with η = (δ ′ )m , δ ′ = min{1, δ}e−(m−1)M1 T , the next inter-event
interval is strictly larger than some positive number, denoted by τ¯ .
Proof. Noting that for t ∈ [tk , tk+1 ),

′

x˙ i (t ) − x˙ j (t ) =

1
1−η

e−c (t −t0 ) .

≤ 2mM1 M2 e−min(b,c )t + 2ae−bt .

zi (t ) =



t
t0

e−c (t −t0 ) diam (x(t0 )) .

(12)

 t


 t


ξ (s)ds = max  ξi (s)ds −
ξj (s)ds
i ,j
t0
t0
 t


≤
max ξi (s) − ξj (s) ds
t0



m




Lij (t )

i,j

tki

≤
=

1−η
2a
1−η

t



e−c (t −s) diam (z (s)) ds

t0
t



t
tki

[2mM1 M2 e−min(b,c )s + 2ae−bs ]ds

i

(16)

i

M3 [e−ctk − e−c (τ +tk ) ] = ae−b(τ +tk ) ,
i

t0

(1 − η)(c − b)



τ ≥ 0.

(17)

(1) If b > c, (17) turns to be

e−c (t −s) e−bs ds

2a

|zi (t )| ≤ mM1

It can be concluded that the next triggered time of node i after tki ,
denoted by tki +1 , should satisfy tki +1 > τ + tki . That is, the next interevent interval of node i after tki is lower bounded by τ . We will
prove that for any given finite time interval [T0 , T1 ], each node’s
triggered times in this interval is finite. According to the magnitude
of b, c, we separate the following proof into the following two
parts.

t0

1

t ∈ [tki , tki +1 ).

Denote M3 = mM1 (2mM1 M2 + 2a)/ min(b, c ). Then from (15), we
have

i


 t
Φ (t , s)z (s)ds ≤
diam (Φ (t , s)z (s)) ds
≤

[˙xi (s) − x˙ j (s)]ds,

M3 [e−min(b,c )tk − e−min(b,c )(τ +tk ) ] = ae−b(τ +tk ) ,

diam(ξ (s))ds.

t0

t

From scheme of the event-triggered algorithm, we get that node
i will not trigger until |zi (t )| = ae−bt holds, t > tki . Suppose τ
satisfies

By the condition |zi (t )| ≤ a exp(−bt ) and (11), we have
t



i

t0





≤ M3 [e−min(b,c )tk − e−min(b,c )t ].

t

=

diam

Lij (t ) xj (tki ) − xi (tki ) − xj (t ) + xi (t )

j =1

(11)

From the definition of Hajnal diameter, we conclude that for any
vector-valued function ξ (t ) ∈ Rm ,
diam

m


j =1

1−η

(15)

From the definition of zi (t ), it can be seen that

Similarly, we have
diam (Φ (t , t0 )x(t0 )) ≤

Ljl (t )[xl (t ) − xj (t )] − zj (t ).

|˙xi (t ) − x˙ j (t )| ≤ 2mM1 diam(x(t )) + 2ae−bt

=
1

m


−

Combining with the inequality (14), it can be concluded that



0
n
≤ (1 − η)⌊ m ⌋ diam(E ) ≤ (1 − η) mT
(t −t0 )
1 
1
≤
(1 − η) mT
.
1−η


1
Denote c − log (1 − η) mT . Hence, we have

diam (Φ (t , t0 )) ≤

Lij (t )[xj (t ) − xi (t )] + zi (t )

l =1

= diam (Φ (t , Tn )Φ (Tn , Tn−1 ) · · · Φ (T1 , T0 )Φ (T0 , t ))
t −t

m

j=1

diam (Φ (t , t0 ))


c≥b

[e−bt − e−ct e(c −b)t0 ].
(13)

Multiply e
get

i

(ctki +bτ )

i

τ ≥ 0.

on both sides of the above equality, we can

M3 [ebτ − e(b−c )τ ] = ae(c −b)tk .
i

(18)

200

Y. Han et al. / Neural Networks 71 (2015) 196–203

Then the next inter-event interval of node i after tki is lower
bounded by τ . For any tki , denote the solution of (18) by

τ (tki ). Notice that the term ae(c −b)tk on right hand side of (18)
decreases as tki increases, while the term M3 [ebτ − e(b−c )τ ]
on the left hand side increases as τ increase. Therefore, as
the triggered time tki increases, τ (tki ) decreases. Given a time
interval [T0 , T1 ], the next triggered time of node i after T1
i

should be tki (T )+1 . From the above analysis, one can get that
i 1
the next inter-event interval after tki (T )+1 is lower bounded by

τ(

tki (T )+1
i 1

i

)>

) >
is longer
τ(
triggered times of node i in [T0 , T1 ] is finite. The arbitrary choice
of i leads to the absence of Zeno behavior.
(2) If b ≤ c, from (14), we have that
diam (x(t )) ≤ M2 e−bt .

(19)

Analogy to the analysis of case (1), we have that the next
triggered time of node i after tki , denoted by tki +1 , should satisfy
tki +1 > tki + τ¯ with τ¯ satisfying
M3 [e

−b(τ¯ +tki )

−e

−b(τ¯ +tki )

] = ae

,

In the event-triggered strategy, the triggering event rules (5)
and (6) demand the instantaneous states after tki . In comparison, in
the self-triggered strategy, each agent obtains its neighbors’ states
only at some time points. And the next triggered time point tki +1 of
observing state information only depends on the local states at tki .
4.1. Pull-based algorithm

1

0. Hence, the inter-event intervals before tki (T )+1
i 1
0, which implies that the event
than tki (T )+1
i 1

−btki

4. Self-triggered strategy

τ > 0.

(20)

Let

θ (t ) =
i
k

1
b


log

a
M3

Lij (t ) xj (tki ) − xi (tki ) ,



t ∈ [tki , tki +1 )

hence, x˙ i (t ) = θki (t ), t ∈ [tki , tki +1 ) and
zi (t ) =



Lij (t ) xj (tki ) − xi (tki ) − xj (t ) + xi (t )





j̸=i

=−



Lij (t )

j̸=i

=−



Lij (t )

j̸=i


+1



j̸=i

One can check that

τ¯ =



t




tki

x˙ j (s) − x˙ i (s) ds

 t
tki




θkj j (s) (s) − θki (s) ds,

t ∈ [tki , tki +1 ).

Based on the event-triggered rule (8), we have the following updating rule for pull-based algorithm with self-triggered strategy:

is the solution of Eq. (20), which implies that the next interevent time interval of node i is lower bounded by τ¯ . From the
arbitrary choice of i, we can conclude
 that the next inter-event
interval is strictly longer than

1
b

log

a
M3

+1 .

3.2. Push-based algorithm

tki +1 = tki + ξki ,

(24)



ξki = max τ > 0 :
Lij (τ + tki )
j̸=i



 τ +tki 
 


j
−b(τ +tki )
i
.
θkj (s) (s) − θk (s) ds ≤ ae
×

 ti

(25)

k

Define the state measurement error for algorithm (6) by
ei (t ) = xi (tki i (t ) ) − xi (t ).

(21)
tki

For each agent i, we define its event-triggered time sequence { }
by the following rule:
tki +1

= max{τ ≥

tki

: |ei (t )| ≤ a exp(−bτ )}.

(22)

4.2. Push-based algorithm
Analogous to the definition of θki (t ) in Section 4.1, we define

ϑki (t ) =



j

Lij (t )[xj (tk (t ) ) − xi (tki )],
j

Form (6) and (21), we can write the push-based algorithm in the
following compact form:

Then, we have

x˙ (t ) = L(t )[x(t ) + e(t )]

ei (t ) = xi (tki i (t ) ) − xi (t ) =

(23)

where x(t ) = [x1 (t ), . . . , xm (t )]⊤ and e(t ) = [e1 (t ), . . . , em (t )]⊤ .
Analogous to the proof in Theorem 1, we get the solution of (23)
has the following form:
x(t ) = Φ (t , t0 )x(t0 ) +



t ∈ [tki , tki +1 ).

j̸=i



t

tki (t )
i

x˙ i (s)ds =



t
tki (t )
i

ϑki (s)ds.

Based on the event-triggered rule (22), we have the following updating rule for push-based algorithm with self-triggered strategy:

t

Φ (t , s)L(s)e(s)ds.

tki +1 = tki + ξki ,

t0

(26)




 τ +tki

i


ξki = max τ > 0 : 
ϑki (s)ds ≤ ae−b(τ +tk ) .
 ti



Noting that the elements of L(t ) are bounded, we can get that

∥L(t )e(t )∥ ≤ a1 exp(−bt )

(27)

k

holds, here a1 is some positive constant.
Similar to Theorems 1 and 2, we have the following theorem for
the push-based algorithm.
Theorem 3. If there exists positive constants T > 0, δ > 0 and a
time sequence {Tk } with Tk+1 − Tk < T , k = 0, 1, . . . , such that
time-varying graph G(L(t )) has a δ -spanning tree across [Tk , Tk+1 ),
then push-based algorithm (6) with updating rule (22)

 will realize
1

consensus without Zeno behavior. Moreover, if − log (1 − η) mT

≥

b holds, the next inter-event interval is strictly longer than some
positive number.

Then, we have the following theorem for self-triggered strategy.
Theorem 4. If there exists positive constants T > 0, δ > 0 and a
time sequence {Tk } with Tk+1 − Tk < T , k = 0, 1, . . . , such that
time-varying graph G(L(t )) has a δ -spanning tree across [Tk , Tk+1 ),
then pull-based algorithm (5) with updating rule (24) and (25), pushbased (6) with updating rule (26) and (27) will realize consensus
exponentially. More specifically, the triggering time points tki +1 are
picked by the following scheme,
1. Initialization: t0i = 0, i = 1, . . . , m;
2. At t = tki , node i obtains ξki by the rule (25) or (27);

Y. Han et al. / Neural Networks 71 (2015) 196–203

201

Fig. 1. The graph topology.

3. (Pull-based case) At tki < t < tki + ξki , if one of its neighbors, for
j

example, denoted by j, is triggered at time t = tk′ +1 (let k′ be the
latest event at node j before t), then j transfers its current updating
j
law, θk′ +1 (t ) to node i, and the rule (25) is updated by replacing
j

j

the diffusion term from node j, θk′ (s) by θk′ +1 (s), and tki by t. And,
go to Step 2;
3′ (Push-based case) At tki < t < tki + ξki , if one of its neighbors,

Fig. 2. The dynamics of nodes in pull-based algorithm (5) with event-triggered
strategy.

j

for example, denoted by j, is triggered at time t = tk′ +1 (let k′ be
the latest event at node j before t), then j transfers its current state,
j
xj (tk′ +1 ) to node i, and the rule (27) is updated by replacing tki by
t. And, go to Step 2;
4. An event is triggered at node i by updating the state information in
(5) (or (6)) from tki by tki +1 .
Similar to the pattern in Theorem 2, the absence of Zeno
behavior can be given in pull-based and push-based algorithms
with self-triggered strategy.
Theorem 5. Suppose conditions in Theorem 1 are satisfied, then pullbased algorithm (5) with updating rule (24), (25) and push-based
algorithm with updating
 (27) will not exhibit Zeno behavior.
 rule (26),
1

Moreover, if − log (1 − η) mT

≥ b holds, the next inter-event

interval is strictly longer than some positive number.
5. Numerical example
In this section, we give two numerical simulation to verify the
validity of our theory. Suppose there are 9 nodes and the graph
topology is varying from the topologies given in Fig. 1. Denote
{ti }+∞
ti = ti+1 − ti the dwell
i=1 the time switching sequence and
time before next switching. For any time t ∈ [tk−1 , tk ), if j is a
neighbor of i, take Lij (t ) = sin

2π(t −tk−1 )
, otherwise Lij
tk −tk−1

Fig. 3. The dynamics of nodes in push-based algorithm (6) with event-triggered
strategy.

(t ) = 0. Here,

we assume the dwell time tk , t = 0, 1, 2, . . . are independent
and chosen randomly in (0, 1). Hence, the coupling matrix is
varying and its elements are always less than 1. The coefficients
in updating rules (8), (22), (25) and (27) are picked as a = 0.5,
b = 0.2. Randomly choose the initials of all nodes. The ODEs (5)
and (6) are numerically solved by the Euler approach with time
step 0.001 (s) and the time duration of the numerical simulations
is [0, 40] (s).
5.1. Event-triggered strategy
Fig. 2 shows the dynamics of 9 nodes in pull-based algorithm,
while the dynamics of nodes in push-based algorithm is shown in
Fig. 3. It can be seen from Figs. 2, 3 that both of these two algorithms
can realize consensus. Further, define the difference among states
by

(x) = max |xi − xj |.

Fig. 4. The dynamics of measure (x(t )) of pull-based, push-based algorithm with
event-triggered strategy and system with continuous updating.

5.2. Self-triggered strategy

i,j

The dynamics of (x(t )) in pull-based algorithm, push-based algorithm and system with continuous updating are plotted in Fig. 4,
which shows that the convergence rate of these three algorithms
are close. At last, we plot the triggered events of updating the diffusion terms in pull-based and push-based algorithms in Fig. 5.

Fig. 6 shows the dynamics of 9 nodes in pull-based algorithm,
while the dynamics of nodes in push-based algorithm is shown in
Fig. 7. It can be seen from Figs. 6, 7 that both of these two algorithms
can realize consensus. The dynamics of (x(t )) in pull-based algorithm, push-based algorithm and system with continuous updating

202

Y. Han et al. / Neural Networks 71 (2015) 196–203

Fig. 5. Histogram of triggering times of each node in [0, 40] (s).

Fig. 6. The dynamics of nodes in pull-based algorithm (5) with self triggered
strategy.

Fig. 7. The dynamics of nodes in push-based algorithm (6) with self triggered
strategy.

Fig. 8. The dynamics of measure (x(t )) of pull-based, push-based algorithms with
self triggered strategy and system with continuous updating.

are plotted in Fig. 8, which shows that the convergence rate of these
three algorithms are close. At last, in Fig. 9, we plot the triggered
events of updating the diffusion terms in [0, 40] (s) in pull-based
and push-based algorithms.
Furthermore, as shown in Figs. 5, 9, the triggered events of updating the diffusion terms in the self triggered strategy is more
than the event-triggered strategy.
6. Conclusion
In this paper, the event-triggered configurations are employed
to realize consensus in multi-agent systems with time-varying
topology, towards reducing communication and computation
loads. We consider two triggering strategies. For event-triggered
strategy, each node observes the state information in an instantaneous way to determine the next triggering even time for updating
state information. In comparison, for self-triggered strategy, each
node only observes the state information at some event triggering time to predict the next triggering even time for updating state
information. In each strategy, two algorithms are proposed: pullbased algorithm, that the diffusion coupling term of one node is
updated once an event for this node is triggered, and push-based
algorithm, that the diffusion coupling term of each node is composed of the state information of its neighbors at their latest triggered time. Event triggering criteria are derived for each node that
can be computed in a parallel way. For all scenarios, it is proved that

Fig. 9. Histogram of triggering times of each node in [0, 40] (s).

if the system with persistent diffusion coupling can realize consensus, then all these algorithms can realize consensus, and Zeno behaviors are excluded in some cases. Numerical examples are presented to illustrate the theoretical results.

Y. Han et al. / Neural Networks 71 (2015) 196–203

References
Alderisio, F. (2013). Pinning control of networks: an event-triggered approach. (Master
thesis)
Åström, K. J., & Bernhardsson, B. (2002). Comparison of Riemann and Lebesgue
sampling for first order stochastic systems. In Proceedings of the 41st IEEE
conference on decision and control, Vol. 2 (pp. 2011–2016).
Dimarogonas, D. V., Frazzoli, E., & Johansson, K. H. (2002). Distributed eventtriggered control for multi-agent systems. IEEE Transactions on Automatic
Control, 57(5), 1291–1297.
Hajnal, J. (1976). On products of nonnegative matrices. Mathematical Proceedings of
the Cambridge Philosophical Society, 79(03), 521–530.
Hajnal, J., & Bartlett, M. S. (1958). Weak ergodicity in non-homogeneous Markov
chains. Mathematical Proceedings of the Cambridge Philosophical Society, 54(02),
233–246.
Han, Y., Lu, W., & Chen, T. (2015). Achieving cluster consensus in continuoustime networks of multi-agents with inter-cluster non-identical inputs. IEEE
Transactions on Automatic Control, 60(3), 793–798.
Johannesson, E., Henningsson, T., & Cervin, A. (2007). Sporadic control of first-order
linear stochastic systems. In Hybrid systems: computation and control, Vol. 4416
(pp. 301–314).
Johansson, K. H., Egerstedt, M., Lygeros, J., & Sastry, S. S. (1999). On the
regularization of zeno hybrid automata. Systems & Control Letters, 38(3),
141–150.
Liu, B., Lu, W., Chen, T., & Liu, B. (2011). Consensus in networks of multiagents with
switching topologies modeled as adapted stochastic processes. SIAM Journal on
Control and Optimization, 49(1), 227–253.
Lu, W., Atay, F., & Jost, J. (2011). Consensus and synchronization in discrete-time
networks of multi-agents with stochastically switching topologies and time
delays. Networks and Heterogeous Media, 6, 329–349.
Lu, W., & Chen, T. (2004). Synchronization analysis of linearly coupled networks of
discrete time systems. Physica D: Nonlinear Phenomena, 198(1), 148–168.

203

Lu, W., & Chen, T. (2007). Global synchronization of discrete-time dynamical
network with a directed graph. IEEE Transactions on Circuits and Systems II:
Express Briefs, 54(2), 136–140.
Moreau, L. (2004). Stability of continuous-time distributed consensus algorithms.
In Proceedings of 43th IEEE conference on decision control, Vol. 4 (pp. 3998–4003).
Moreau, L. (2005). Stability of multiagent systems with time-dependent communication links. IEEE Transactions on Automatic Control, 50(2), 169–182.
Olfati-Saber, R., Fax, J. A., & Murray, R. M. (2007). Consensus and cooperation in
networked multi-agent systems. Proceedings of the IEEE, 95(1), 215–233.
Porfiri, M., & Stilwell, D. J. (2007). Consensus seeking over random weighted
directed graphs. IEEE Transactions on Automatic Control, 52(9), 1767–1773.
Rabi, M., Johansson, K. H., & Johansson, M. (2008). Optimal stopping for eventtriggered sensing and actuation. In Proceedings of 47th IEEE conference on
decision and control (pp. 3607–3612).
Ren, W., & Beard, R. W. (2004). Consensus of information under dynamically
changing interaction topologies. In American control conference, proceedings of
the IEEE, Vol. 6 (pp. 4939–4944).
Seyboth, G. S., Dimarogonas, D. V., & Johansson, K. H. (2013). Event-based
broadcasting for multi-agent average consensus. Automatica, 49(1), 245–252.
Tabuada, P. (2007). Event-triggered real-time scheduling of stabilizing control
tasks. IEEE Transactions on Automatic Control, 52(9), 1680–1685.
Wang, X., & Lemmon, M. D. (2011). Event-triggering in distributed networked
control systems. IEEE Transactions on Automatic Control, 56(3), 586–601.
Wolfowitz, J. (1963). Products of indecomposable, aperiodic, stochastic matrices.
Proceedings of the American Mathematical Society, 14(5), 733–737.
Yi, X., Lu, W., & Chen, T. (2014). Event-triggered consensus for multi-agent systems
with asymmetric and reducible topologies. arXiv:1407.1377.
Yu, H., & Antsaklis, P.J. (2011). Output synchronization of multi-agent systems with
event-driven communication: communication delay and signal quantization.
ISIS: 001.

