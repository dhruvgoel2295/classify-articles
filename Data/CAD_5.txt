Computer-Aided Design 43 (2011) 1341–1349

Contents lists available at SciVerse ScienceDirect

Computer-Aided Design
journal homepage: www.elsevier.com/locate/cad

Triangular bubble spline surfaces
Mario Kapl a,∗ , Marek Byrtus b , Bert Jüttler a
a

Institute of Applied Geometry, Johannes Kepler University, Linz, Austria

b

Department of Mathematics, University of West Bohemia, Plzeň, Czech Republic

article

info

Keywords:
Gn -surface
Triangular bubble patch
Network of compatible surface strips
Gordon–Coons interpolation for triangles

abstract
We present a new method for generating a Gn -surface from a triangular network of compatible surface
strips. The compatible surface strips are given by a network of polynomial curves with an associated
implicitly defined surface, which fulfill certain compatibility conditions. Our construction is based on a
new concept, called bubble patches, to represent the single surface patches. The compatible surface strips
provide a simple Gn -condition between two neighboring bubble patches, which are used to construct
surface patches, connected with Gn -continuity. For n ≤ 2, we describe the obtained Gn -condition in detail.
It can be generalized to any n ≥ 3. The construction of a single surface patch is based on Gordon–Coons
interpolation for triangles.
Our method is a simple local construction scheme, which works uniformly for vertices of arbitrary
valency. The resulting surface is a piecewise rational surface, which interpolates the given network of
polynomial curves. Several examples of G0 , G1 and G2 -surfaces are presented, which have been generated
by using our method. The obtained surfaces are visualized with reflection lines to demonstrate the order
of smoothness.
© 2011 Elsevier Ltd. Open access under CC BY-NC-ND license.

1. Introduction
The present paper describes a new methodology for generating
a Gn -surface from a triangular mesh given by a network of curves
with an associated implicitly defined surface, called compatible
surface strips. Our method is a multi-patch scheme, which is one
of the main approaches for constructing a smooth surface from a
triangular or quadrilateral mesh (cf. [1,2]). The fundamental idea of
this approach is the construction of single surface patches, pieced
together with Gn -continuity, which define the desired Gn -surface.
A survey of this concept is presented in [3]. The amount of existing
literature on this topic is large; some references are [4–10].
Based on the multi-patch approach, several methods for constructing a Gn -surface, which interpolates a given network of curves,
have been developed (cf. [11–14]). In general, a mesh of curves has
to fulfill certain compatibility conditions, especially at the vertices,
to be feasible for Gn -interpolation. For instance, [15,16] describe
geometric constraints on a network of curves which have to be satisfied for the case of G1 and G2 -smooth surfaces.
A method for generating a smooth triangular (rectangular) surface from given three triangular (four rectangular) surface patches
is presented in [17,18]. The construction is based on a generalization of the Gordon–Coons interpolation.

∗

Corresponding author. Tel.: +43 73224684087.
E-mail addresses: mario.kapl@jku.at (M. Kapl), byrtus@kma.zcu.cz (M. Byrtus),
bert.juettler@jku.at (B. Jüttler).
0010-4485 © 2011 Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.cad.2011.08.021

In [19], Hahn describes an algorithm for filling k-sided polygonal holes with quadrilateral surface patches, meeting at a common vertex. The single surface patches are generated with the help
of Gordon–Coons interpolation in such a way that they are joined
with Gn -continuity. The main difference to our approach consists
in the fact, that Hahn’s construction uses an explicitly constructed
diffeomorphism between neighboring patches in order to satisfy
the Gn -conditions. Consequently, the construction of a single patch
depends on the neighboring patches. The choice of the Hermite
boundary data for one edge defines already the data for all other
edges. Moreover, the construction is not perfectly symmetric, since
the cross boundary derivatives are always specified on one side of
the edges.
The novelty of our method consists in the use of a network of
compatible surface strips instead of a network of curves. Starting
from a triangular network of compatible surface strips, we generate a triangular spline surface with Gn -continuity, interpolating the
given curves of the compatible surface strips. Moreover, we do not
need to specify the diffeomorphism between neighboring patches,
since the Gn -conditions are specified as contact between implicit
and parametric surfaces.
Our method is based on a new type of surface patches, called
bubble patches, for representing the individual surfaces. The use
of these surface patches provides a simple and natural way to
define free-form surfaces over triangular meshes and possesses
several advantages. The construction of a single patch is simple
and independent of the neighboring patches. In addition, it works

1342

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

uniformly for triangular meshes with vertices of arbitrary valency.
Consequently, modifications of the connectivity of the mesh only
affect those patches that are actually modified. The resulting
surfaces are piecewise rational with Gn -continuity.
The remainder of the paper is organized as follows. In Sections 2
and 3 we introduce some basic definitions. In particular, we introduce the idea of a triangular network of compatible surface
strips, which is a network of polynomial curves with an associated
implicitly defined surface, fulfilling certain compatibility conditions. A possible construction of a suitable network is presented in
Appendix B.
Section 4 describes a new methodology, called bubble patches,
for representing triangular surface patches. In Section 5 we use
the compatible surface strips to describe a simple Gn -condition
between two bubble patches. This provides a simple method to
generate Hermite boundary data of the patches, which guarantees
Gn -continuity between two neighboring patches.
Section 6 describes the construction of C n -bubble patches by
using Gordon–Coons interpolation for triangles. This interpolation
scheme is a well known tool for generating a smooth function,
interpolating the given Hermite boundary data and is summarized
in Appendix A. Section 7 presents several examples of generated
G0 , G1 and G2 -surfaces and verifies their smoothness with the help
of reflection lines. Finally, we conclude the paper.
2. Surface strips
We explain the concept of a surface strip of order n along
a curve, which is a standard concept in classical differential
geometry.
Definition 1. Let p : [0, 1] → R3 a smooth parametric curve. A
surface strip of order n along the curve p is as an equivalence class
of all surfaces through the curve p having a contact of order n along
this curve.
More precisely, we describe a surface strip of order n along the
curve p, depending on a parametric or implicit representation of
the surfaces, as follows.

• Parametric representation of the surfaces: a surface strip of order
n ≤ 2 is an equivalence class of all parametric surfaces
containing the curve p (n = 0), having the same tangent planes
(n = 1) and the same normal curvatures (n = 2) along the
curve p.
A surface strip of order n = 0 along the curve p is simply described by the curve p. A surface strip of order n = 1 is the curve
with associated tangent planes. These planes can be described
by specifying the first derivative vector of the parametric surfaces across the given curve (the first cross-boundary derivative).
A surface strip of order n = 2 is the curve with associated
tangent planes and curvature information. The curvature information can be described by specifying the second derivative
vector of the parametric surfaces across the given curve.
• Implicit representation of the surfaces: a surface strip of order n
is an equivalence of all implicitly defined surfaces containing
the curve p (n = 0), having – possibly after a rescaling of the
surfaces – the same gradients (n = 1) and the same Hessian
matrices (n = 2) along the curve p.
A surface strip of order n = 0 along the curve p is simply
the curve p. A surface strip of order n = 1 is the curve with
associated gradient information along it, specifying the tangent
plane. A surface strip of order n = 2 is the curve with associated
gradient information and Hessian matrices along the curve.
For both representations of the surfaces, a surface strip of order
n along the curve p can be seen as the curve p with the truncated
Taylor expansions of order n of the parametric/implicit surfaces
along the curve. Clearly, the truncated Taylor expansions have to
satisfy certain compatibility conditions for the curve.

In the case of parametric surfaces, the derivatives of the surfaces
along the given curve have to agree with the corresponding derivatives of the curve, and the mixed derivatives of the surfaces have to
agree with the corresponding derivatives of the previously specified cross-boundary derivatives. Thus, for each order of smoothness, one additional vector field of cross-boundary derivatives can
be specified.
Similar compatibility conditions are presented in the case of
strips defined by implicitly defined surfaces. For instance, in the
case n = 1, the specified gradient vectors of the implicitly
defined surface have to be orthogonal to the tangents of the curve.
Similar conditions can be derived for higher values of n, simply by
differentiating the composition of the parametric representations
of the curve and the implicitly defined surface through it with
respect to the curve parameter.
3. Triangular network of compatible surface strips
Let n ∈ Z+
0 and let M be a triangular mesh, given by vertices
v ∈ V and edges e = (v, w) ∈ E with v, w ∈ V , where V is the
vertex set and E is the edge set of the mesh. In addition, we consider
a smooth implicitly defined surface F = {z ∈ R3 : f (z) = 0}
satisfying f (v) = 0 for v ∈ V .
For each edge e = (v, w) of the mesh, we consider a boundary
curve pe : [0, 1] → R3 with pe (0) = v and pe (1) = w of the form

˜ e (t ),
pe (t ) = L˜ e (t ) + h˜ e (t )N

(1)

˜ e are the linear interpolants
where L˜ e and N
L˜ e (t ) = (1 − t )v + tw
of the vertices and

˜ e (t ) = (1 − t )(∇ f )(v) + t (∇ f )(w),
N
of the associated normals, respectively. Moreover, the function
h˜ e : [0, 1] → [0, 1], which is assumed to be a polynomial function
satisfying h˜ e (0) = h˜ e (1) = 0, specifies the deviation of the mesh
from the corresponding edge of the mesh.
Clearly, the curves of this form are fairly special, since they have
to be contained in the bi-linear ruled surfaces that are generated
by the linear interpolants of points and normals. We consider this
special class of curves only, in order to be compatible with the
triangular bubble patches which will be introduced in the next
section.
We will construct the boundary curves and the implicitly
defined surface F such that the surface contains the boundary curve
pe , i.e.
f (pe (t )) = 0
for t ∈ [0, 1]. In order to construct a Gn -smooth interpolating
bubble spline surface we need to evaluate the first n derivatives
of F along the boundary. Consequently, we do not need to have a
closed-form representation of f at all points in R3 . Instead, we only
specify how to evaluate the derivatives of F along the curve. This
can be done in such a way that the surface F is compatible with the
network of curves.
The curve pe with the implicitly defined surface F – which is
represented by its truncated Taylor expansion of order n at all
points of the curve – is referred to as a compatible surface strip
of order n for the edge e, and the network of boundary curves pe
with the implicitly defined surface is called a network of compatible
surface strips. More precisely, the network of compatible surface
strips for n ≤ 2 can be interpreted as follows.

• Case n = 0: it is simply the network of boundary curves.
• Case n = 1: it is the network of boundary curves with the
associated gradients of the function f along the curves.

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

Fig. 1. The boundary curves of a bubble patch on a triangle with given vertices and
normals.

• Case n = 2: it is the network of boundary curves with the
associated gradients and Hessian matrices of the function f
along the curves.
A construction leading to a network of compatible surface strips
is described in Appendix B.
4. Triangular bubble patches
We introduce a new concept, called bubble patches, for representing surface patches on triangles with given vertices and normals. This provides a simple and natural way to obtain free-form
surfaces from triangular meshes.
Let T be the standard domain triangle defined by
T = {(u, v)|(u, v) ∈ [0, 1] ; u + v ≤ 1}
2

with the vertices v1 = (0, 1), v2 = (1, 0) and v3 = (0, 0).
Definition 2. Let T be a triangle of M with the vertices v, w, x ∈
V , connected by the edges (v, w), (v, x), (x, w) ∈ E, and the
corresponding normals nv , nw , nx ; see Fig. 1. We define a surface
B : T → R3 on the triangle T as follows
B(u, v) = L(u, v) + h(u, v)N(u, v),

(2)

where L and N are linear interpolants, given by
L(u, v) = (1 − u − v)v + uw + v x
and
N(u, v) = (1 − u − v)nv + unw + v nx ,
and h is a scalar-valued function. Moreover we require that
B(0, 0) = v, B(1, 0) = w, and B(0, 1) = x which implies that
h(0, 0) = h(1, 0) = h(0, 1) = 0. The function B is referred to as
a bubble patch (on the triangle T ) and the function h is called the
bubble function (on the triangle T ).
In our case, where the construction starts with a network of
compatible surface strips, the normals nv , nw and nx are given by
the gradients of the implicitly defined surface, evaluated at the
vertices,
nv = (∇ f )(v),

nw = (∇ f )(w) and nx = (∇ f )(x),

respectively. An example of a bubble patch on a triangle is shown
in Fig. 1.
A bubble patch B is generated by selecting points on a special
2-parametric family of lines, see Fig. 2. These lines are obtained
by combining the linear parametrization of the triangle with
the linear interpolation of the normal vectors at the vertices.
Consequently, the parametrization of the surface is uniquely
determined by this family of lines.
The regularity of a bubble patch can also be guaranteed with the
help of this parametrization. If the three boundary normals do not

1343

Fig. 2. A 2-parametric family of lines defines the bubble patch.

deviate too much from the normal of the triangle, and if the values
of the bubble function are not too large, then the bubble patch will
be regular.
Bubble patches are in close relation to the underlying triangular
mesh. There is a one-to-one correspondence between the points
of the mesh and the points on the surface. In addition, it is easy to
bound the distance. The distance between a bubble patch B and the
corresponding triangle T of the mesh M can be bounded by
max |h(u, v)| ‖N(u, v)‖.

(u,v)∈T

5. Strip-compatible bubble patches
We use a network of compatible surface strips to describe a
simple construction for a Gn -smooth spline surface composed of
triangular bubble patches. The idea is to construct bubble patches
which have a contact of order n with the implicitly defined surface
F along the boundary curves. This provides a simple method to
generate Hermite boundary data



∂i
 ,
h
(
u
,
v)

i
∂v
v=0



∂i

h
(
u
,
v)

i
∂u
u =0

(3)

and



∂i
,
h(u, v)
∂v i
v=1−u



∂i
h(u, v)
∂ ui
u=1−v

(4)

for i ∈ {0, . . . , n}. By interpolating these data we are then able to
guarantee Gn -continuity between neighboring bubble patches.
Our construction of a Gn -smooth spline surface consists of the
following two steps. At first we generate for each triangle Hermite
boundary data (3) and (4) of the bubble function h. This step is
described in the remainder of this section. In the second step we
construct the single bubble patches by applying Gordon–Coons interpolation to the generated Hermite boundary data; see Section 6.
Now we describe the first step of our construction. We consider
a bubble patch B and a compatible surface strip given by the curve
pe and the implicitly defined surface F , such that pe is a boundary
curve of B. For the sake of simplicity, we consider the case
B(t , 0) = pe (t ).

(5)

A contact of order n between the patch B and the surface F along
the curve pe is described by the contact condition



∂ i+j

f
(
B
(
u
,
v))
=0

i
j
∂ u ∂v
v=0

(6)

for i, j ∈ {0, . . . , n} with i + j ≤ n. Since Eq. (5) is satisfied, we have
f (B(u, 0)) = 0

(7)

1344

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

and condition (6) is trivially satisfied for j = 0. Moreover, we also
have
h(t , 0) = h˜ e (t ).
Depending on the order n of contact, the condition



∂j
f (B(u, v))
=0
∂v j
v=0

(8)

for j ∈ {1, . . . , n} provides the Hermite boundary data



∂i

h
(
u
,
v)

i
∂v
v=0
of the bubble function h for j ∈ {1, . . . , n} as follows. For better
readability, we denote the first and second partial derivative of a
bivariate function r : [0, 1]2 → Rd (d ∈ {1, 2, 3}) with respect to
the second argument by r0,1 and r0,2 , respectively.
Contact of order 1: The condition



∂
f (B(u, v))
=0
∂v
v=0
is equivalent to

(∇ f )(B(u, 0))T · B0,1 (u, 0) = 0.
By combining this observation with
B0,1 (u, 0) = L0,1 (u, 0) + h0,1 (u, 0)N(u, 0) + h(u, 0)N0,1 (u, 0)
we obtain the first partial derivative

(∇ f )(B(u, 0))T · L0,1 (u, 0)
h0,1 (u, 0) = −
(∇ f )(B(u, 0))T · N(u, 0)
h(u, 0)(∇ f )(B(u, 0))T · N0,1 (u, 0)
−
(∇ f )(B(u, 0))T · N(u, 0)
of the bubble function.
Contact of order 2: The second partial derivative h0,2 (u, 0) of the
bubble function can be computed similarly. The condition



∂2

=0
f
(
B
(
u
,
v))

2
∂v
v=0
can equivalently be reformulated as

(∇ f )(B(u, 0))T · B0,2 (u, 0)
+ B0,1 (u, 0)T · Hess(f )(B(u, 0)) · B0,1 (u, 0) = 0.
Since B0,2 (u, 0) is given by
B0,2 (u, 0) = h0,2 (u, 0)N(u, 0) + 2h0,1 (u, 0)N0,1 (u, 0),
we obtain
h0,2 (u, 0) = −

B0,1 (u, 0)T · Hess(f )(B(u, 0)) · B0,1 (u, 0)

(∇ f )(B(u, 0))T · N(u, 0)
2h0,1 (u, 0)(∇ f )(B(u, 0))T · N0,1 (u, 0)
−
.
(∇ f )(B(u, 0))T · N(u, 0)

Contact of order s ≥ 3: We compute the partial derivative



∂s
h(u, v)
∂v s
v=0
by using condition (8) and the previously computed partial derivatives



∂j

h
(
u
,
v)

j
∂v
v=0
of the bubble function for j ∈ {0, . . . , s − 1}.

The fulfillment of the contact condition (6) follows directly
from the conditions (7) and (8). Consequently, the bubble patch B
possesses a contact of order n with the implicitly defined surface F
along the curve pe .
By describing analogous Gn -conditions for the boundaries
B(0, t ) and B(t , 1 − t ), we obtain the remaining Hermite boundary
data of (3) and (4).
Since the bubble patch B has a contact of order n with the
implicitly defined surface F along the boundary curves which are
contained in the surface F , the Hermite boundary data (3) and (4)
fulfill the condition





∂ i +j
∂ i +j


h
(
u
,
v)
=
h
(
u
,
v)
,


i
j
j
i
∂ u ∂v
∂v ∂ u
(u,v)=vk
(u,v)=vk

(9)

for i, j ∈ {1, . . . , n} at the vertices vk with k ∈ {1, 2, 3}. Condition
(9) is called the twist compatibility condition and is needed for
applying Gordon–Coons interpolation to construct a C n -bubble
patch B; see Section 6 and Appendix A.
Condition (6) provides a simple method to construct Hermite
boundary data (3) and (4) for an arbitrary value of n, which guarantees Gn -continuity between two neighboring bubble patches. Only
a few linear equations need to be solved to get the Hermite boundary data of one patch. Another advantage of this approach is that
the generation of the Hermite boundary data is perfectly local,
i.e., it is entirely independent of the computation performed for the
other patches. In addition, this method works uniformly for vertices of arbitrary valency.
6. Construction of bubble patches
In the previous section we explained how to generate Hermite
boundary data (3) and (4) of the bubble function h, which
ensures Gn -continuity between two neighboring patches. By using
Gordon–Coons interpolation for triangles, we can construct from
the generated Hermite boundary data C n -bubble patches, which
are connected with Gn -continuity.
Gordon–Coons interpolation for triangles is a transfinite interpolation scheme which generates from the given Hermite boundary data a smooth function, interpolating this boundary data
(cf. [20–23]). The main concept of this interpolation scheme is similar to the Gordon–Coons method for rectangles (cf. [1,2]) and can
be summarized as follows.
Let e¯ 1 = (v2 , v3 ), e¯ 2 = (v1 , v3 ) and e¯ 3 = (v1 , v2 ) be the
edges of the standard triangle T. For i, j, k ∈ {1, 2, 3} with i ̸=
j ̸= k ̸= i, we denote by Pi the operator, which performs Hermite
interpolation parallel to the edge e¯ i , using Hermite boundary data,
given for the edges e¯ j and e¯ k ; see Fig. 3. By combining the three
operators we obtain an interpolation operator, which generates a
smooth function, interpolating the given boundary data.
By applying this procedure to the Hermite boundary data (3)
and (4) of order n we obtain a C n -bubble function h, and hence a
C n -bubble patch B. Moreover, the bubble patches are all rational
surfaces, which are pieced together with Gn -continuity.
In order to make this paper self-contained, Appendix A
summarizes the general concept of the Gordon–Coons method of
degree n in detail and present explicit formulas for n = 0 and
n = 1.
The generated bubble surfaces are rational, but their degree is
generally so high that an evaluation in closed form does not appear
to be of much use. Thus, there are two possibilities to use our
construction.
First, one may use the bubble patches as a procedural definition
for a surface, where each point of the surface can be evaluated
by following the evaluation path determined by the construction.
Each step in the construction requires solely standard arithmetic
operations, hence the evaluation can be performed easily and

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

1345

Clearly, the surfaces which are obtained in this way are only approximately Gn -smooth, since an approximation step is performed.
However, there exists a precise mathematical model of an exactly
Gn -smooth surface. If the level of smoothness turns out to be too
low, then one can easily improve the accuracy of the cubic spline
approximation used to represent the Hermite boundary data. Only
one-dimensional spline fitting procedures are needed for this task.
7. Examples
Fig. 3. The three operators P1 , P2 and P3 which perform Hermite interpolation
parallel to the edges e¯ 1 , e¯ 2 and e¯ 3 , respectively.

derivatives can be obtained, e.g., by using tools such as automatic
differentiation.
Second, one may generate low degree approximations (e.g. using spline functions) for the Hermite boundary data. If this approach is taken, then we obtain bubble patches which are spline
surfaces of low degree. We have used this approach in our current
implementation. The functions specifying the Hermite boundary
data along the curves are represented by standard cubic splines.
This leads to spline surface patches of degree (5, 5), (7, 7) and
(9, 9) for n = 0, n = 1 and n = 2, respectively.

We present several examples of generated G0 , G1 and G2 surfaces, see Fig. 4. These surfaces are interpolating the given
curves of the triangular networks of compatible surface strips.
A network of compatible surface strips is obtained by using
the construction method in Appendix B. Fig. 4 shows only the
vertices and edges of the different triangular meshes that were
used to generate the networks of compatible surfaces strips. We
use reflection lines, which is a well known tool for verifying
the resulting geometric continuity (cf. [24]), to demonstrate the
smoothness of the surfaces.
We can observe, that all resulting surfaces have the required
geometric continuity. In the case of G1 and G2 , all reflection lines of
the surfaces are at least G0 and G1 , respectively. In the examples

Fig. 4. Examples of different meshes and the resulting G0 , G1 and G2 -surfaces with reflection lines.

1346

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

Fig. 5. Example of a quadrilateral mesh and the resulting G1 and G2 -surfaces with reflection lines.

of the tube and of the rotated horse shoe, it is clear to see that
the resulting G0 and G1 -surfaces are only G0 and G1 , respectively,
but not smoother. In addition, we can observe that the order of
geometric smoothness has nothing to do with the aesthetic appeal
of the resulting surfaces. A possible attempt to fair the surfaces
could be a different choice of the implicitly defined surfaces at the
vertices of the mesh in the first step of the construction of a suitable
network of compatible surface strips; see Appendix B.
8. Conclusion
In this paper we have presented a simple method for constructing a Gn -surface from a triangular network of compatible surface
strips, which is a network of curves with an associated implicitly
defined surface.
Summing up, our construction scheme works as follows. For
each triangle we generate a single surface patch, represented
by a new methodology, called bubble patch. Thereby a single
surface patch is constructed with the help of triangular Coons
interpolation in such a way that the patches are connected with
Gn -continuity. This is achieved by generating Hermite boundary
data of the bubble patch for the Gordon–Coons method, which
ensures the desired Gn -continuity between the patches. For this
we use the compatible surface strips to describe a simple Gn condition between the patches, which provides the suitable
Hermite boundary data. Our algorithm is explained for n ≤ 2 in
detail and several examples are presented.
The advantages of our method are as follows. Our construction
is local and simple and works uniformly for meshes of arbitrary
valency. The resulting surfaces are piecewise rational surface
patches, which are pieced together with Gn -continuity. By using
low degree approximations (e.g. splines) for the Hermite boundary
data we obtain (spline) surface patches of low degree. The
method can be extended to quadrilateral and mixed triangular
and quadrilateral meshes with vertices of arbitrary valency. An
example from a quadrilateral mesh is shown in Fig. 5.
As a possible topic for future work, we are currently trying
to derive a geometric subdivision scheme from our construction,
by sampling points and Hermite data from the constructed
surface. The use of a globally defined implicit representation could
provide a new and promising approach to verify the smoothness
of the obtained limit surfaces, which does not require local
parametrizations and can deal uniformly with vertices of any
valency.
Acknowledgment
The second author has been supported by the Austrian Science
Fund, project S9202.

A.1. General concept
2n+1
For n ∈ Z+
0 , k ∈ {0, 1} and j ∈ {0, . . . , n}, we denote by Hk,j
the classical Hermite polynomials of degree 2n + 1, i.e.

+1
Hk2n
: [0, 1] → R
,j

satisfying


∂ i 2n+1 
H
(t ) = δi,j δk,l
∂ t i k ,j
t =l
for j ∈ {0, . . . , n} and l ∈ {0, 1}.
A general construction scheme of the Gordon–Coons method of
degree n for generating a C n -function h : T → R is as follows:
(i) Let



∂ i+j

h
(
r
,
s
)

i
j
∂r ∂s
(r ,s)=(u,v)

hi,j (u, v) =

for i, j ∈ {0, . . . , n}. Consider the given Hermite boundary
data
hi,0 (0, v),

h0,i (u, 0),

hi,0 (1 − v, v) and

h0,i (u, 1 − u)
for i ∈ {0, . . . , n}, satisfying the twist compatibility condition
(9).
(ii) For a function g : T → R, define the operators P1 , P2 and P3
as
P1 =

n
−

H02n,i+1



1−v

i=0

+

n
−



u

H12n,i+1



(1 − v)i gi,0 (0, v)


u
1−v

i=0

(1 − v)i gi,0 (1 − v, v),


v
P2 =
(1 − u)i g0,i (u, 0)
1−u
i=0


n
−
v
+
(1 − u)i g0,i (u, 1 − u),
H12n,i+1
1
−
u
i=0
n
−

H02n,i+1



and
P3 =

n
−

H02n,i+1

i=0

+

n
−





u
u+v

H12n,i+1



i=0

(u + v)i Wi (0, u + v)

u
u+v



(u + v)i Wi (u + v, 0),

where the indices for g indicate differentiation and
Appendix A. Gordon–Coons interpolation for triangles
We give a short overview of a transfinite interpolation scheme
for triangles, which is often known as the Gordon–Coons method
for triangles. For more details of Gordon–Coons interpolation for
triangles we refer to [20–23].

Wi (u, v) =

i  
−
i
j =0

j

(−1)j gi−j,j (u, v).

(iii) Then the function h is given by
h(u, v) = (Pi ⊕ Pj )h(u, v)

(A.1)

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

for any choice of i, j ∈ {1, 2, 3} with i ̸= j, where the Boolean
sum operator Pi ⊕ Pj is given by
Pi ⊕ Pj = Pi + Pj − Pi Pj ,
see [21, Theorem 2.1].
The fulfillment of the twist compatibility condition (9) for the
vertex vk for k ∈ {1, 2, 3} with i ̸= j ̸= k ̸= i is sufficient for
applying the interpolant (A.1); see [21, Theorem 2.1]. An example
of an interpolant (A.1) is
h(u, v) = (P1 ⊕ P2 )h(u, v),

(A.2)

for which the explicit formulas for n = 0 and n = 1 are
presented in Appendices A.2 and A.3, respectively (cf. [21]). Clearly,
the interpolant (A.1) is not symmetric. According to [21], a more
symmetric interpolant can be obtained by averaging interpolants
(A.1).[21, Theorem 2.4] describes similar interpolants, which do
not need the twist compatibility condition (9) to be satisfied.
Instead, they need some additional assumptions concerning the
Hermite boundary data (3) and (4).

Appendix B. Construction of a triangular network of compatible surface strips
We explain the construction of a triangular network of compatible surface strips from a triangular mesh of given vertices and associated normals. For this, we consider the triangular mesh M with
vertices v ∈ V , edges e = (v, w) ∈ E with v, w ∈ V . In addition, we
assume that we have for each vertex v ∈ V an associated normal
nv . The construction of a network of compatible surface strip of order n consists of three steps, described in the following subsections.
B.1. Construction of implicitly defined surfaces at the vertices
At first, we generate for each vertex v ∈ V an associated
implicitly defined surface Fv = {z ∈ R3 : fv (z) = 0} of degree
m, given by its truncated Taylor expansion
fv (z) = g(v)T · (z − v) +

The Boolean sum operator (P1 ⊕ P2 )h(u, v) is given by


v
h(u, 0)
1−u


v
+ H11,0
h(u, 1 − u)
1−u


u
+ H01,0
[h(0, v) − Q(00) (0, v)],
1−v


Q0 (0, v) =

H01,0

(v)h(0, 0) +

H11,0

2

(z − v)T · H(v) · (z − v) + · · · ,

g(v) = nv ,
where g(v) is the gradient and H(v) is the Hessian matrix of the
function fv at the vertex v. Conceptually, we consider fv as the
Taylor expansion of a globally implicitly defined surface F = {z ∈
R3 : f (z) = 0} about the vertex v. Therefore we can refer to
g(v) and H(v) as local gradient and local Hessian matrix at v,
respectively.
A possible construction of the function fv is as follows. We
generate for fv a function of degree m
fv (x, y, z ) =

where
(0)

1

fulfilling

A.2. Gordon–Coons interpolation of degree 0

(P1 ⊕ P2 )h(u, v) = H01,0

1347

(v)h(0, 1).

−

cr ,s,t xr ys z t ,

+
r ,s,t ∈Z0 :r +s+t ≤m

satisfying
A.3. Gordon–Coons interpolation of degree 1
The

explicit

(P1 ⊕ P2 )h(u, v) is

formula

of

the

Boolean

fv (v) = 0
sum

operator


v
(1 − u)i h0,i (u, 0)
(P1 ⊕ P2 )h(u, v) =
H03,i
1
−
u
i =0


1
−
v
+
H13,i
(1 − u)i h0,i (u, 1 − u)
1
−
u
i =0


1
−
u
+
H03,i
(1 − v)i [hi,0 (0, v)
1
−
v
i =0
1
−



− Q1(i) (0, v)],
where
(0)

Q1 (0, v) =

1
−

Hi3,0 (v)h0,i (0, 0) +

i=0

1
−

Hi3,1 (v)h0,i (0, 1),

(B.1)

and

(▽fv )(v) = g(v) = nv ,

(B.2)

with cr ,s,t ∈ R. Now we compute the unknown coefficients cr ,s,t by
solving the minimization problem
min
cr ,s,t

−

ωw (fv (w)2 + ‖(▽fv )(w) − nw ‖2 )

w∈Ω i (v)

subject to the constraints (B.1) and (B.2), where Ω i (v) is the i-ring
neighborhood of vertices of v and ωw is the user specified weight
for the vertex w in the i-ring neighborhood Ω i (v).
The implicitly defined surface Fv will be used in the following
subsections to describe the local behavior of the desired compatible surface strips at the vertex v. Therefore, the choice of the implicitly defined surfaces at the vertices influences the shape of the
resulting surfaces.

i =0

B.2. Construction of boundary curves

and



1
−

∂i 3
(1)
 h0,i (0, 0)
Q1 (0, v) = v
H
(
t
)
0 ,i

i
∂
t
t =v
i=0


1
− ∂i

3
+
H (t ) h0,i (0, 1)
∂ t i 1,i t =v
i=0
+ H03,0 (v)h1,0 (0, 0)
+ H03,1 (v)[−h0,1 (0, 0) + h1,1 (0, 0)]
+

H13,0

+

H03,1

(v)[h1,0 (0, 1) − h0,1 (0, 1)]
(v)[−h0,1 (0, 1) + h1,1 (0, 1)].

As the next step, we construct for each edge e = (v, w) a curve
pe of the form (1), having a contact of order 2n with the implicitly
defined surfaces Fv and Fw at the vertices v and w, respectively,
which specifies the function h˜ e .
In detail, we choose h˜ e as a polynomial of degree 4n + 1 in the
Bernstein–Bézier representation, i.e.
4n+1

h˜ e (t ) =

−

di Bi4n+1 (t ),

i=0

where

+1
B4n
i

are the Bernstein polynomials of degree 4n + 1 and

1348

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349

di ∈ R. To get the function h˜ e , we compute a boundary curve pe
which possesses a contact of order 2n with the implicitly defined
surfaces Fv and Fw at the vertices v and w, respectively, i.e.



∂i
 = 0 and
f
(
p
(
t
))
v
e

i
∂t
t =0



∂i
 =0
f
(
p
(
t
))
w
e

i
∂t
t =1

(B.3)

where
gˆ jv =



∂j

(▽
f
)(
p
(
t
))
v
e

j
∂t
t =0

and



∂j
 ,
(▽
f
)(
p
(
t
,
0
))
w
e

j
∂t
t =1

for i ∈ {0, . . . , 2n}. Then the contact conditions (B.3) lead to a
system of linear equations for the coefficients di of the function h˜ e .
Moreover, the contact of order 2n of the boundary curve with the
implicitly defined surfaces guarantees that the twist compatibility
condition (9) is satisfied.

gˆ jw =

B.3. Construction of compatible implicitly defined surfaces along the
boundary curves

g(pe (t )) = arg min ‖¯g − gˆ (pe (t ))‖2

Finally, we generate a family of implicitly defined surfaces Fq =
{z ∈ R3 : fq (z) = 0} of degree n along each boundary curve pe . For
a point q = pe (t ) on the boundary curve, the function fq is given
by
fq (z) = g(q)T · (z − q) +





only for n≥1



1

2

(z − q)T · H(q) · (z − q) + · · · ,


only for n≥2

where g(q) is the local gradient and H(q) is the local Hessian
matrix of the function fq at the point q. This family of surface is
generated in such a way that it is compatible with the curve pe
and with the implicitly defined surfaces Fv and Fw at the vertices
v and w, respectively. This is achieved by simply projecting the
Taylor expansions obtained by Hermite interpolation into the
linear subspaces which are defined by the compatibility conditions.
We explain this construction step for n ≤ 2 in detail, but it can be
generalized to any n ≥ 3, which is beyond the scope of this paper.
The function fq is determined by zero for n = 0, by the local
gradient g(q) for n = 1, and by the local gradient g(q) and the
local Hessian matrix H(q) for n = 2. As already described before,
the local gradients (and the local Hessian matrices) have to be
compatible with the boundary curve pe , which means that the
boundary curve needs to have a first (and second order contact)
with the function fq along the boundary curve, i.e.



∂
=0
fq (pe (s))
∂s
s =t




∂2

and
f
(
p
(
s
))
=
0
q
e

∂ s2
s =t

(B.4)

(B.5)

for q = pe (t ). The conditions (B.4) and (B.5) lead to the following
conditions
g(pe (t ))T ·

∂
pe (t ) = 0
∂t

(B.6)

and

∂
∂
g(pe (t )) = H(pe (t )) ·
pe (t )
∂t
∂t

(B.7)

for the local gradients and for the local Hessian matrices, respectively.
The computation of the local gradients for n ∈ {1, 2} and the
local Hessian matrices for n = 2 works as follows.
Computation of the local gradients: We first generate an initial
field of pseudo-gradient vectors gˆ (pe ) by Hermite interpolation of
suitable boundary data at the vertices v and w of the edge e, i.e.
2n−1

gˆ (pe (t )) =

−
j =0

H04n,j−1 (t )ˆgjv + H14n,j−1 (t )ˆgjw ,

for j ∈ {0, . . . , 2n − 1}.
This initial field of vectors gˆ (pe ), however, is not guaranteed to
fulfill condition (B.6). A valid field of gradient vectors g(pe ) is then
obtained by solving the minimization problem
g¯

subject to the constraint (B.6). Its solution is given in explicit form
by
gˆ (pe (t ))T · ∂∂t pe (t )
g(pe (t )) = gˆ (pe (t )) − ∂
(pe (t ))T · ∂∂t pe (t )
∂t




∂
(pe (t )) .
∂t

This possesses a simple geometric interpretation. The gradients
g(pe ) are obtained as the projections of the gradients gˆ (pe ) into the
normal plane of the curve pe . Moreover, this design specification of
the local gradients ensures that the twist compatibility condition
(9) is satisfied.
Computation of the local Hessian matrices: The construction of
the local Hessian matrices works similar to the case of the local
gradients. Again, we start with the construction of interpolants
ˆ (pe ), given by
H

ˆ (pe (t )) =
H

2
−

ˆ jv + H15,j (t )Hˆ jw ,
H05,j (t )H

j =0

where

ˆ jv =
H



∂j

Hess
(
f
)(
p
(
t
))
v
e

j
∂t
t =0

and

ˆ jw =
H



∂j
 ,
Hess
(
f
)(
p
(
t
))
w
e

j
∂t
t =1

for j ∈ {0, 1, 2}. By solving the minimization problem

¯ − Hˆ (pe (t ))‖2
H(pe (t )) = arg min ‖H
¯
H

(B.8)

subject to the constraint (B.7), we obtain the local Hessian matrices
which satisfy condition (B.7) and guarantee the fulfillment of the
twist compatibility condition (9). Moreover, the construction of the
Hessian matrices H(pe ) is invariant with respect to the choice of a
coordinate system.
Since the functions fq can be considered as the Taylor expansions of a globally implicitly defined surface F = {z ∈ R3 : f (z) =
0} about the vertex v, a triangular network of compatible surface
strips of order n is given by this surface F and the boundary curves
pe for the edges e of the triangular mesh M .
References
[1] Farin G. Curves and surfaces for computer-aided geometric design. Academic
Press; 1997.
[2] Hoschek J, Lasser D. Fundamentals of computer aided geometric design.
Wellesley (MA): A K Peters Ltd.; 1993.
[3] Peters J. Geometric continuity. In: Handbook of computer aided geometric
design. Amsterdam: North-Holland; 2002. p. 193–227.
[4] Hahmann S, Bonneau G-P. Triangular G1 interpolation by 4-splitting domain
triangles. Comput. Aided Geom. Design 2000;17(8):731–57.

M. Kapl et al. / Computer-Aided Design 43 (2011) 1341–1349
[5] Hahmann S, Bonneau G-P, Caramiaux B. Bicubic G1 interpolation of irregular
quad meshes using a 4-split. In: Advances in geometric modeling and
processing. Lecture notes in comput. sci., vol. 4975. Berlin: Springer; 2008.
p. 17–32.
[6] Karčiauskas K, Peters J. Guided spline surfaces. Comput. Aided Geom. Design
2009;26(1):105–16.
[7] Peters J. C 2 free-form surfaces of degree (3, 5). Comput. Aided Geom. Design
2002;19(2):113–26.
[8] Prautzsch H. Freeform splines. Comput. Aided Geom. Design 1997;14(3):
201–6.
[9] Reif U. Biquadratic G-spline surfaces. Comput. Aided Geom. Design 1995;
12(2):193–205.
[10] Reif U. TURBS—topologically unrestricted rational B-splines. Constr. Approx.
1998;14(1):57–77.
[11] Hermann T. G2 interpolation of free form curve networks by biquintic Gregory
patches. Comput. Aided Geom. Design 1996;13(9):873–93. (in memory of John
Gregory).
[12] Liu Q, Sun T. G1 interpolation of mesh curves. Comput. Aided Des. 1994;26(4):
259–67.
[13] Peters J. Smooth interpolation of a mesh of curves. Constr. Approx. 1991;7(2):
221–46.
[14] Ye X. Curvature continuous interpolation of curve meshes. Comput. Aided
Geom. Design 1997;14(2):169–90.
[15] Hermann T, Peters J, Strotman T. A geometric criterion for smooth

[16]

[17]
[18]
[19]

[20]
[21]
[22]
[23]

[24]

1349

interpolation of curve networks. In: Keyser J, editor. SPM 2009: 2009
SIAM/ACM joint conferences on geometric and physical modeling. New York:
ACM; 2009. p. 169–73.
Hermann T, Peters J, Strotman T. Constraints on curve networks suitable for
G2 interpolation. In: Mourrain B, Schaefer S, Xu G, editors. GMP 2010. LNCS,
vol. 6130. Berlin (Heidelberg): Springer-Verlag; 2010. p. 77–87.
Szilvási-Nagy M, Szabó I. C 1 -continuous Coons-type blending of triangular
patches. KoG 2005;9:29–34.
Szilvási-Nagy M, Szabó I. Generalization of Coons construction. Comput.
Graph. 2006;30:588–97.
Hahn J. Filling polygonal holes with rectangular patches. In: Theory and
practice of geometric modeling (Blaubeuren, 1988). Berlin: Springer; 1989.
p. 81–91.
Barnhill RE, Birkhoff G, Gordon WJ. Smooth interpolation in triangles.
J. Approx. Theory 1973;8:114–28.
Barnhill RE, Gregory JA. Compatible smooth interpolation in triangles.
J. Approx. Theory 1975;15(3):214–25.
Barnhill RE, Gregory JA. Polynomial interpolation to boundary data on
triangles. Math. Comp. 1975;29:726–35.
Gregory JA. Smooth interpolation without twist constraints. In: Computer
aided geometric design (Proc. Conf., Univ. Utah). New York: Academic Press;
1974. p. 71–87.
Theisel H. Are isophotes and reflection lines the same?. Comput. Aided Geom.
Design 2001;18(7):711–22.

