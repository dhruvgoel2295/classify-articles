Neural Networks 71 (2015) 172–181

Contents lists available at ScienceDirect

Neural Networks
journal homepage: www.elsevier.com/locate/neunet

Fuzzy wavelet plus a quantum neural network as a design base for
power system stability enhancement
Soheil Ganjefar ∗ , Morteza Tofighi, Hamidreza Karami
Department of Electrical Engineering, Faculty of Engineering, Bu-Ali Sina University, Shahid Fahmideh Street, P.O. Box 65178-38683, Hamedan, Iran

article

info

Article history:
Received 6 August 2014
Received in revised form 9 July 2015
Accepted 23 July 2015
Available online 1 August 2015
Keywords:
Indirect adaptive fuzzy wavelet neural
controller
Power system stabilizer
Quantum neural network

abstract
In this study, we introduce an indirect adaptive fuzzy wavelet neural controller (IAFWNC) as a power
system stabilizer to damp inter-area modes of oscillations in a multi-machine power system. Quantum
computing is an efficient method for improving the computational efficiency of neural networks, so
we developed an identifier based on a quantum neural network (QNN) to train the IAFWNC in the
proposed scheme. All of the controller parameters are tuned online based on the Lyapunov stability theory
to guarantee the closed-loop stability. A two-machine, two-area power system equipped with a static
synchronous series compensator as a series flexible ac transmission system was used to demonstrate the
effectiveness of the proposed controller. The simulation and experimental results demonstrated that the
proposed IAFWNC scheme can achieve favorable control performance.
© 2015 Elsevier Ltd. All rights reserved.

1. Introduction
The nonlinear dynamics and complex characteristics of a power
system can trigger low-frequency oscillations when the power system is exposed to disturbances. A power system stabilizer (PSS) is a
highly efficient controller, which can be installed in the automatic
voltage regulator of the generator, and PSSs are used extensively
to enhance the stability of power systems. The parameters of a
conventional fixed structure PSS (CPSS) are determined based on a
linearized model of the power system by considering a single operating point. However, issues such as nonlinearity of the power system, changes in the operating conditions or system topology, and
deviations in the system parameters all degrade the performance
of CPSSs.
To address these issues, it is necessary to develop a method
for operating a PSS that achieves better performance compared
with the conventional approaches. Various methods are used in
this field, such as adaptive control (Hussein, Saad, Elshafei, &
Bahgat, 2010; Nechadia, Harmasa, Hamzaouib, & Essounboulib,
2012; Radaideh, Nejdawi, & Mushtaha, 2012), artificial intelligence
(Shaw, Banerjee, Ghoshal, & Mukherjee, 2011; Talaat, Abdennour,
& Al-Sulaiman, 2010), robust control (Bevrani, Hiyama, & Bevranic,
2011; Khodabakhshian & Hemmati, 2012; Ngamroo, 2012),

∗

Corresponding author.
E-mail addresses: s_ganjefar@basu.ac.ir (S. Ganjefar),
tofighi_morteza@yahoo.com (M. Tofighi), hamidr.karami@gmail.com (H. Karami).
http://dx.doi.org/10.1016/j.neunet.2015.07.010
0893-6080/© 2015 Elsevier Ltd. All rights reserved.

and sliding mode control (Al-Duwaish & Al-Hamouz, 2011). In
particular, methods based on adaptive control and robust control
are considered better for addressing the effects of uncertainty in
power systems. In adaptive control, the controller parameters are
updated by identifying the plant parameters, whereas in robust
control, a worst-case design scenario is considered for the plant
families that correspond to different uncertainties in the system.
In this study, we developed a controller based on indirect adaptive
control theory. In this method, the controlled plant needs to be
identified first and a controller is then designed based on the
identifier. In our method, the identifier is employed to calculate
the system sensitivity online based on indirect adaptive control
theory.
Recently, wavelet functions have attracted much attention in
areas of engineering research such as system identification (Karrari & Malik, 2005) and function approximation (Muzhou & Xuli,
2011). Based on wavelet theory, any signal or function can be
closely approximated by a finite sum of the weighted wavelet
functions. Wavelet neural networks (WNNs), which incorporate
wavelet functions into neural networks, were proposed by Zhang
and Benveniste (1992) and they have been used for identifying
and controlling nonlinear systems (El-Sousy, 2011; Khan & Azizur
Rahman, 2010). Activation functions such as sigmoid and Gaussian
functions, which have non-local properties in time, are replaced by
wavelet functions in the hidden layers of the neurons in the WNN.
The output of a WNN is localized in both the time and frequency
domains, thereby capturing the time–frequency localization
properties of the input signal. This means that the WNN is a local

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

network; therefore, during online training for any given point of
the input space, a small subset of the network parameters are active, which can be updated. This maintains the generalizability of
the WNN, so it has high flexibility and its training can be performed
at speeds higher than that of a non-local network. Furthermore,
local minima can be eliminated in the WNN. However, the WNN
also has the shortcoming (Yoo, Park, & Choi, 2005) that it employs
a feed-forward structure. To address this problem, self-recurrent
WNNs (SRWNNs) have been proposed (Yoo et al., 2005). The SRWNN has a mother wavelet layer with self-feedback wavelets,
which allows it to record previous data in the network, and thus
it can adapt very rapidly to sudden changes in the configuration or
condition of the controlled plant.
A fuzzy WNN (FWNN) combines WNN with the Takagi–Sugeno–
Kang (TSK) fuzzy model in order to enhance the function approximation accuracy as well as the generalizability during highly
complex processes. Several previous studies have considered the
synthesis of a FWNN to solve problems such as forecasting, function approximation, fault diagnosis, system identification, and control problems (Abiyev & Kaynak, 2008; Dong, Xiao, Liang, & Liu,
2008; Ebadat, Noroozi, Safavi, & Mousavi, 2011; Zhang & Wang,
2012). In Dong et al. (2008), fault diagnosis for power transformers was addressed using a rough set and FWNN, which was
integrated with a least squares weighted fusion algorithm. A
gradient-based update rule was employed to update all of the
FWNN parameters in the online mode while an adaptive learning
rate (ALR) algorithm was also proposed to guarantee the convergence of the adaptive process in Abiyev and Kaynak (2008). The
network obtained was used for identification and control in dynamic plants. In Ebadat et al. (2011), using a combination of TSK
fuzzy models with a wavelet transform and a recursive orthogonal
least squares learning algorithm, a FWNN was proposed to approximate arbitrary nonlinear functions. In Zhang and Wang (2012), a
FWNN approach was introduced for forecasting long-term electricity consumption in a high energy consuming city and the rate of
training was increased compared with a prediction model based
on an artificial neural network.
In the last decade, neural networks have attracted increasing attention from researchers in various application areas. Neural networks have considerable computational advantages, but they also
have some problems in practice. For example, they are not suitable for performing simulations in a reasonable time on classical
computers due to the massively parallel characteristics of neural
networks. Quantum computing is a likely candidate for improving the computational efficiency of neural networks because it has
been very successful in dealing with a selected set of computational
problems. In this framework, several quantum neural networks
(QNNs) have been proposed in previous studies (Kouda, Matsui, &
Nishimura, 2002, 2004; Kouda, Matsui, Nishimura, & Peper, 2005).
In this study, we developed an indirect adaptive fuzzy wavelet
neural controller (IAFWNC) for stabilizing the inter-area oscillations in a multi-machine power system. Based on the fact that
quantum computing is an efficient tool for improving the computational efficiency of neural networks, we developed an identifier based on a QNN to train the IAFWNC in our proposed scheme.
A back-propagation algorithm with a Lyapunov-based ALR (LALR)
scheme is also proposed to update all the parameters of the
consequent parts of each fuzzy rule during online operation A
two-machine, two-area power system equipped with a static synchronous series compensator (SSSC) as a series flexible ac transmission system (FACTS) was used to demonstrate the effectiveness
of the proposed controller. The results of these studies demonstrated that the inter-area oscillations were successfully damped
by the IAFWNC. In brief, the main contributions of this study are
summarized as follows.

173

a. The main disadvantage of FWNN is that the application domain
is limited to static problems due to its feed-forward network
structure. Therefore, we propose to use a SRWNN in the
consequent part of the FWNN, thereby solving the control
problem for chaotic systems.
b. Our proposed structure requires fewer wavelet nodes than
networks with a feed-forward structure due to the dynamic
behavior of the recurrent network.
c. Finding the optimal learning rate is a challenging task for classic
gradient-based learning algorithms. Hence, in our proposed
framework, all of the learning rates are determined optimally
based on Lyapunov stability theory.
d. We developed an identifier based on a QNN to train the
proposed controller.
e. We developed a controller based on the proposed network
structure, which we use to damp oscillations in a multi-machine
power system.
The remainder of this paper is organized as follows. A brief
introduction to the SRWNN structure is presented in Section 2.
Section 3 describes the architecture of the proposed FWNN with a
self-recurrent consequent part. The design process for the IAFWNC
is discussed in Section 4. In Section 5, we present the results
of the comprehensive stability study. The results of nonlinear
time-domain simulations are provided in Section 6. Finally, the
discussion and our conclusions are given in Section 7.
2. The SRWNN structure
A detailed structure of SRWNN with Nin inputs, one output, and
Nin ∗ Nw mother wavelets is illustrated in Fig. 1. The network inputs are passed directly to the second layer, i.e., the mother wavelet
layer. 3. Note that different choices of wavelet prototypes are possible for use as the elementary building blocks when constructing
WNN models. Specific choices can be applied effectively to certain
problems but there is no systematic approach. However, in practice, these choices only lead to marginal differences. In our method,
the first derivative of a Gaussian function ϕ(x) = x. exp(−0.5x2 )
is selected as the mother wavelet function, which has the universal approximation property (Wai, 2002), although the proposed
framework can easily be adapted to operate with other wavelet
functions. According to the mother wavelet selected, each wavelet
ϕr ℓ in the second layer, which is a translated and dilated version of
the mother wavelet, is represented as:



ϕr ℓ (zr ℓ ) = zr ℓ exp −0.5 · zr2ℓ ,
∀zr ℓ = ((ur ℓ − tr ℓ ) /dr ℓ ) , r = 1 : Nw , ℓ = 1 : Nin ,

(1)

where for discrete time k,
ur ℓ (k) = xℓ (k) + ϕr ℓ (k − 1) θr ℓ ,

r = 1 : Nw , ℓ = 1 : Nin ,

(2)

where tr ℓ and dr ℓ represent the wavelet translation and dilation
parameters, respectively; and θr ℓ is the weight of the self-feedback
loop, which can be treated as a storage coefficient. The subscript r ℓ
denotes the ℓth input term of the rth wavelet. The product of the
wavelets is then calculated in the product layer as follows:

ψr =

Nin


ϕ(zr ℓ ) =

ℓ=1

Nin



ℓ=1

zr ℓ · exp −0.5 · zr2ℓ





,

(3)

∀ r = 1 : Nw .
The SRWNN output υ is finally rendered by the output layer:

υ(k) =

Nw


wr · ψr ,

(4)

r =1

where wr is the connection weight between the product and the
output layers.

174

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

Fig. 1. The SRWNN structure.

3. Architecture of the FWNN
The FWNN model is a feed-forward multi-layer network, which
integrates the traditional TSK fuzzy model with WNNs. The TSKtype systems (Chatterjee, Ghoshal, & Mukherjee, 2011; Hassan,
Moghavvemi, Almurib, Muttaqi, & Du, 2012) have a constant or
linear equation-based consequent part with a specific number of
rules, so they cannot provide a complete mapping of high-order
nonlinear dynamical plants with acceptable accuracy because the
TSK system cannot model the local properties of the plant with a
limited number of rules. In this study, the SRWNN is embedded into
a TSK fuzzy model to increase the accuracy of the model, as well as
the flexibility and reaction speed of the TSK system. Now, suppose
that there are NF fuzzy IF-THEN rules in the following form:
Rj : IF x1 is A1j AND x2 is A2j AND . . . xi is Aij
Nw,(j)

THEN υj =



wr ,(j) · ψr .(j) ,

(5)

r =1

where xi is the ith input variable of the system for i = 1 : Nin and Aij
is a linguistic term characterized by a fuzzy membership function
µAij (xi ) for j = 1 : NF . The structure of the proposed FWNN with
a self-recurrent THEN-part with Nin inputs and NF fuzzy rules is
represented in Fig. 2, which comprises five layers. The inputs for
the first layer are passed directly to the second layer.
A number of different types of membership functions have
been proposed for fuzzy control systems. For example, in Sharma
and Kothari (2003), it was shown that the performance of neurofuzzy-based stabilizers with triangular, trapezoidal, and Gaussianshaped membership functions differed little from each other.
Hence, it may be deduced that any of these alternative shapes
(Gaussian, triangular, or trapezoidal) can be selected without compromising the performance. In Gaussian membership functions,
the distribution of the data is more natural, which makes the training data more ‘‘realistic.’’ Therefore, in this study, we selected
Gaussian functions as the membership functions for the second
layer. The output of each node in the second layer can be calculated as:

 

2
µAij (xi ) = exp − xi − cij /σij2 ,

∀ i = 1 : Nin ; j = 1 : NF , (6)

where cij denotes the center parameters and σij denotes the scaling parameters for the membership function associated with rule

Fig. 2. Structure of a FWNN.

j. Each node in the third layer had a fuzzy rule R, and thus the node
number in the third layer is equal to the total number of rules, R1
to RNF . Each node output can be represented as:

µj (x) =



µAij (xi ),

i = 1 : Nin , j = 1 : NF ,

(7)

i

where Π denotes an AND (min) operation. The fourth layer is the
consequent layer, which comprises NF SRWNNs. In the fifth layer,
the outputs of the SRWNNs are multiplied by the node output from
the third layer. Each product node in this layer can be expressed as
follows:
uj (x) = µ
ˆ j (x) · υj ,

j = 1 : NF ,

(8)

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

where:

µ
ˆ j (x) = µj (x)


NF

µj (x) .

(9)

j =1

by achieving an optimal match between the control signal energy
and the control performance. All of the parameters of the proposed
FWNN can be introduced with the vector P(j) , as follows:
P(j) = p1(j) , . . . , pl(j) , . . . , p6(j)



In Eq. (8), υj represents the output of the jth SRWNN, which can
be calculated as:

υj =

∀ j = 1 : NF , l = 1 : 6, r = 1 : Nw,(j) , ℓ = 1 : Nin .
wr ,(j) · ψr .(j) ,

j = 1 : NF ,

(10)

r =1

where each parameter with the subscript (j) belongs to the jth
SRWNN, e.g., Nw,(j) , denotes the number of nodes in the product
layer of the jth SRWNN. The consequent parts of the fuzzy rules are
calculated using Eq. (10). Finally, the network output is calculated
as:
u(k) =

NF


µ
ˆ j (x) · υj =

NF


(11)

4. IAFWNC design


p(j) (k + 1) = p(j) (k) + γ
l

l

l


∂ Jc (k)
− l
,
∂ p(j) (k)

A gradient descent algorithm is employed for training the parameters of the proposed FWNN. The resulting network is used for
power system stability improvement based on indirect adaptive
control theory. During the training process, the center parameters
cij and the scaling parameters σij of the Gaussian membership functions in the antecedent parts of the rules, the translation tr ℓ,(j) dilation dr ℓ,(j) , and storage coefficient θr ℓ,(j) parameters for wavelet
functions, as well as the weight wr ,(j) parameters for the consequent parts of the rules are optimally determined.
The main control objective is to design the IAFWNC so the
system oscillations ∆ω can be damped rapidly. The system
oscillations ∆ω and some of its derivatives are selected as the input
vector for the IAFWNC as follows:
xc = x1 , x2 , . . . , xNin .



(12)

The input vector is normalized between −1 and +1. The
stabilizer signal u can be calculated in each step time k as:
u (k) = ac fc (xc ) = ac u (k) ,
′

(13)

where fc is the nonlinear function of the IAFWNC, which is
calculated using Eqs. (6)–(11). Considering the normalized input
vector xc , u′ (k) is scaled to the range of [−1, 1]. Thus, it needs to
be multiplied by the factor ac to yield a control signal u(k) in the
range of [−ac , ac ], which can represent the typical output range
limit of the proposed stabilizer. The goal is to apply the control
signal u(k) to the plant at each time step k, so the power system
oscillations ∆ω can be damped rapidly. The training process is
based on minimizing the following cost function:


1
(∆ωd (k) − ∆ω (k))2 + β · u2 (k)
2

1 2
=
ec ,1 (k) + e2c ,2 (k) .
2

(16)

where P(lj) and γ l represent an arbitrary parameter and the corresponding learning rate, respectively. Therefore, the learning rate
vector can be defined as:



γ = γ 1, . . . , γ l, . . . , γ 6


= γ w , γ t , γ d, γ θ , γ c , γ σ ,

4.1. Training the controller

Jc (k) =

(14)

The proposed performance index includes two terms. By
minimizing its first term e2c ,1 (k), the desired value ∆ωd (k) can
be tracked by the plant output ∆ω (k). In our method, the speed
deviation difference for the two generators is considered as the
plant output, so the desired value in Eq. (14) is equal to zero. A
penalty factor β is applied to the control signal u(k) as the second
term e2c ,2 (k), where the aim is to increase the control performance

(15)

All of the FWNN parameters are optimized using the gradient
descent method, so the error is minimized after a given number of
training cycles. The gradient descent method may be defined as:

∀ j = 1 : NF , l = 1 : 6,
uj .

j=1

j=1







= wr (j) , tr ℓ,(j) , dr ℓ,(j) , θr ℓ,(j) , cij , σij ,

Nw,(j)



175

∀ l = 1 : 6.

(17)

In Eq. (16), the gradient of the performance index Jc (k) with
respect to an arbitrary parameter Pjl can be calculated as:



∂ Jc (k)
∂ ∆ω (k)
=
∆
ω
k
−
∆
ω
k
+
β
·
u
k
(
(
)
(
))
(
)
d
∂ u (k)
∂ pl(j) (k)
× ac

∂ u′ (k)
.
∂ pl(j) (k)

(18)

If Eq. (18) has been calculated successfully, it is then possible to
update all the parameters of the proposed FWNN by substituting
Eq. (18) into Eq. (16). Considering the proposed FWNN structure,
∂ u′ (k)/∂ pl(j) (k) in Eq. (18) for l = 1 : 6 can be calculated easily, as
follows:

∂ u′ (k)
µj ( x )
∂ u′ (k)
= ψr ,(j) N
=
1
r
∂wr ,(j) (k)
∂ p(j) (k)
µj ( x )

(19)

j =1



∂ u (k)
∂ u (k)
−1
=
=
w
·
ψ
r ,(j)
r ,(j)
∂ tr ℓ,(j) (k)
dr ℓ,(j)
∂ p2(j) (k)


1
µj (x)
×
− zr ℓ,(j) N
r
zr ℓ,(j)
µj (x)
′

′

(20)

j =1

∂ u (k)
∂ u (k)
∂ u′ (k)
=
z
=
r
ℓ,(
j
)
∂ dr ℓ,(j) (k)
∂ tr ℓ,(j) (k)
∂ p3(j) (k)

(21)

∂ u′ (k)
∂ u′ (k)
∂ u′ (k)
=
=
−ϕ
k
−
1
(
)
r
ℓ,(
j
)
∂θr ℓ,(j) (k)
∂ tr ℓ,(j) (k)
∂ p4(j) (k)

(22)

′

′

∂ u′ (k)
∂ u′ (k)
=
5
∂ cij (k)
∂ p(j) (k)
 2µ (x)(υ − u′ )(x − c )
j
j
i
ij



Nr



σij2 µj (x)
=
j =1



if i node is connected to rule node j


0 otherwise

(23)

176

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

Fig. 3. (A) Interior structure of one neuron in the QNN; and (B) three-layer QNN architecture.

∂ u′ (k)
∂ u′ (k)
=
6
∂σij (k)
∂ p(j) (k)

2µj (x)(υj − u′ )(xi − cij )2



Nr



σij3 µj (x)
=
(24)
j =1



if
i
node
is
connected
to
rule
node
j


0 otherwise.
In Eq. (18), ∂ ∆ω (k) /∂ u (k) represents the plant’s sensitivity
to the control signal u(k). To guarantee both the accuracy of
the adaptation process and increased control performance, it is
necessary to calculate the exact value of the system’s sensitivity
during each step time k. However, it is impossible to calculate the
system’s sensitivity directly using plant equations, particularly for
high-order nonlinear systems. Given the advantages of QNNs, an
adaptive QNN identifier (AQNNI) is employed in our method to
calculate the system’s sensitivity online based on indirect adaptive
control theory.
4.2. QNN-based identifier
We consider a QNN with a multi-input and single-output
structure as an identifier to approximate the dynamics of the
power system. A schematic diagram of the QNN and the interior
structure of one neuron are shown in Fig. 3, which comprises three
layers: the input layer, hidden layer and output layer. When an
input vector is provide to the network, the input layer converts
the input values in the range [0, 1] into quantum states with phase
values in the range [0, π /2]. The output of the input layer can be
calculated as:
zlI = f (yIl )
f (yIl ) = e

(25)

iyIl

π

= cos(yIl ) + i sin(yIl )

(26)

· xl ,
(27)
2
where xl is the lth input variable of the identifier for l = 1 : L. The
second layer is the hidden layer and the output of each node can
be obtained as follows:
yIl =

H
zm
= f (yHm )

yH
m =

π

2

(28)

· g (δm ) − arg(v)


L




 sin(θml + ) − sin(λm ) 
 l=1

=
· g (δm ) − arctan  L
, (29)


2
cos(θml + yIl ) − cos(λm )
π

yIl

l =1

where each parameter with the subscript (m) belongs to the mth
neuron in the hidden layer for m = 1 : M and g (δm ) is the sigmoid
function defined by
g (δm ) =

1
1 + exp(−δm )

,

(30)

which ranges between 0 and +1. The output signals for the hidden
layer are determined using Eqs. (28)–(30). These signals are the
input for the third layer, where data processing occurs in a similar
manner to the hidden layer. The output signal from the network is
calculated as:
2
Output = Im(z O )





(31)

z O = f (yO )

(32)





M


sin(θm + yH
m ) − sin(λo ) 



m
=
1
O
y =
· g (δo ) − arctan  M
.


2
cos(θm + yH
)
−
cos
(λ
)
o
m

π

(33)

m=1

4.3. Training the identifier
A real-time plant tracker AQNNI with a series–parallel structure
is used to determine the system’s sensitivity based on indirect
adaptive control theory (Narendra & Parthasarathy, 1990). The
AQNNI can be represented as:
xI =



1
a−
c {u (k) , u (k − 1) , . . . , u (k − α1 )} ,

1
{∆ω (k − 1) , ∆ω (k − 2) , . . . , ∆ω (k − α2 )}
a−
I

∆ω
ˆ (k) = aI · υI (k) = aI · fI (xI ) ,



(34)
(35)

where ∆ω
ˆ (k) is the identifier output at time step k and υI (k) is
the normalized value of ∆ω
ˆ (k) in a range of [−1, 1]. xI is the input
vector of the AQNNI and fI is a nonlinear function of AQNNI, which
is implemented using (25)–(33). The parameters aI and ac are
employed to normalize all of the inputs and output of the AQNNI
to a range of [−1, 1]. The AQNNI must be trained offline initially.
Subsequently, it can be used to calculate the system’s sensitivity
online during each time step k. The training of the AQNNI in both
the offline and online modes is based on minimizing the following
cost function:
JI (k) =

1 

∆ω (k) − ∆ω
ˆ (k)

2

2 

=

1
2

eI (k),

(36)

where ∆ω (k) and ∆ω
ˆ (k) are the outputs of the plant and the
AQNNI at time step k, respectively. All of the parameters of the
AQNNI can be introduced with the vector W(I ) , as follows:
W(I ) =

W(1I ) , . . . , W(rI ) , . . . , W(6I )



= [θlm , λm , δm , θm , λo , δo ]


∀ r = 1 : 6.

(37)

After initialization, the parameters of the AQNNI should be
updated by the gradient descent algorithm during each time step
k, as follows:


W(rI )

(k + 1) =

W(rI )

(k) + γ

r
(I )


∂ ∆ωˆ (k)
eI (k)
,
∂ W(rI ) (k)

(38)

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

177

a LALR algorithm, which can be used effectively to increase
the learning speed of the control system and to guarantee the
convergence of the proposed approach.
The control performance index (14) is selected as a Lyapunov
function:
Vc (k) =

...

...

2
1

2 ν=1

ec ,ν (k) .

(47)

The change in the Lyapunov function due to the learning
procedure can be calculated as:

∆Vc (k) =
Fig. 4. Control block diagram of the IAFWNC scheme.

on the chain rule of differentiation and gradient descent (Ganjefar,
Ghassemi, & Ahmadi, 2014). The AQNNI can then be utilized as an
accurate plant tracker to calculate the system’s sensitivity online
as:

(39)

(40)



∂ (k)
π  −1  −1
1
{0, 0, . . . , 0} ,
=
ac
1, z , . . . , z −α1 , a−
I
∂ u (k)
2

(42)

∆

∆ec ,ν (k) =


T
NF 

∂ ec ,ν (k)

b =

M


∂ ec ,2 (k) 
∂υj
µj ( x )
= β · ac · N
· l
,
l
F
∂ p(j) (k)
∂ p(j) (k)
µh (x)

cos(θm +

) − cos(λo )


∆p(j) (k) = γ
l

aH
m =

(44)

=

L


(52)

l

∂ Jc (k)
− l
∂ p(j) (k)



µj ( x )
∂υj
· l
.
NF

∂ p(j) (k)
µh (x)

(53)

h=1

sin(θml + yIl ) − sin(λm )

(45)

l =1

bH
m

(51)




= γ l S · eC ,1 (k) − β · eC ,2 (k) · ac

(43)

m=1
L


(50)

where S = ∂ ∆ω (k) /∂ u (k) is the system’s sensitivity. In Eq. (50),
∆plj (k) can be expressed as:

·
yH
m

∀ ν = 1 : 2.

∂υj
∂ ec ,1 (k)
µj (x)
· l
= −S · ac · N
F
∂ pl(j) (k)
∂ p(j) (k)
µh (x)

m=1
O

 ∂ pl(j) (k)



∆pl(j) (k)


h=1

where
sin(θm + yH
m ) − sin(λo )

(49)

h=1

(41)

M


∀ ν = 1 : 2.

Considering the control system configuration, we can write:

I
∂ yHm (k)
bH cos(θml + yIl ) + aH
m sin(θml + yl )
=− m
I
H
2
H
2
(am ) + (bm )
∂ yl (k)

aO =

(48)

Considering the proposed stabilizer with a full-adaptive THENpart, we can write:

j =1

O

yIl

ec ,ν (k + 1) − ec ,ν (k) ,

ec ,ν (k + 1) = ec ,ν (k) + ∆ec ,ν (k)

O

∂ z (k)
= −2 sin(yO ) cos(yO )
∂ yHm (k)
O
H
bO cos(θm + yH
m ) + a sin(θm + ym )
×
O
2
O
2
(a ) + (b )

2 ν=1

where

where W r and γ r represent an arbitrary parameter and the
corresponding learning rate for the identifier, respectively. In Eq.
(38) ∂ ∆ω
ˆ (k) /∂ W(rI ) (k) for r = 1 : 6 can be calculated easily based

∂ ∆ω (k)
∂ ∆ωˆ (k)
∂ z (k)
≈
=
∂ u (k)
∂ u (k)
∂ u (k)
M

∂ z O (k) ∂ yHm (k) ∂ yIl (k)
=
∂ yHm (k) ∂ yIl (k) ∂ u (k)
m=1

2
1

cos(θml +

yIl

) − cos(λm ).

(46)

l =1

After substituting Eq. (39) into Eq. (18), we can obtain the
system’s sensitivity during each time step. A block diagram of the
proposed control scheme is illustrated in Fig. 4.
5. Comprehensive stability study
When a small value is selected as the learning rate in a backpropagation-based learning algorithm, the speed of convergence
is reduced. However, employing a large value for the learning rate
also leads to an unstable learning process. Thus, we introduce

Using Eqs. (50)–(53), both ∆ec ,1 (k) and ∆ec ,2 (k) can be written
as:




∆ec ,1 (k) = γ l −S 2 · ec ,1 (k) + S · β · ec ,2 (k)

2 

NF

2

ac
∂υj 
 
µ2j (x) · 
×
(54)
 l

2 ·


∂
p
k
(
)
N
(j)
j =1
F
µh (x)
h =1




β · ec ,1 (k) − β · ec ,2 (k)


 
NF
 ∂υ 2

a2c
j

 
µ2j (x) · 
×
 , (55)
2 ·
l


∂
p
k
(
)
NF
(j)
j =1

µh (x)

∆ec ,2 (k) = γ l S ·



h =1

178

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

Fig. 5. Two-machine power system with SSSC.

where ∥.∥ denotes the usual Euclidean norm in Rn . Considering Eqs.
(48), (49), (54) and (55), ∆Vc (k) can be calculated as:
a2c

∆Vc (k) = − 

NF


2 ×

µh ( x )

NF

j =1

stabilizer is guaranteed if γ l is selected as:
2

0 < γl <



 

 ∂υ 2
j
 
µ2j (x) 

 l
 ∂ p(j) (k) 



S2

+β

a2c




2

N
F


µh (x)

NF

j=1


 .
 ∂υj  2


max  l
∂ p(j) (k) 



(59)

h=1

h =1



× S · ec ,1 (k) −

2

β · ec ,2 (k) , λC

(56)

where

Remark 1. The maximum value of γ l that guarantees the most
rapid or optimal convergence corresponds to:
1

γl =





S2


 2


S +β
γ l · a2c
l
λC = γ  1 −

2

2
NF


µh (x)

+β

a2c




2

N
F


µh (x)

NF

j =1



 .

 ∂υj  2


max  l
∂ p(j) (k) 

(60)

h=1

Proof. As µj (x) ≤ 1, then Eq. (58) can be expressed as follows:

h=1



1



λC ≥ γ · 1 − γ ξ ,
l






NF

 ∂υ 2

j
  

2

×
µj ( x )  l
 ,

 ∂ p(j) (k) 
j =1


l

2



(57)

∀ξ = S + β 


2

NF


a2c



NF


2
µh (x)

j =1



 ∂υ  2
j


max  l
 > 0. (61)
 ∂ p(j) (k) 



h=1

where λc can be written as:

Thus, we can write:




2
1
1
λC ≥ −0.5ξ γ l −
+
.
ξ
2ξ




1 2
a2c
l 
λC ≥ γ · 1 −
S + β γl
2

2
NF


µh ( x )

(62)

Therefore, the maximum learning rate that guarantees convergence is 1/ξ .

h=1

6. Nonlinear time-domain simulations



  


NF

 ∂υ  2


2

j
  

x
(
)
 max µj
×
,
max  l


 ∂ p(j) (k) 
j =1


(58)

where µj (x) ≤ 1. Based on the Lyapunov stability theorem if
λc > 0 is satisfied, then ∆Vc (k) < 0, and thus the asymptotic
convergence of the proposed stabilizer is guaranteed. Considering
Eq. (58) and based on the Lyapunov stability theorem, the result
of the stability analysis described above can be obtained using the
following proposition.
Proposition 1. Let γ l be the learning rate value for an arbitrary
parameter of the THEN-part, then the convergence of the proposed

In order to investigate the effectiveness of the proposed
IAFWNC, we conducted simulation studies using a two-machine,
two-area power system installed with SSSC. If we consider the
inter-area oscillations as the output of this dynamic system,
then the proposed IAFWNC can be used as a supplementary
damping controller for FACTS to damp the system output (interarea oscillations) by setting a value of zero for the desired output
∆ωd (k). The power system including two generators and one
major load center at bus 3 is shown in Fig. 5. A 2200 MW load center
is modeled as a dynamic load, where the absorbed active and
reactive power are a function of the system voltage. Each machine
is equipped with a PSS. A 100 MVA SSSC, which can inject up to 10%
of the system voltage, is inserted in series with transmission line
L1 between buses 1 and 3. The model data can be found in Ganjefar
and Alizadeh (2012).

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

179

Fig. 6. (A) Gen. 1 swing against Gen. 2, fault location at bus 1 with a duration of 10 cycles; and (B) identifier performance during the fault.

Fig. 7. (A) Gen. 1 swing against Gen. 2, fault location at bus 2 with a duration of 10 cycles; and (B) identifier performance during the fault.

Table 1
Values of the parameters used in the IAFWNC.
No. of rules

No. of wavelets

Penalty factor β

Sampling rate

ac

3

2

0.000025

40 Hz

0.15

IAFWNC and AQNNI are summarized in Tables 1 and 2. Two case
studies were considered In order to investigate the performance of
the proposed IAFWNC at damping low frequency oscillations in the
test system.
6.2. Case 1

Table 2
Values of the parameters used in the AQNNI.
No. of neurons
in input layer

No. of neurons
in hidden layer

No. of neurons
in output layer

α1

α2

aI

6

5

1

2

2

0.007

6.1. Parameter settings
The proposed IAFWNC was used to apply a control signal u to
the SSSC to damp the inter-area oscillation between the generation
units G1 and G2 . The input vector for the IAFWNC was selected as
[∆ω12 (k), {∆ω12 (k) − ∆ω12 (k − 1)}], thereby indicating that the
IAFWNC only had two inputs. The proposed IAFWNC only has three
fuzzy rules, which means that three SRWNNs were used in fourth
layer of the IAFWNC. The number of fuzzy rules was set to three and
the number of wavelets was two (in each SRWNN). A third-order
identifier was used in this evaluation, i.e., α1 and α2 in (34) were all
set to two. Therefore, the AQNNI input vector can be represented as
−1
1
[ a−
c {u(k), . . . , u(k − 2)}, aI {∆ω12 (k), . . . , ∆ω12 (k − 2)}]. After
offline training, the structure of the AQNNI was set as 6–5–1 (six
neurons in the input layer, five neurons in the hidden layer, and
one neuron in the output layer). The initial values of the parameters
for offline training were in the range of [−π , π]. The value of the
penalty factor β was set to 0.000025. A sampling rate of 40 Hz was
also used in this study. The values of the parameters used in the

In this section, we describe the performance of the proposed
IAFWNC in the test system where disturbances occurred at various
locations in the system. The results are presented for three cases:
(i) system equipped with PSSs, (ii) system equipped with PSSs
and a PI-controlled SSSC, and (iii) system equipped with PSSs and
an IAFWNC-controlled SSSC. The PI controller was tuned by a GA
where Kp = 31.0238 and Ki = 3.9687.
The system’s responses to a 10-cycle three-phase-to-ground
fault at buses 1, 2, 3, and 4 are shown in Figs. 6–9. For comparison,
we monitored the difference between the speed of generators G1
and G2 , ω12 = (ω1 − ω2 ). The figures show that the proposed
IAFWNC exhibited superior damping performance compared with
the conventional PI controller due to the intelligent variations
in the learning rates. It is also clear that the proposed AQNNI
delivered acceptable performance when tracking the inter-area
oscillations ω12 . Thus, the sensitivity of the inter-area oscillations
to the control signal can be calculated accurately by the AQNNI,
thereby optimizing the damping of the system oscillations with
an accurate identifier. To facilitate a quantitative evaluation of the
simulation results, the values of various performance metrics, i.e.,
the integral square error (ISE), integral time square error (ITSE),
and integral time absolute error (ITAE), are given in Table 3.
According to the results presented in Table 3, the performance of
the proposed IAFWNC was satisfactory for all of the disturbances
that occurred at various locations in the system compared with the
conventional PI controller.

180

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

A

B

Fig. 8. (A) Gen. 1 swing against Gen. 2, fault location at bus 3 with a duration of 10 cycles; and (B) identifier performance during the fault.

Fig. 9. (A) Gen. 1 swing against Gen. 2, fault location at bus 4 with a duration of 10 cycles; and (B) identifier performance during the fault.

Fig. 10. (A) Gen. 1 swing against Gen. 2, fault location at bus 2 with a duration of 12 cycles at t = 0 s and bus 3 with a duration of 15 cycles at t = 1.0 s; and (B) identifier
performance during the fault.
Table 3
Quantitative evaluation of the simulation results obtained with different types of controller for case 1.
Fault location

Bus 1
Bus 2
Bus 3
Bus 4

PSS + PI

PSS

PSS + IAFWNC

ISE
(e−003)

ITSE
(e−003)

ITAE

ISE
(e−003)

ITSE
(e−003)

ITAE

ISE
(e−003)

ITSE
(e−003)

ITAE

18.67
2.70
0.42
1.11

13.96
1.85
0.27
0.83

7.90
2.68
1.01
2.03

8.47
1.23
0.21
0.51

3.44
0.50
0.09
0.20

1.84
0.58
0.34
0.55

6.49
0.44
0.08
0.21

2.01
0.12
0.03
0.06

0.81
0.25
0.19
0.22

6.3. Case 2
To further evaluate the effectiveness of the proposed IAFWNC
method in terms of its transient performance and robustness, more
severe conditions were selected and applied in the test power
system. Thus, a 12-cycle three-phase-to-ground fault was applied

at bus 2 at t = 0 s and at t = 1.0 s, when the oscillations of the
system had not yet been damped completely, another three-phaseto-ground fault with a greater duration, i.e., 15-cycle, was applied
at bus 3. The system responses obtained in this case are shown in
Fig. 10. It should be noted that the second fault was applied when
the system was still under the influence of the first fault and it had

S. Ganjefar et al. / Neural Networks 71 (2015) 172–181

not yet reached a steady-state condition. However, even in these
more severe conditions, the results demonstrated that the dynamic
stabilization performance provided by IAFWNC was better than the
conventional PI controller. Moreover, it was observed that despite
the severe transient conditions, the inter-area oscillations of the
system were tracked successfully by the proposed AQNNI, which
explained why the proposed method was so effective.
7. Discussion and conclusion
In our proposed method, we substitute the constant or linear
functions in the consequent part of each fuzzy rule in the TSK fuzzy
model with a SRWNN to obtain an FWNN equipped with a SRWNN.
The proposed FWNN is then employed as an IAFWNC to damp
inter-area oscillations in multi-machine power system. All of the
parameters of the consequent parts in each fuzzy rule are updated
online based on indirect adaptive control theory. A LALR algorithm
is also used to speed up the stabilization rate and to guarantee the
convergence of the proposed stabilizer. An identifier based on a
QNN used to train the IAFWNC in the proposed scheme. We used
a two-machine, two-area power system equipped with a SSSC as
a series FACTS to demonstrate the effectiveness of the proposed
controller. The results presented in Figs. 6–10 clearly demonstrate
that the system response with the proposed controller was
generally highly acceptable. We also investigated the efficiency of
the proposed controller using different performance metrics, i.e.,
ISE, ITSE, and ITAE. The simulation results showed that compared
with the PSS and PSS+PI, the proposed method obtained a better
response behavior to damp out inter-area oscillations.
The proposed model can be applied in many scientific and
engineering research areas, such as pattern recognition, signal
processing, forecasting, and function approximation. In addition,
given the advantages of type-2 fuzzy sets over type-1 fuzzy sets,
the proposed model can also be extended with type-2 fuzzy sets.
In further research, we aim to investigate the performance of the
model with different wavelet functions.
References
Abiyev, R. H., & Kaynak, O. (2008). Fuzzy wavelet neural networks for identification
and control of dynamic plants—A novel structure and a comparative study. IEEE
Transactions on Industrial Electronics, 55, 3133–3140.
Al-Duwaish, Hussain N., & Al-Hamouz, Zakariya M. (2011). A neural network based
adaptive sliding mode controller: Application to a power system stabilizer.
Energy Conversion and Management, 52, 1533–1538.
Bevrani, H., Hiyama, T., & Bevranic, H. (2011). Robust PID based power system
stabiliser: Design and real-time implementation. International Journal of
Electrical Power & Energy Systems, 33, 179–188.
Chatterjee, A., Ghoshal, S. P., & Mukherjee, V. (2011). Chaotic ant swarm
optimization for fuzzy-based tuning of power system stabilizer. International
Journal of Electrical Power & Energy Systems, 33, 657–672.
Dong, L., Xiao, D., Liang, Y., & Liu, Y. (2008). Rough set and fuzzy wavelet neural
network integrated with least square weighted fusion algorithm based fault
diagnosis research for power transformers. Electric Power Systems Research, 78,
129–136.

181

Ebadat, A., Noroozi, N., Safavi, A. A., & Mousavi, S. H. (2011). New fuzzy wavelet
network for modeling and control: The modeling approach. Communications in
Nonlinear Science and Numerical Simulation, 16, 3385–3396.
El-Sousy, F. F. M. (2011). Robust wavelet-neural-network sliding-mode control
system for permanent magnet synchronous motor drive. IET Electric Power
Applications, 5, 113–132.
Ganjefar, S., & Alizadeh, M. (2012). Inter-area oscillations damping by multiobjective wavelet neural inverse controlled SSSC. International Review of
Electrical Engineering (IREE), 7(2, Part B), 4000–4012.
Ganjefar, S., Ghassemi, A. A., & Ahmadi, M. M. (2014). Improving efficiency of twotype maximum power point tracking methods of tip-speed ratio and optimum
torque in wind turbine system using a quantum neural network. Energy, 67,
444–453.
Hassan, L. H., Moghavvemi, M., Almurib, H. A. F., Muttaqi, K. M., & Du, H. (2012).
Damping of low-frequency oscillations and improving power system stability
via auto-tuned PI stabilizer using Takagi–Sugeno fuzzy logic. International
Journal of Electrical Power & Energy Systems, 38, 72–83.
Hussein, T., Saad, M. S., Elshafei, A. L., & Bahgat, A. (2010). Damping inter-area modes
of oscillation using an adaptive fuzzy power system stabilizer. Electric Power
Systems Research, 80, 1428–1436.
Karrari, M., & Malik, O. P. (2005). Identification of synchronous generators using
adaptive wavelet networks. International Journal of Electrical Power & Energy
Systems, 27, 113–120.
Khan, M. A. S. K., & Azizur Rahman, M. (2010). A novel neuro-wavelet-based selftuned wavelet controller for IPM motor drives. IEEE Transactions on Industry
Applications, 46, 1194–1203.
Khodabakhshian, A., & Hemmati, R. (2012). Robust decentralized multi-machine
power system stabilizer design using quantitative feedback theory. International Journal of Electrical Power & Energy Systems, 41, 112–119.
Kouda, N., Matsui, N., & Nishimura, H. (2002). Image compression by layered
quantum neural networks. Neural Processing Letters, 16, 67–80.
Kouda, N., Matsui, N., & Nishimura, H. (2004). A multi-layered feedforward network
based on qubit neuron model. Systems and Computers in Japan, 35, 43–51.
Kouda, N., Matsui, N., Nishimura, H., & Peper, F. (2005). Qubit neural network and
its learning efficiency. Neural Computing & Applications, 14, 114–121.
Muzhou, H., & Xuli, H. (2011). The multidimensional function approximation
based on constructive wavelet RBF neural network. Applied Soft Computing, 11,
2173–2177.
Narendra, K. S., & Parthasarathy, K. (1990). Identification and control of dynamic
system using neural network. IEEE Transactions on Neural Networks, 1, 4–27.
Nechadia, E., Harmasa, M. N., Hamzaouib, A., & Essounboulib, N. (2012). Type-2
fuzzy based adaptive synergetic power system control. Electric Power Systems
Research, 88, 9–15.
Ngamroo, I. (2012). Robust coordinated control of electrolyzer and PSS for
stabilization of microgrid based on PID-based mixed H2/H∞ control.
Renewable Energy, 45, 16–23.
Radaideh, S. M., Nejdawi, I. M., & Mushtaha, M. H. (2012). Design of power system
stabilizers using two level fuzzy and adaptive neuro-fuzzy inference systems.
International Journal of Electrical Power & Energy Systems, 35, 47–56.
Sharma, A., & Kothari, M. L. (2003). Intelligent dual input power system stabilizer.
Electric Power Systems Research, 64, 257–267.
Shaw, B., Banerjee, A., Ghoshal, S. P., & Mukherjee, V. (2011). Comparative
seeker and bio-inspired fuzzy logic controllers for power system stabilizers.
International Journal of Electrical Power & Energy Systems, 33, 1728–1738.
Talaat, H. E., Abdennour, A., & Al-Sulaiman, A. A. (2010). Design and experimental
investigation of a decentralized GA optimized neuro-fuzzy power system
stabilizer. International Journal of Electrical Power & Energy Systems, 32,
751–759.
Wai, R. J. (2002). Development of new training algorithms for neuro-wavelet
systems on the robust control of induction servo motor drive. IEEE Transactions
on Industrial Electronics, 49, 1323–1341.
Yoo, S. J., Park, J. B., & Choi, Y. H. (2005). Stable predictive control of chaotic systems
using self-recurrent wavelet neural network. International Journal of Control,
Automation, and Systems, 3, 43–55.
Zhang, Q., & Benveniste, A. (1992). Wavelet networks. IEEE Transactions on Neural
Networks, 3, 889–898.
Zhang, P., & Wang, H. (2012). Fuzzy wavelet neural networks for city electric energy
consumption forecasting. Energy Procedia, 17, 1332–1338.

